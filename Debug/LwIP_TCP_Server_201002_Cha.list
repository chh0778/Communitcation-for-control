
LwIP_TCP_Server_201002_Cha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f24  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d50  080110d4  080110d4  000210d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013e24  08013e24  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  08013e24  08013e24  00023e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013e2c  08013e2c  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013e2c  08013e2c  00023e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013e30  08013e30  00023e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08013e34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000069d4  20000084  08013eb8  00030084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006a58  08013eb8  00036a58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000301bc  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b91  00000000  00000000  00060270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  00065e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001550  00000000  00000000  000673f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f927  00000000  00000000  00068940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024e81  00000000  00000000  00098267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0bc5  00000000  00000000  000bd0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001adcad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063e0  00000000  00000000  001add00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080110bc 	.word	0x080110bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	080110bc 	.word	0x080110bc

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f001 fb6e 	bl	8001c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f8d2 	bl	8000768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 fa90 	bl	8000ae8 <MX_GPIO_Init>
  MX_LWIP_Init();
 80005c8:	f004 fa7a 	bl	8004ac0 <MX_LWIP_Init>
  MX_TIM2_Init();
 80005cc:	f000 f938 	bl	8000840 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005d0:	f000 f990 	bl	80008f4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005d4:	f000 f9e8 	bl	80009a8 <MX_TIM4_Init>
  MX_TIM12_Init();
 80005d8:	f000 fa40 	bl	8000a5c <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  User_notification(&gnetif);
 80005dc:	485b      	ldr	r0, [pc, #364]	; (800074c <main+0x194>)
 80005de:	f000 fb4b 	bl	8000c78 <User_notification>
  tcp_echoserver_init();
 80005e2:	f000 fe17 	bl	8001214 <tcp_echoserver_init>
  LED_OnOff(LED_ALL, 500);
 80005e6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005ea:	20ff      	movs	r0, #255	; 0xff
 80005ec:	f000 fb26 	bl	8000c3c <LED_OnOff>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3); // linear motor for move
 80005f0:	2108      	movs	r1, #8
 80005f2:	4857      	ldr	r0, [pc, #348]	; (8000750 <main+0x198>)
 80005f4:	f003 fc9a 	bl	8003f2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2); // servo motor for revolution
 80005f8:	2104      	movs	r1, #4
 80005fa:	4856      	ldr	r0, [pc, #344]	; (8000754 <main+0x19c>)
 80005fc:	f003 fc96 	bl	8003f2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1); // servo motor for push
 8000600:	2100      	movs	r1, #0
 8000602:	4855      	ldr	r0, [pc, #340]	; (8000758 <main+0x1a0>)
 8000604:	f003 fc92 	bl	8003f2c <HAL_TIM_PWM_Start>
  __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 75);	//linear motor set
 8000608:	4b51      	ldr	r3, [pc, #324]	; (8000750 <main+0x198>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	224b      	movs	r2, #75	; 0x4b
 800060e:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 80);	//revolution set
 8000610:	4b50      	ldr	r3, [pc, #320]	; (8000754 <main+0x19c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2250      	movs	r2, #80	; 0x50
 8000616:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SetCompare(&htim12, TIM_CHANNEL_1, 80);	//push set
 8000618:	4b4f      	ldr	r3, [pc, #316]	; (8000758 <main+0x1a0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2250      	movs	r2, #80	; 0x50
 800061e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8000620:	f004 fb80 	bl	8004d24 <MX_LWIP_Process>
	  /////////////////////////sw1 is pressed ///////////////////////////
	  if ( flag== 1 ) {
 8000624:	4b4d      	ldr	r3, [pc, #308]	; (800075c <main+0x1a4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d13e      	bne.n	80006aa <main+0xf2>
		  if(move_flag==1){
 800062c:	4b4c      	ldr	r3, [pc, #304]	; (8000760 <main+0x1a8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d107      	bne.n	8000644 <main+0x8c>
			  __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 110);		//move_left
 8000634:	4b46      	ldr	r3, [pc, #280]	; (8000750 <main+0x198>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	226e      	movs	r2, #110	; 0x6e
 800063a:	63da      	str	r2, [r3, #60]	; 0x3c
			  move_flag=2;
 800063c:	4b48      	ldr	r3, [pc, #288]	; (8000760 <main+0x1a8>)
 800063e:	2202      	movs	r2, #2
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	e02e      	b.n	80006a2 <main+0xea>
		  }
		  else if(move_flag==2){
 8000644:	4b46      	ldr	r3, [pc, #280]	; (8000760 <main+0x1a8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b02      	cmp	r3, #2
 800064a:	d107      	bne.n	800065c <main+0xa4>
			  __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 90);		//move_center-left
 800064c:	4b40      	ldr	r3, [pc, #256]	; (8000750 <main+0x198>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	225a      	movs	r2, #90	; 0x5a
 8000652:	63da      	str	r2, [r3, #60]	; 0x3c
			  move_flag=3;
 8000654:	4b42      	ldr	r3, [pc, #264]	; (8000760 <main+0x1a8>)
 8000656:	2203      	movs	r2, #3
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	e022      	b.n	80006a2 <main+0xea>
		  }
		  else if(move_flag==3){
 800065c:	4b40      	ldr	r3, [pc, #256]	; (8000760 <main+0x1a8>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b03      	cmp	r3, #3
 8000662:	d107      	bne.n	8000674 <main+0xbc>
			  __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 80);		//move_center
 8000664:	4b3a      	ldr	r3, [pc, #232]	; (8000750 <main+0x198>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2250      	movs	r2, #80	; 0x50
 800066a:	63da      	str	r2, [r3, #60]	; 0x3c
			  move_flag=4;
 800066c:	4b3c      	ldr	r3, [pc, #240]	; (8000760 <main+0x1a8>)
 800066e:	2204      	movs	r2, #4
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	e016      	b.n	80006a2 <main+0xea>
		  }
		  else if(move_flag==4){
 8000674:	4b3a      	ldr	r3, [pc, #232]	; (8000760 <main+0x1a8>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b04      	cmp	r3, #4
 800067a:	d107      	bne.n	800068c <main+0xd4>
			  __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 65);		//move_center-right
 800067c:	4b34      	ldr	r3, [pc, #208]	; (8000750 <main+0x198>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2241      	movs	r2, #65	; 0x41
 8000682:	63da      	str	r2, [r3, #60]	; 0x3c
			  move_flag=5;
 8000684:	4b36      	ldr	r3, [pc, #216]	; (8000760 <main+0x1a8>)
 8000686:	2205      	movs	r2, #5
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	e00a      	b.n	80006a2 <main+0xea>
		  }
		  else if(move_flag==5){
 800068c:	4b34      	ldr	r3, [pc, #208]	; (8000760 <main+0x1a8>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b05      	cmp	r3, #5
 8000692:	d106      	bne.n	80006a2 <main+0xea>
			  __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 50);		//move_right
 8000694:	4b2e      	ldr	r3, [pc, #184]	; (8000750 <main+0x198>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2232      	movs	r2, #50	; 0x32
 800069a:	63da      	str	r2, [r3, #60]	; 0x3c
			  move_flag=1;
 800069c:	4b30      	ldr	r3, [pc, #192]	; (8000760 <main+0x1a8>)
 800069e:	2201      	movs	r2, #1
 80006a0:	601a      	str	r2, [r3, #0]
		  }
		  flag= 0;
 80006a2:	4b2e      	ldr	r3, [pc, #184]	; (800075c <main+0x1a4>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	e7ba      	b.n	8000620 <main+0x68>
	  }
	  ////////////////////////////sw2 is pressed ///////////////////////////
	  else if ( flag== 2 ) {
 80006aa:	4b2c      	ldr	r3, [pc, #176]	; (800075c <main+0x1a4>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	d117      	bne.n	80006e2 <main+0x12a>
		  revolution_flag+=2;
 80006b2:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <main+0x1ac>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	3302      	adds	r3, #2
 80006b8:	4a2a      	ldr	r2, [pc, #168]	; (8000764 <main+0x1ac>)
 80006ba:	6013      	str	r3, [r2, #0]
		  if(revolution_flag<120){
 80006bc:	4b29      	ldr	r3, [pc, #164]	; (8000764 <main+0x1ac>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b77      	cmp	r3, #119	; 0x77
 80006c2:	dc05      	bgt.n	80006d0 <main+0x118>
			  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, revolution_flag);
 80006c4:	4b27      	ldr	r3, [pc, #156]	; (8000764 <main+0x1ac>)
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	4b22      	ldr	r3, [pc, #136]	; (8000754 <main+0x19c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	639a      	str	r2, [r3, #56]	; 0x38
 80006ce:	e004      	b.n	80006da <main+0x122>
		  }
		  else{
			  revolution_flag-=2;
 80006d0:	4b24      	ldr	r3, [pc, #144]	; (8000764 <main+0x1ac>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	3b02      	subs	r3, #2
 80006d6:	4a23      	ldr	r2, [pc, #140]	; (8000764 <main+0x1ac>)
 80006d8:	6013      	str	r3, [r2, #0]
		  }
		  flag = 0;
 80006da:	4b20      	ldr	r3, [pc, #128]	; (800075c <main+0x1a4>)
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	e79e      	b.n	8000620 <main+0x68>
	  }
	  ///////////////////////////////sw3 is pressed ///////////////////////////
	  else if ( flag == 3 ) {
 80006e2:	4b1e      	ldr	r3, [pc, #120]	; (800075c <main+0x1a4>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b03      	cmp	r3, #3
 80006e8:	d117      	bne.n	800071a <main+0x162>
		  revolution_flag-=2;
 80006ea:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <main+0x1ac>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	3b02      	subs	r3, #2
 80006f0:	4a1c      	ldr	r2, [pc, #112]	; (8000764 <main+0x1ac>)
 80006f2:	6013      	str	r3, [r2, #0]
		  if(revolution_flag>40){
 80006f4:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <main+0x1ac>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b28      	cmp	r3, #40	; 0x28
 80006fa:	dd05      	ble.n	8000708 <main+0x150>
			  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, revolution_flag);
 80006fc:	4b19      	ldr	r3, [pc, #100]	; (8000764 <main+0x1ac>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <main+0x19c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	639a      	str	r2, [r3, #56]	; 0x38
 8000706:	e004      	b.n	8000712 <main+0x15a>
		  }
		  else{
			  revolution_flag+=2;
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <main+0x1ac>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	3302      	adds	r3, #2
 800070e:	4a15      	ldr	r2, [pc, #84]	; (8000764 <main+0x1ac>)
 8000710:	6013      	str	r3, [r2, #0]
		  }
		  flag = 0;
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <main+0x1a4>)
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	e782      	b.n	8000620 <main+0x68>
	  }
	////////////////////////////sw4 is pressed ///////////////////////////
	  else if ( flag == 4 ) {
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <main+0x1a4>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b04      	cmp	r3, #4
 8000720:	f47f af7e 	bne.w	8000620 <main+0x68>
		  __HAL_TIM_SetCompare(&htim12, TIM_CHANNEL_1, 40);
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <main+0x1a0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2228      	movs	r2, #40	; 0x28
 800072a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1000);
 800072c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000730:	f001 fb26 	bl	8001d80 <HAL_Delay>
		  __HAL_TIM_SetCompare(&htim12, TIM_CHANNEL_1, 80);
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <main+0x1a0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2250      	movs	r2, #80	; 0x50
 800073a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1000);
 800073c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000740:	f001 fb1e 	bl	8001d80 <HAL_Delay>
		  flag = 0;
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <main+0x1a4>)
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
	  MX_LWIP_Process();
 800074a:	e769      	b.n	8000620 <main+0x68>
 800074c:	20000270 	.word	0x20000270
 8000750:	200002f0 	.word	0x200002f0
 8000754:	200002a4 	.word	0x200002a4
 8000758:	20000338 	.word	0x20000338
 800075c:	2000026c 	.word	0x2000026c
 8000760:	20000000 	.word	0x20000000
 8000764:	20000004 	.word	0x20000004

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b094      	sub	sp, #80	; 0x50
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 0320 	add.w	r3, r7, #32
 8000772:	2230      	movs	r2, #48	; 0x30
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f00f fad4 	bl	800fd24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	4b29      	ldr	r3, [pc, #164]	; (8000838 <SystemClock_Config+0xd0>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	4a28      	ldr	r2, [pc, #160]	; (8000838 <SystemClock_Config+0xd0>)
 8000796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079a:	6413      	str	r3, [r2, #64]	; 0x40
 800079c:	4b26      	ldr	r3, [pc, #152]	; (8000838 <SystemClock_Config+0xd0>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007a8:	2300      	movs	r3, #0
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	4b23      	ldr	r3, [pc, #140]	; (800083c <SystemClock_Config+0xd4>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007b4:	4a21      	ldr	r2, [pc, #132]	; (800083c <SystemClock_Config+0xd4>)
 80007b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <SystemClock_Config+0xd4>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c8:	2302      	movs	r3, #2
 80007ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007cc:	2301      	movs	r3, #1
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d0:	2310      	movs	r3, #16
 80007d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d4:	2302      	movs	r3, #2
 80007d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d8:	2300      	movs	r3, #0
 80007da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007dc:	2308      	movs	r3, #8
 80007de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80007e0:	2340      	movs	r3, #64	; 0x40
 80007e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007e8:	2304      	movs	r3, #4
 80007ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ec:	f107 0320 	add.w	r3, r7, #32
 80007f0:	4618      	mov	r0, r3
 80007f2:	f002 feff 	bl	80035f4 <HAL_RCC_OscConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007fc:	f000 fa5a 	bl	8000cb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000800:	230f      	movs	r3, #15
 8000802:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000804:	2302      	movs	r3, #2
 8000806:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800080c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000810:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000816:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	2101      	movs	r1, #1
 800081e:	4618      	mov	r0, r3
 8000820:	f003 f960 	bl	8003ae4 <HAL_RCC_ClockConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800082a:	f000 fa43 	bl	8000cb4 <Error_Handler>
  }
}
 800082e:	bf00      	nop
 8000830:	3750      	adds	r7, #80	; 0x50
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	40007000 	.word	0x40007000

08000840 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000846:	f107 0320 	add.w	r3, r7, #32
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]
 800085e:	615a      	str	r2, [r3, #20]
 8000860:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000862:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <MX_TIM2_Init+0xb0>)
 8000864:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000868:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 320;
 800086a:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <MX_TIM2_Init+0xb0>)
 800086c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000870:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000872:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <MX_TIM2_Init+0xb0>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_TIM2_Init+0xb0>)
 800087a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800087e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_TIM2_Init+0xb0>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_TIM2_Init+0xb0>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800088c:	4818      	ldr	r0, [pc, #96]	; (80008f0 <MX_TIM2_Init+0xb0>)
 800088e:	f003 fafd 	bl	8003e8c <HAL_TIM_PWM_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000898:	f000 fa0c 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089c:	2300      	movs	r3, #0
 800089e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008a4:	f107 0320 	add.w	r3, r7, #32
 80008a8:	4619      	mov	r1, r3
 80008aa:	4811      	ldr	r0, [pc, #68]	; (80008f0 <MX_TIM2_Init+0xb0>)
 80008ac:	f004 f878 	bl	80049a0 <HAL_TIMEx_MasterConfigSynchronization>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80008b6:	f000 f9fd 	bl	8000cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ba:	2360      	movs	r3, #96	; 0x60
 80008bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 80008be:	2332      	movs	r3, #50	; 0x32
 80008c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2208      	movs	r2, #8
 80008ce:	4619      	mov	r1, r3
 80008d0:	4807      	ldr	r0, [pc, #28]	; (80008f0 <MX_TIM2_Init+0xb0>)
 80008d2:	f003 fcfb 	bl	80042cc <HAL_TIM_PWM_ConfigChannel>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80008dc:	f000 f9ea 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008e0:	4803      	ldr	r0, [pc, #12]	; (80008f0 <MX_TIM2_Init+0xb0>)
 80008e2:	f000 fa97 	bl	8000e14 <HAL_TIM_MspPostInit>

}
 80008e6:	bf00      	nop
 80008e8:	3728      	adds	r7, #40	; 0x28
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200002f0 	.word	0x200002f0

080008f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	; 0x28
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fa:	f107 0320 	add.w	r3, r7, #32
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]
 8000912:	615a      	str	r2, [r3, #20]
 8000914:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000916:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <MX_TIM3_Init+0xac>)
 8000918:	4a22      	ldr	r2, [pc, #136]	; (80009a4 <MX_TIM3_Init+0xb0>)
 800091a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 320;
 800091c:	4b20      	ldr	r3, [pc, #128]	; (80009a0 <MX_TIM3_Init+0xac>)
 800091e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000922:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000924:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <MX_TIM3_Init+0xac>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800092a:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <MX_TIM3_Init+0xac>)
 800092c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000930:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000932:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <MX_TIM3_Init+0xac>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000938:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <MX_TIM3_Init+0xac>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800093e:	4818      	ldr	r0, [pc, #96]	; (80009a0 <MX_TIM3_Init+0xac>)
 8000940:	f003 faa4 	bl	8003e8c <HAL_TIM_PWM_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800094a:	f000 f9b3 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000956:	f107 0320 	add.w	r3, r7, #32
 800095a:	4619      	mov	r1, r3
 800095c:	4810      	ldr	r0, [pc, #64]	; (80009a0 <MX_TIM3_Init+0xac>)
 800095e:	f004 f81f 	bl	80049a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000968:	f000 f9a4 	bl	8000cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800096c:	2360      	movs	r3, #96	; 0x60
 800096e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000970:	2332      	movs	r3, #50	; 0x32
 8000972:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2204      	movs	r2, #4
 8000980:	4619      	mov	r1, r3
 8000982:	4807      	ldr	r0, [pc, #28]	; (80009a0 <MX_TIM3_Init+0xac>)
 8000984:	f003 fca2 	bl	80042cc <HAL_TIM_PWM_ConfigChannel>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800098e:	f000 f991 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000992:	4803      	ldr	r0, [pc, #12]	; (80009a0 <MX_TIM3_Init+0xac>)
 8000994:	f000 fa3e 	bl	8000e14 <HAL_TIM_MspPostInit>

}
 8000998:	bf00      	nop
 800099a:	3728      	adds	r7, #40	; 0x28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	200002a4 	.word	0x200002a4
 80009a4:	40000400 	.word	0x40000400

080009a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ae:	f107 0320 	add.w	r3, r7, #32
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]
 80009c6:	615a      	str	r2, [r3, #20]
 80009c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009ca:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <MX_TIM4_Init+0xac>)
 80009cc:	4a22      	ldr	r2, [pc, #136]	; (8000a58 <MX_TIM4_Init+0xb0>)
 80009ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 320;
 80009d0:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <MX_TIM4_Init+0xac>)
 80009d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80009d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d8:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <MX_TIM4_Init+0xac>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80009de:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <MX_TIM4_Init+0xac>)
 80009e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e6:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MX_TIM4_Init+0xac>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ec:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <MX_TIM4_Init+0xac>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009f2:	4818      	ldr	r0, [pc, #96]	; (8000a54 <MX_TIM4_Init+0xac>)
 80009f4:	f003 fa4a 	bl	8003e8c <HAL_TIM_PWM_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80009fe:	f000 f959 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a0a:	f107 0320 	add.w	r3, r7, #32
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4810      	ldr	r0, [pc, #64]	; (8000a54 <MX_TIM4_Init+0xac>)
 8000a12:	f003 ffc5 	bl	80049a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000a1c:	f000 f94a 	bl	8000cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a20:	2360      	movs	r3, #96	; 0x60
 8000a22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000a24:	2332      	movs	r3, #50	; 0x32
 8000a26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2200      	movs	r2, #0
 8000a34:	4619      	mov	r1, r3
 8000a36:	4807      	ldr	r0, [pc, #28]	; (8000a54 <MX_TIM4_Init+0xac>)
 8000a38:	f003 fc48 	bl	80042cc <HAL_TIM_PWM_ConfigChannel>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000a42:	f000 f937 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a46:	4803      	ldr	r0, [pc, #12]	; (8000a54 <MX_TIM4_Init+0xac>)
 8000a48:	f000 f9e4 	bl	8000e14 <HAL_TIM_MspPostInit>

}
 8000a4c:	bf00      	nop
 8000a4e:	3728      	adds	r7, #40	; 0x28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000224 	.word	0x20000224
 8000a58:	40000800 	.word	0x40000800

08000a5c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
 8000a70:	615a      	str	r2, [r3, #20]
 8000a72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000a74:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <MX_TIM12_Init+0x84>)
 8000a76:	4a1b      	ldr	r2, [pc, #108]	; (8000ae4 <MX_TIM12_Init+0x88>)
 8000a78:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 320;
 8000a7a:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <MX_TIM12_Init+0x84>)
 8000a7c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000a80:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <MX_TIM12_Init+0x84>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 8000a88:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <MX_TIM12_Init+0x84>)
 8000a8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a8e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <MX_TIM12_Init+0x84>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <MX_TIM12_Init+0x84>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000a9c:	4810      	ldr	r0, [pc, #64]	; (8000ae0 <MX_TIM12_Init+0x84>)
 8000a9e:	f003 f9f5 	bl	8003e8c <HAL_TIM_PWM_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM12_Init+0x50>
  {
    Error_Handler();
 8000aa8:	f000 f904 	bl	8000cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aac:	2360      	movs	r3, #96	; 0x60
 8000aae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000ab0:	2332      	movs	r3, #50	; 0x32
 8000ab2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2200      	movs	r2, #0
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <MX_TIM12_Init+0x84>)
 8000ac4:	f003 fc02 	bl	80042cc <HAL_TIM_PWM_ConfigChannel>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8000ace:	f000 f8f1 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000ad2:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <MX_TIM12_Init+0x84>)
 8000ad4:	f000 f99e 	bl	8000e14 <HAL_TIM_MspPostInit>

}
 8000ad8:	bf00      	nop
 8000ada:	3720      	adds	r7, #32
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000338 	.word	0x20000338
 8000ae4:	40001800 	.word	0x40001800

08000ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08c      	sub	sp, #48	; 0x30
 8000aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
 8000b02:	4b4b      	ldr	r3, [pc, #300]	; (8000c30 <MX_GPIO_Init+0x148>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a4a      	ldr	r2, [pc, #296]	; (8000c30 <MX_GPIO_Init+0x148>)
 8000b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b48      	ldr	r3, [pc, #288]	; (8000c30 <MX_GPIO_Init+0x148>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b16:	61bb      	str	r3, [r7, #24]
 8000b18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	4b44      	ldr	r3, [pc, #272]	; (8000c30 <MX_GPIO_Init+0x148>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a43      	ldr	r2, [pc, #268]	; (8000c30 <MX_GPIO_Init+0x148>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b41      	ldr	r3, [pc, #260]	; (8000c30 <MX_GPIO_Init+0x148>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0304 	and.w	r3, r3, #4
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b3d      	ldr	r3, [pc, #244]	; (8000c30 <MX_GPIO_Init+0x148>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a3c      	ldr	r2, [pc, #240]	; (8000c30 <MX_GPIO_Init+0x148>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b3a      	ldr	r3, [pc, #232]	; (8000c30 <MX_GPIO_Init+0x148>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b36      	ldr	r3, [pc, #216]	; (8000c30 <MX_GPIO_Init+0x148>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a35      	ldr	r2, [pc, #212]	; (8000c30 <MX_GPIO_Init+0x148>)
 8000b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b33      	ldr	r3, [pc, #204]	; (8000c30 <MX_GPIO_Init+0x148>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	4b2f      	ldr	r3, [pc, #188]	; (8000c30 <MX_GPIO_Init+0x148>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a2e      	ldr	r2, [pc, #184]	; (8000c30 <MX_GPIO_Init+0x148>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b2c      	ldr	r3, [pc, #176]	; (8000c30 <MX_GPIO_Init+0x148>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b28      	ldr	r3, [pc, #160]	; (8000c30 <MX_GPIO_Init+0x148>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a27      	ldr	r2, [pc, #156]	; (8000c30 <MX_GPIO_Init+0x148>)
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <MX_GPIO_Init+0x148>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0308 	and.w	r3, r3, #8
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	21fb      	movs	r1, #251	; 0xfb
 8000baa:	4822      	ldr	r0, [pc, #136]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000bac:	f002 fcf0 	bl	8003590 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bb4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	481c      	ldr	r0, [pc, #112]	; (8000c38 <MX_GPIO_Init+0x150>)
 8000bc6:	f002 fb37 	bl	8003238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8000bca:	23fb      	movs	r3, #251	; 0xfb
 8000bcc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4619      	mov	r1, r3
 8000be0:	4814      	ldr	r0, [pc, #80]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000be2:	f002 fb29 	bl	8003238 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	2006      	movs	r0, #6
 8000bec:	f001 f9c7 	bl	8001f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bf0:	2006      	movs	r0, #6
 8000bf2:	f001 f9e0 	bl	8001fb6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2007      	movs	r0, #7
 8000bfc:	f001 f9bf 	bl	8001f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c00:	2007      	movs	r0, #7
 8000c02:	f001 f9d8 	bl	8001fb6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2008      	movs	r0, #8
 8000c0c:	f001 f9b7 	bl	8001f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000c10:	2008      	movs	r0, #8
 8000c12:	f001 f9d0 	bl	8001fb6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2009      	movs	r0, #9
 8000c1c:	f001 f9af 	bl	8001f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000c20:	2009      	movs	r0, #9
 8000c22:	f001 f9c8 	bl	8001fb6 <HAL_NVIC_EnableIRQ>

}
 8000c26:	bf00      	nop
 8000c28:	3730      	adds	r7, #48	; 0x30
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020c00 	.word	0x40020c00
 8000c38:	40021800 	.word	0x40021800

08000c3c <LED_OnOff>:

/* USER CODE BEGIN 4 */
void LED_OnOff(int led, int interval)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIO_LED, led, GPIO_PIN_SET );
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4809      	ldr	r0, [pc, #36]	; (8000c74 <LED_OnOff+0x38>)
 8000c50:	f002 fc9e 	bl	8003590 <HAL_GPIO_WritePin>
	HAL_Delay(interval);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 f892 	bl	8001d80 <HAL_Delay>
	HAL_GPIO_WritePin(GPIO_LED, led, GPIO_PIN_RESET );
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	2200      	movs	r2, #0
 8000c62:	4619      	mov	r1, r3
 8000c64:	4803      	ldr	r0, [pc, #12]	; (8000c74 <LED_OnOff+0x38>)
 8000c66:	f002 fc93 	bl	8003590 <HAL_GPIO_WritePin>

}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40020c00 	.word	0x40020c00

08000c78 <User_notification>:

void User_notification(struct netif *netif)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	if (netif_is_up(netif))  {
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d005      	beq.n	8000c9c <User_notification+0x24>
		HAL_GPIO_WritePin(GPIO_LED, LED7, GPIO_PIN_SET);
 8000c90:	2201      	movs	r2, #1
 8000c92:	2140      	movs	r1, #64	; 0x40
 8000c94:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <User_notification+0x38>)
 8000c96:	f002 fc7b 	bl	8003590 <HAL_GPIO_WritePin>
	}

	else  {
		HAL_GPIO_WritePin(GPIO_LED, LED8, GPIO_PIN_SET);
	}
}
 8000c9a:	e004      	b.n	8000ca6 <User_notification+0x2e>
		HAL_GPIO_WritePin(GPIO_LED, LED8, GPIO_PIN_SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2180      	movs	r1, #128	; 0x80
 8000ca0:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <User_notification+0x38>)
 8000ca2:	f002 fc75 	bl	8003590 <HAL_GPIO_WritePin>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40020c00 	.word	0x40020c00

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	4a0f      	ldr	r2, [pc, #60]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cda:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	4a08      	ldr	r2, [pc, #32]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800

08000d14 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d24:	d116      	bne.n	8000d54 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	4b36      	ldr	r3, [pc, #216]	; (8000e04 <HAL_TIM_PWM_MspInit+0xf0>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	4a35      	ldr	r2, [pc, #212]	; (8000e04 <HAL_TIM_PWM_MspInit+0xf0>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6413      	str	r3, [r2, #64]	; 0x40
 8000d36:	4b33      	ldr	r3, [pc, #204]	; (8000e04 <HAL_TIM_PWM_MspInit+0xf0>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2100      	movs	r1, #0
 8000d46:	201c      	movs	r0, #28
 8000d48:	f001 f919 	bl	8001f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d4c:	201c      	movs	r0, #28
 8000d4e:	f001 f932 	bl	8001fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8000d52:	e052      	b.n	8000dfa <HAL_TIM_PWM_MspInit+0xe6>
  else if(htim_pwm->Instance==TIM3)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a2b      	ldr	r2, [pc, #172]	; (8000e08 <HAL_TIM_PWM_MspInit+0xf4>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d116      	bne.n	8000d8c <HAL_TIM_PWM_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <HAL_TIM_PWM_MspInit+0xf0>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	4a27      	ldr	r2, [pc, #156]	; (8000e04 <HAL_TIM_PWM_MspInit+0xf0>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6e:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <HAL_TIM_PWM_MspInit+0xf0>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	201d      	movs	r0, #29
 8000d80:	f001 f8fd 	bl	8001f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d84:	201d      	movs	r0, #29
 8000d86:	f001 f916 	bl	8001fb6 <HAL_NVIC_EnableIRQ>
}
 8000d8a:	e036      	b.n	8000dfa <HAL_TIM_PWM_MspInit+0xe6>
  else if(htim_pwm->Instance==TIM4)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a1e      	ldr	r2, [pc, #120]	; (8000e0c <HAL_TIM_PWM_MspInit+0xf8>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d116      	bne.n	8000dc4 <HAL_TIM_PWM_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <HAL_TIM_PWM_MspInit+0xf0>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <HAL_TIM_PWM_MspInit+0xf0>)
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	6413      	str	r3, [r2, #64]	; 0x40
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <HAL_TIM_PWM_MspInit+0xf0>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	f003 0304 	and.w	r3, r3, #4
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	201e      	movs	r0, #30
 8000db8:	f001 f8e1 	bl	8001f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000dbc:	201e      	movs	r0, #30
 8000dbe:	f001 f8fa 	bl	8001fb6 <HAL_NVIC_EnableIRQ>
}
 8000dc2:	e01a      	b.n	8000dfa <HAL_TIM_PWM_MspInit+0xe6>
  else if(htim_pwm->Instance==TIM12)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a11      	ldr	r2, [pc, #68]	; (8000e10 <HAL_TIM_PWM_MspInit+0xfc>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d115      	bne.n	8000dfa <HAL_TIM_PWM_MspInit+0xe6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <HAL_TIM_PWM_MspInit+0xf0>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <HAL_TIM_PWM_MspInit+0xf0>)
 8000dd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <HAL_TIM_PWM_MspInit+0xf0>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2100      	movs	r1, #0
 8000dee:	202b      	movs	r0, #43	; 0x2b
 8000df0:	f001 f8c5 	bl	8001f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8000df4:	202b      	movs	r0, #43	; 0x2b
 8000df6:	f001 f8de 	bl	8001fb6 <HAL_NVIC_EnableIRQ>
}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40000400 	.word	0x40000400
 8000e0c:	40000800 	.word	0x40000800
 8000e10:	40001800 	.word	0x40001800

08000e14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08c      	sub	sp, #48	; 0x30
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e34:	d11f      	bne.n	8000e76 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
 8000e3a:	4b47      	ldr	r3, [pc, #284]	; (8000f58 <HAL_TIM_MspPostInit+0x144>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a46      	ldr	r2, [pc, #280]	; (8000f58 <HAL_TIM_MspPostInit+0x144>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b44      	ldr	r3, [pc, #272]	; (8000f58 <HAL_TIM_MspPostInit+0x144>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	61bb      	str	r3, [r7, #24]
 8000e50:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e64:	2301      	movs	r3, #1
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	483b      	ldr	r0, [pc, #236]	; (8000f5c <HAL_TIM_MspPostInit+0x148>)
 8000e70:	f002 f9e2 	bl	8003238 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8000e74:	e06c      	b.n	8000f50 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM3)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a39      	ldr	r2, [pc, #228]	; (8000f60 <HAL_TIM_MspPostInit+0x14c>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d11e      	bne.n	8000ebe <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	4b34      	ldr	r3, [pc, #208]	; (8000f58 <HAL_TIM_MspPostInit+0x144>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e88:	4a33      	ldr	r2, [pc, #204]	; (8000f58 <HAL_TIM_MspPostInit+0x144>)
 8000e8a:	f043 0302 	orr.w	r3, r3, #2
 8000e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e90:	4b31      	ldr	r3, [pc, #196]	; (8000f58 <HAL_TIM_MspPostInit+0x144>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e94:	f003 0302 	and.w	r3, r3, #2
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e9c:	2320      	movs	r3, #32
 8000e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000eac:	2302      	movs	r3, #2
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb0:	f107 031c 	add.w	r3, r7, #28
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4829      	ldr	r0, [pc, #164]	; (8000f5c <HAL_TIM_MspPostInit+0x148>)
 8000eb8:	f002 f9be 	bl	8003238 <HAL_GPIO_Init>
}
 8000ebc:	e048      	b.n	8000f50 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM4)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a28      	ldr	r2, [pc, #160]	; (8000f64 <HAL_TIM_MspPostInit+0x150>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d11f      	bne.n	8000f08 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <HAL_TIM_MspPostInit+0x144>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed0:	4a21      	ldr	r2, [pc, #132]	; (8000f58 <HAL_TIM_MspPostInit+0x144>)
 8000ed2:	f043 0308 	orr.w	r3, r3, #8
 8000ed6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed8:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <HAL_TIM_MspPostInit+0x144>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	f003 0308 	and.w	r3, r3, #8
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	4619      	mov	r1, r3
 8000f00:	4819      	ldr	r0, [pc, #100]	; (8000f68 <HAL_TIM_MspPostInit+0x154>)
 8000f02:	f002 f999 	bl	8003238 <HAL_GPIO_Init>
}
 8000f06:	e023      	b.n	8000f50 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM12)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <HAL_TIM_MspPostInit+0x158>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d11e      	bne.n	8000f50 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <HAL_TIM_MspPostInit+0x144>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a0f      	ldr	r2, [pc, #60]	; (8000f58 <HAL_TIM_MspPostInit+0x144>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <HAL_TIM_MspPostInit+0x144>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000f40:	2309      	movs	r3, #9
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4804      	ldr	r0, [pc, #16]	; (8000f5c <HAL_TIM_MspPostInit+0x148>)
 8000f4c:	f002 f974 	bl	8003238 <HAL_GPIO_Init>
}
 8000f50:	bf00      	nop
 8000f52:	3730      	adds	r7, #48	; 0x30
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020400 	.word	0x40020400
 8000f60:	40000400 	.word	0x40000400
 8000f64:	40000800 	.word	0x40000800
 8000f68:	40020c00 	.word	0x40020c00
 8000f6c:	40001800 	.word	0x40001800

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <BusFault_Handler+0x4>

08000f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <UsageFault_Handler+0x4>

08000f96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc4:	f000 febc 	bl	8001d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f002 faf7 	bl	80035c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000fde:	2002      	movs	r0, #2
 8000fe0:	f002 faf0 	bl	80035c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000fec:	2004      	movs	r0, #4
 8000fee:	f002 fae9 	bl	80035c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000ffa:	2008      	movs	r0, #8
 8000ffc:	f002 fae2 	bl	80035c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <TIM2_IRQHandler+0x10>)
 800100a:	f003 f857 	bl	80040bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200002f0 	.word	0x200002f0

08001018 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <TIM3_IRQHandler+0x10>)
 800101e:	f003 f84d 	bl	80040bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200002a4 	.word	0x200002a4

0800102c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <TIM4_IRQHandler+0x10>)
 8001032:	f003 f843 	bl	80040bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000224 	.word	0x20000224

08001040 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8001046:	f003 f839 	bl	80040bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000338 	.word	0x20000338

08001054 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
	return 1;
 8001058:	2301      	movs	r3, #1
}
 800105a:	4618      	mov	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <_kill>:

int _kill(int pid, int sig)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800106e:	4b05      	ldr	r3, [pc, #20]	; (8001084 <_kill+0x20>)
 8001070:	2216      	movs	r2, #22
 8001072:	601a      	str	r2, [r3, #0]
	return -1;
 8001074:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	20006a48 	.word	0x20006a48

08001088 <_exit>:

void _exit (int status)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ffe5 	bl	8001064 <_kill>
	while (1) {}		/* Make sure we hang here */
 800109a:	e7fe      	b.n	800109a <_exit+0x12>

0800109c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	e00a      	b.n	80010c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010ae:	f3af 8000 	nop.w
 80010b2:	4601      	mov	r1, r0
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	1c5a      	adds	r2, r3, #1
 80010b8:	60ba      	str	r2, [r7, #8]
 80010ba:	b2ca      	uxtb	r2, r1
 80010bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	3301      	adds	r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	dbf0      	blt.n	80010ae <_read+0x12>
	}

return len;
 80010cc:	687b      	ldr	r3, [r7, #4]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	60f8      	str	r0, [r7, #12]
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	e009      	b.n	80010fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	60ba      	str	r2, [r7, #8]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	3301      	adds	r3, #1
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	429a      	cmp	r2, r3
 8001102:	dbf1      	blt.n	80010e8 <_write+0x12>
	}
	return len;
 8001104:	687b      	ldr	r3, [r7, #4]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <_close>:

int _close(int file)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
	return -1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001136:	605a      	str	r2, [r3, #4]
	return 0;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <_isatty>:

int _isatty(int file)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
	return 1;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
	return 0;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001178:	b480      	push	{r7}
 800117a:	b087      	sub	sp, #28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001180:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <_sbrk+0x5c>)
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <_sbrk+0x60>)
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d102      	bne.n	800119a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <_sbrk+0x64>)
 8001196:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <_sbrk+0x68>)
 8001198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <_sbrk+0x64>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d205      	bcs.n	80011b4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <_sbrk+0x6c>)
 80011aa:	220c      	movs	r2, #12
 80011ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	e009      	b.n	80011c8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <_sbrk+0x64>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	4a06      	ldr	r2, [pc, #24]	; (80011dc <_sbrk+0x64>)
 80011c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c6:	68fb      	ldr	r3, [r7, #12]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	371c      	adds	r7, #28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	20030000 	.word	0x20030000
 80011d8:	00000400 	.word	0x00000400
 80011dc:	200000a0 	.word	0x200000a0
 80011e0:	20006a58 	.word	0x20006a58
 80011e4:	20006a48 	.word	0x20006a48

080011e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <SystemInit+0x28>)
 80011ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f2:	4a07      	ldr	r2, [pc, #28]	; (8001210 <SystemInit+0x28>)
 80011f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <SystemInit+0x28>)
 80011fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001202:	609a      	str	r2, [r3, #8]
#endif
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <tcp_echoserver_init>:
// -----------------------------------------------------------------------------
// -- <4> TCP 서버를 초기화함
//	Server의 IP를 binding하고 listening을 시작
// -----------------------------------------------------------------------------
void tcp_echoserver_init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
  // -- <4-1> create new tcp pcb 
  tcp_echoserver_pcb = tcp_new();
 800121a:	f007 fabf 	bl	800879c <tcp_new>
 800121e:	4603      	mov	r3, r0
 8001220:	4a16      	ldr	r2, [pc, #88]	; (800127c <tcp_echoserver_init+0x68>)
 8001222:	6013      	str	r3, [r2, #0]

  if (tcp_echoserver_pcb != NULL)  {
 8001224:	4b15      	ldr	r3, [pc, #84]	; (800127c <tcp_echoserver_init+0x68>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d023      	beq.n	8001274 <tcp_echoserver_init+0x60>
		err_t  err;

		// -- <4-2> 위에서 만든 tcp_echoserver_pcb에  접속될 client의 IP (IP_ADDR_ANY)와
		//             Port (PORT)를 bind 함
		err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, PORT);
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <tcp_echoserver_init+0x68>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001234:	4912      	ldr	r1, [pc, #72]	; (8001280 <tcp_echoserver_init+0x6c>)
 8001236:	4618      	mov	r0, r3
 8001238:	f006 fa0c 	bl	8007654 <tcp_bind>
 800123c:	4603      	mov	r3, r0
 800123e:	71fb      	strb	r3, [r7, #7]
		
		if (err == ERR_OK) {
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d10f      	bne.n	8001268 <tcp_echoserver_init+0x54>
			// -- <4-3> listening(client에서 접속 요청 수신을 대기)을 시작
			  tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);      
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <tcp_echoserver_init+0x68>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	21ff      	movs	r1, #255	; 0xff
 800124e:	4618      	mov	r0, r3
 8001250:	f006 fab8 	bl	80077c4 <tcp_listen_with_backlog>
 8001254:	4603      	mov	r3, r0
 8001256:	4a09      	ldr	r2, [pc, #36]	; (800127c <tcp_echoserver_init+0x68>)
 8001258:	6013      	str	r3, [r2, #0]
			  // -- <4-4> 새로운 tcp connection이 accept될때 호출될 콜백 함수를 지정
			  tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <tcp_echoserver_init+0x68>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4909      	ldr	r1, [pc, #36]	; (8001284 <tcp_echoserver_init+0x70>)
 8001260:	4618      	mov	r0, r3
 8001262:	f007 fb1b 	bl	800889c <tcp_accept>
		else {
			  /* deallocate the pcb */
			  memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
		}
  }
}
 8001266:	e005      	b.n	8001274 <tcp_echoserver_init+0x60>
			  memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <tcp_echoserver_init+0x68>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4619      	mov	r1, r3
 800126e:	2001      	movs	r0, #1
 8001270:	f004 fda8 	bl	8005dc4 <memp_free>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200000a4 	.word	0x200000a4
 8001280:	08013cc4 	.word	0x08013cc4
 8001284:	08001289 	.word	0x08001289

08001288 <tcp_echoserver_accept>:
   retval    err_t		: error status
  */
// -------------------------------------------------------------------------------

static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	4613      	mov	r3, r2
 8001294:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8001296:	2101      	movs	r1, #1
 8001298:	68b8      	ldr	r0, [r7, #8]
 800129a:	f007 f88d 	bl	80083b8 <tcp_setprio>

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 800129e:	200c      	movs	r0, #12
 80012a0:	f004 fbd6 	bl	8005a50 <mem_malloc>
 80012a4:	6138      	str	r0, [r7, #16]
	
  if (es != NULL)  {
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d024      	beq.n	80012f6 <tcp_echoserver_accept+0x6e>
		es->state = ES_ACCEPTED;
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
		es->pcb = newpcb;
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	605a      	str	r2, [r3, #4]
		es->p = NULL;
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
		
		/* pass newly allocated es structure as argument to newpcb */
		tcp_arg(newpcb, es);		
 80012be:	6939      	ldr	r1, [r7, #16]
 80012c0:	68b8      	ldr	r0, [r7, #8]
 80012c2:	f007 fa73 	bl	80087ac <tcp_arg>
		
		tcp_sent(newpcb, tcp_echoserver_sent);
 80012c6:	4912      	ldr	r1, [pc, #72]	; (8001310 <tcp_echoserver_accept+0x88>)
 80012c8:	68b8      	ldr	r0, [r7, #8]
 80012ca:	f007 faa3 	bl	8008814 <tcp_sent>
		
		// -- <5-2> ������ �۽��� �Ϸ�Ǹ� ȣ��� �ݹ��Լ��� ���� 
		tcp_recv(newpcb, tcp_echoserver_recv);			
 80012ce:	4911      	ldr	r1, [pc, #68]	; (8001314 <tcp_echoserver_accept+0x8c>)
 80012d0:	68b8      	ldr	r0, [r7, #8]
 80012d2:	f007 fa7d 	bl	80087d0 <tcp_recv>
		
		/* initialize lwip tcp_err callback function for newpcb  */
		tcp_err(newpcb, tcp_echoserver_error);		
 80012d6:	4910      	ldr	r1, [pc, #64]	; (8001318 <tcp_echoserver_accept+0x90>)
 80012d8:	68b8      	ldr	r0, [r7, #8]
 80012da:	f007 fabd 	bl	8008858 <tcp_err>
		
		// -- <5-3> polling시 호출될 콜백함수를 지정
		//       - 이 콜백함수는 주기적으로 호출되어야 한다.
		//      - 이 콜백함수에서는 송신할 데이터 중에서 아직 미송신된 것이 있는지와
		//	close되어야 할 connection이 있는지를 체크한다.
		tcp_poll(newpcb, tcp_echoserver_poll, 1);
 80012de:	2201      	movs	r2, #1
 80012e0:	490e      	ldr	r1, [pc, #56]	; (800131c <tcp_echoserver_accept+0x94>)
 80012e2:	68b8      	ldr	r0, [r7, #8]
 80012e4:	f007 faf2 	bl	80088cc <tcp_poll>
		
		/* send data */
		tcp_echoserver_send(newpcb,es);
 80012e8:	6939      	ldr	r1, [r7, #16]
 80012ea:	68b8      	ldr	r0, [r7, #8]
 80012ec:	f000 fa62 	bl	80017b4 <tcp_echoserver_send>
					
		ret_err = ERR_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	75fb      	strb	r3, [r7, #23]
 80012f4:	e005      	b.n	8001302 <tcp_echoserver_accept+0x7a>
  }
  
  else  {
		/*  close tcp connection */
		tcp_echoserver_connection_close(newpcb, es);
 80012f6:	6939      	ldr	r1, [r7, #16]
 80012f8:	68b8      	ldr	r0, [r7, #8]
 80012fa:	f000 faf1 	bl	80018e0 <tcp_echoserver_connection_close>
		/* return memory error */
		ret_err = ERR_MEM;
 80012fe:	23ff      	movs	r3, #255	; 0xff
 8001300:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err; 
 8001302:	f997 3017 	ldrsb.w	r3, [r7, #23]
  
}
 8001306:	4618      	mov	r0, r3
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	08001851 	.word	0x08001851
 8001314:	08001321 	.word	0x08001321
 8001318:	0800192f 	.word	0x0800192f
 800131c:	0800188f 	.word	0x0800188f

08001320 <tcp_echoserver_recv>:
  * retval err_		t: error code
  */
// -------------------------------------------------------------------------------

static err_t   tcp_echoserver_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;	
  err_t 	ret_err;
  char 	*cp;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d105      	bne.n	8001340 <tcp_echoserver_recv+0x20>
 8001334:	4ba5      	ldr	r3, [pc, #660]	; (80015cc <tcp_echoserver_recv+0x2ac>)
 8001336:	22b6      	movs	r2, #182	; 0xb6
 8001338:	49a5      	ldr	r1, [pc, #660]	; (80015d0 <tcp_echoserver_recv+0x2b0>)
 800133a:	48a6      	ldr	r0, [pc, #664]	; (80015d4 <tcp_echoserver_recv+0x2b4>)
 800133c:	f00e fcfa 	bl	800fd34 <iprintf>
  
  es = (struct tcp_echoserver_struct *)arg;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	61bb      	str	r3, [r7, #24]
  
  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)  {
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d116      	bne.n	8001378 <tcp_echoserver_recv+0x58>
		/* remote host closed connection */
		es->state = ES_CLOSING;
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	2203      	movs	r2, #3
 800134e:	701a      	strb	r2, [r3, #0]
		if(es->p == NULL) {
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d104      	bne.n	8001362 <tcp_echoserver_recv+0x42>
			   /* we're done sending, close connection */
			   tcp_echoserver_connection_close(tpcb, es);
 8001358:	69b9      	ldr	r1, [r7, #24]
 800135a:	68b8      	ldr	r0, [r7, #8]
 800135c:	f000 fac0 	bl	80018e0 <tcp_echoserver_connection_close>
 8001360:	e007      	b.n	8001372 <tcp_echoserver_recv+0x52>
		}
		else {
			  /* we're not done yet */
			  /* acknowledge received packet */
			  tcp_sent(tpcb, tcp_echoserver_sent);
 8001362:	499d      	ldr	r1, [pc, #628]	; (80015d8 <tcp_echoserver_recv+0x2b8>)
 8001364:	68b8      	ldr	r0, [r7, #8]
 8001366:	f007 fa55 	bl	8008814 <tcp_sent>
			  
			  /* send remaining data*/
			  tcp_echoserver_send(tpcb, es);
 800136a:	69b9      	ldr	r1, [r7, #24]
 800136c:	68b8      	ldr	r0, [r7, #8]
 800136e:	f000 fa21 	bl	80017b4 <tcp_echoserver_send>
		}
		ret_err = ERR_OK;
 8001372:	2300      	movs	r3, #0
 8001374:	77fb      	strb	r3, [r7, #31]
 8001376:	e201      	b.n	800177c <tcp_echoserver_recv+0x45c>
  }
  
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)  {
 8001378:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00b      	beq.n	8001398 <tcp_echoserver_recv+0x78>
		/* free received pbuf*/
		if (p != NULL)	{
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d005      	beq.n	8001392 <tcp_echoserver_recv+0x72>
			  es->p = NULL;
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
			  pbuf_free(p);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f005 fb2b 	bl	80069e8 <pbuf_free>
		}
		ret_err = err;
 8001392:	78fb      	ldrb	r3, [r7, #3]
 8001394:	77fb      	strb	r3, [r7, #31]
 8001396:	e1f1      	b.n	800177c <tcp_echoserver_recv+0x45c>
  }
 
	// -- <6-1> 통신이 accept되고 데이터가 최초로 수신(es->state == ES_ACCEPTED)되는 경우
  else if(es->state == ES_ACCEPTED)  {	
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b01      	cmp	r3, #1
 800139e:	f040 80d8 	bne.w	8001552 <tcp_echoserver_recv+0x232>
	  
		// -- my code 추가 : ST의 orignal  소스코드에는 없는 부분임 ----

	  	  	// -- <6-1-1> 수신된 데이터(p->payload)를 cp에 대입
			cp  = p->payload;		
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	613b      	str	r3, [r7, #16]
	  
			//  -- <6-1-2> : <L11> 형식의 데이터가 수신될 경우
			/////////////////////////////////////////////////////////////////////edit area//////////////////////////////////////
			if(strcmp(cp,"p1") == 0) {
 80013a8:	498c      	ldr	r1, [pc, #560]	; (80015dc <tcp_echoserver_recv+0x2bc>)
 80013aa:	6938      	ldr	r0, [r7, #16]
 80013ac:	f7fe ff20 	bl	80001f0 <strcmp>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d108      	bne.n	80013c8 <tcp_echoserver_recv+0xa8>
			    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 50);
 80013b6:	4b8a      	ldr	r3, [pc, #552]	; (80015e0 <tcp_echoserver_recv+0x2c0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2232      	movs	r2, #50	; 0x32
 80013bc:	63da      	str	r2, [r3, #60]	; 0x3c
				message_send(tpcb, 20);
 80013be:	2114      	movs	r1, #20
 80013c0:	68b8      	ldr	r0, [r7, #8]
 80013c2:	f000 fac7 	bl	8001954 <message_send>
 80013c6:	e0b7      	b.n	8001538 <tcp_echoserver_recv+0x218>
			}
			else if(strcmp(cp,"p2") == 0) {
 80013c8:	4986      	ldr	r1, [pc, #536]	; (80015e4 <tcp_echoserver_recv+0x2c4>)
 80013ca:	6938      	ldr	r0, [r7, #16]
 80013cc:	f7fe ff10 	bl	80001f0 <strcmp>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d108      	bne.n	80013e8 <tcp_echoserver_recv+0xc8>
			    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 65);
 80013d6:	4b82      	ldr	r3, [pc, #520]	; (80015e0 <tcp_echoserver_recv+0x2c0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2241      	movs	r2, #65	; 0x41
 80013dc:	63da      	str	r2, [r3, #60]	; 0x3c
				message_send(tpcb, 21);
 80013de:	2115      	movs	r1, #21
 80013e0:	68b8      	ldr	r0, [r7, #8]
 80013e2:	f000 fab7 	bl	8001954 <message_send>
 80013e6:	e0a7      	b.n	8001538 <tcp_echoserver_recv+0x218>
			}
			else if(strcmp(cp,"p3") == 0) {
 80013e8:	497f      	ldr	r1, [pc, #508]	; (80015e8 <tcp_echoserver_recv+0x2c8>)
 80013ea:	6938      	ldr	r0, [r7, #16]
 80013ec:	f7fe ff00 	bl	80001f0 <strcmp>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d108      	bne.n	8001408 <tcp_echoserver_recv+0xe8>
			    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 80);
 80013f6:	4b7a      	ldr	r3, [pc, #488]	; (80015e0 <tcp_echoserver_recv+0x2c0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2250      	movs	r2, #80	; 0x50
 80013fc:	63da      	str	r2, [r3, #60]	; 0x3c
				message_send(tpcb, 22);
 80013fe:	2116      	movs	r1, #22
 8001400:	68b8      	ldr	r0, [r7, #8]
 8001402:	f000 faa7 	bl	8001954 <message_send>
 8001406:	e097      	b.n	8001538 <tcp_echoserver_recv+0x218>
			}
			else if(strcmp(cp,"p4") == 0) {
 8001408:	4978      	ldr	r1, [pc, #480]	; (80015ec <tcp_echoserver_recv+0x2cc>)
 800140a:	6938      	ldr	r0, [r7, #16]
 800140c:	f7fe fef0 	bl	80001f0 <strcmp>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d108      	bne.n	8001428 <tcp_echoserver_recv+0x108>
			    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 90);
 8001416:	4b72      	ldr	r3, [pc, #456]	; (80015e0 <tcp_echoserver_recv+0x2c0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	225a      	movs	r2, #90	; 0x5a
 800141c:	63da      	str	r2, [r3, #60]	; 0x3c
				message_send(tpcb, 23);
 800141e:	2117      	movs	r1, #23
 8001420:	68b8      	ldr	r0, [r7, #8]
 8001422:	f000 fa97 	bl	8001954 <message_send>
 8001426:	e087      	b.n	8001538 <tcp_echoserver_recv+0x218>
			}
			else if(strcmp(cp,"p5") == 0) {
 8001428:	4971      	ldr	r1, [pc, #452]	; (80015f0 <tcp_echoserver_recv+0x2d0>)
 800142a:	6938      	ldr	r0, [r7, #16]
 800142c:	f7fe fee0 	bl	80001f0 <strcmp>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d108      	bne.n	8001448 <tcp_echoserver_recv+0x128>
			    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 105);
 8001436:	4b6a      	ldr	r3, [pc, #424]	; (80015e0 <tcp_echoserver_recv+0x2c0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2269      	movs	r2, #105	; 0x69
 800143c:	63da      	str	r2, [r3, #60]	; 0x3c
				message_send(tpcb, 24);
 800143e:	2118      	movs	r1, #24
 8001440:	68b8      	ldr	r0, [r7, #8]
 8001442:	f000 fa87 	bl	8001954 <message_send>
 8001446:	e077      	b.n	8001538 <tcp_echoserver_recv+0x218>
			}			
			else if(strcmp(cp,"rl") == 0) {
 8001448:	496a      	ldr	r1, [pc, #424]	; (80015f4 <tcp_echoserver_recv+0x2d4>)
 800144a:	6938      	ldr	r0, [r7, #16]
 800144c:	f7fe fed0 	bl	80001f0 <strcmp>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d118      	bne.n	8001488 <tcp_echoserver_recv+0x168>
			  revolution+=3;
 8001456:	4b68      	ldr	r3, [pc, #416]	; (80015f8 <tcp_echoserver_recv+0x2d8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	3303      	adds	r3, #3
 800145c:	4a66      	ldr	r2, [pc, #408]	; (80015f8 <tcp_echoserver_recv+0x2d8>)
 800145e:	6013      	str	r3, [r2, #0]
			  if(revolution<120){
 8001460:	4b65      	ldr	r3, [pc, #404]	; (80015f8 <tcp_echoserver_recv+0x2d8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b77      	cmp	r3, #119	; 0x77
 8001466:	dc05      	bgt.n	8001474 <tcp_echoserver_recv+0x154>
				  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, revolution);
 8001468:	4b63      	ldr	r3, [pc, #396]	; (80015f8 <tcp_echoserver_recv+0x2d8>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b63      	ldr	r3, [pc, #396]	; (80015fc <tcp_echoserver_recv+0x2dc>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	639a      	str	r2, [r3, #56]	; 0x38
 8001472:	e004      	b.n	800147e <tcp_echoserver_recv+0x15e>
			  }
			  else{
				  revolution-=3;
 8001474:	4b60      	ldr	r3, [pc, #384]	; (80015f8 <tcp_echoserver_recv+0x2d8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	3b03      	subs	r3, #3
 800147a:	4a5f      	ldr	r2, [pc, #380]	; (80015f8 <tcp_echoserver_recv+0x2d8>)
 800147c:	6013      	str	r3, [r2, #0]
			  }
				message_send(tpcb, 12);
 800147e:	210c      	movs	r1, #12
 8001480:	68b8      	ldr	r0, [r7, #8]
 8001482:	f000 fa67 	bl	8001954 <message_send>
 8001486:	e057      	b.n	8001538 <tcp_echoserver_recv+0x218>
			}
			else if(strcmp(cp,"rr") == 0) {
 8001488:	495d      	ldr	r1, [pc, #372]	; (8001600 <tcp_echoserver_recv+0x2e0>)
 800148a:	6938      	ldr	r0, [r7, #16]
 800148c:	f7fe feb0 	bl	80001f0 <strcmp>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d118      	bne.n	80014c8 <tcp_echoserver_recv+0x1a8>
			  revolution-=3;
 8001496:	4b58      	ldr	r3, [pc, #352]	; (80015f8 <tcp_echoserver_recv+0x2d8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	3b03      	subs	r3, #3
 800149c:	4a56      	ldr	r2, [pc, #344]	; (80015f8 <tcp_echoserver_recv+0x2d8>)
 800149e:	6013      	str	r3, [r2, #0]
			  if(revolution>40){
 80014a0:	4b55      	ldr	r3, [pc, #340]	; (80015f8 <tcp_echoserver_recv+0x2d8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b28      	cmp	r3, #40	; 0x28
 80014a6:	dd05      	ble.n	80014b4 <tcp_echoserver_recv+0x194>
				  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, revolution);
 80014a8:	4b53      	ldr	r3, [pc, #332]	; (80015f8 <tcp_echoserver_recv+0x2d8>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b53      	ldr	r3, [pc, #332]	; (80015fc <tcp_echoserver_recv+0x2dc>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	639a      	str	r2, [r3, #56]	; 0x38
 80014b2:	e004      	b.n	80014be <tcp_echoserver_recv+0x19e>
			  }
			  else{
				  revolution+=3;
 80014b4:	4b50      	ldr	r3, [pc, #320]	; (80015f8 <tcp_echoserver_recv+0x2d8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	3303      	adds	r3, #3
 80014ba:	4a4f      	ldr	r2, [pc, #316]	; (80015f8 <tcp_echoserver_recv+0x2d8>)
 80014bc:	6013      	str	r3, [r2, #0]
			  }
				message_send(tpcb, 13);
 80014be:	210d      	movs	r1, #13
 80014c0:	68b8      	ldr	r0, [r7, #8]
 80014c2:	f000 fa47 	bl	8001954 <message_send>
 80014c6:	e037      	b.n	8001538 <tcp_echoserver_recv+0x218>
			}
			else if(strcmp(cp,"shoot") == 0) {
 80014c8:	494e      	ldr	r1, [pc, #312]	; (8001604 <tcp_echoserver_recv+0x2e4>)
 80014ca:	6938      	ldr	r0, [r7, #16]
 80014cc:	f7fe fe90 	bl	80001f0 <strcmp>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d114      	bne.n	8001500 <tcp_echoserver_recv+0x1e0>
			  __HAL_TIM_SetCompare(&htim12, TIM_CHANNEL_1, 40);
 80014d6:	4b4c      	ldr	r3, [pc, #304]	; (8001608 <tcp_echoserver_recv+0x2e8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2228      	movs	r2, #40	; 0x28
 80014dc:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(1000);
 80014de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014e2:	f000 fc4d 	bl	8001d80 <HAL_Delay>
			  __HAL_TIM_SetCompare(&htim12, TIM_CHANNEL_1, 80);
 80014e6:	4b48      	ldr	r3, [pc, #288]	; (8001608 <tcp_echoserver_recv+0x2e8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2250      	movs	r2, #80	; 0x50
 80014ec:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(1000);
 80014ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014f2:	f000 fc45 	bl	8001d80 <HAL_Delay>
				message_send(tpcb, 14);
 80014f6:	210e      	movs	r1, #14
 80014f8:	68b8      	ldr	r0, [r7, #8]
 80014fa:	f000 fa2b 	bl	8001954 <message_send>
 80014fe:	e01b      	b.n	8001538 <tcp_echoserver_recv+0x218>
			}
			else if(strcmp(cp,"C_on") == 0) {
 8001500:	4942      	ldr	r1, [pc, #264]	; (800160c <tcp_echoserver_recv+0x2ec>)
 8001502:	6938      	ldr	r0, [r7, #16]
 8001504:	f7fe fe74 	bl	80001f0 <strcmp>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d104      	bne.n	8001518 <tcp_echoserver_recv+0x1f8>
				//카메라 켜는 신호 보내기
							message_send(tpcb, 15);
 800150e:	210f      	movs	r1, #15
 8001510:	68b8      	ldr	r0, [r7, #8]
 8001512:	f000 fa1f 	bl	8001954 <message_send>
 8001516:	e00f      	b.n	8001538 <tcp_echoserver_recv+0x218>
			}
			else if(strcmp(cp,"C_off") == 0) {
 8001518:	493d      	ldr	r1, [pc, #244]	; (8001610 <tcp_echoserver_recv+0x2f0>)
 800151a:	6938      	ldr	r0, [r7, #16]
 800151c:	f7fe fe68 	bl	80001f0 <strcmp>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d104      	bne.n	8001530 <tcp_echoserver_recv+0x210>
				//카메라 끄는 신호 보내기
							message_send(tpcb, 16);
 8001526:	2110      	movs	r1, #16
 8001528:	68b8      	ldr	r0, [r7, #8]
 800152a:	f000 fa13 	bl	8001954 <message_send>
 800152e:	e003      	b.n	8001538 <tcp_echoserver_recv+0x218>
			}
			// -- <6-1-3> : <L11> 형식이 아닌 데이터가 수신될 경우
			//	- 99번 메시지를 송신함
			else {
				message_send(tpcb, 99);
 8001530:	2163      	movs	r1, #99	; 0x63
 8001532:	68b8      	ldr	r0, [r7, #8]
 8001534:	f000 fa0e 	bl	8001954 <message_send>
			//   -- 끝 :  my code 추가 --
			
			
			// -- <6-1-4> ES_ACCEPTED 상태에서 필요한 처리를 함
			/* first data chunk in p->payload */
			es->state = ES_RECEIVED;		
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	2202      	movs	r2, #2
 800153c:	701a      	strb	r2, [r3, #0]
			/* store reference to incoming pbuf (chain) */
			es->p = p;
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	609a      	str	r2, [r3, #8]
				
			/* initialize LwIP tcp_sent callback function */
			tcp_sent(tpcb, tcp_echoserver_sent);		
 8001544:	4924      	ldr	r1, [pc, #144]	; (80015d8 <tcp_echoserver_recv+0x2b8>)
 8001546:	68b8      	ldr	r0, [r7, #8]
 8001548:	f007 f964 	bl	8008814 <tcp_sent>
			/* send back the received data (echo) */
			//tcp_echoserver_send(tpcb, es);		
			ret_err = ERR_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	77fb      	strb	r3, [r7, #31]
 8001550:	e114      	b.n	800177c <tcp_echoserver_recv+0x45c>

  }   //  End of <6-1>

  
  // -- <6-2> 데이터가 수신(es->state == ES_RECEIVED)되는 경우
  else if (es->state == ES_RECEIVED)  {
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b02      	cmp	r3, #2
 8001558:	f040 8102 	bne.w	8001760 <tcp_echoserver_recv+0x440>
		/* more data received from client and previous data has been already sent*/
		if(es->p == NULL)	{	
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b00      	cmp	r3, #0
 8001562:	f040 80f3 	bne.w	800174c <tcp_echoserver_recv+0x42c>
			
			// -- my code 추가 : ST의 orignal  소스코드에는 없는 부분임 -----

			// -- <6-2-1> 수신된 데이터(p->payload)를 cp에 대입
			cp  = p->payload; 	
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	613b      	str	r3, [r7, #16]
			
			//  -- <6-2-2> : <L11> 형식의 데이터가 수신될 경우
			/////////////////////////////////////////////////////////////////////edit area//////////////////////////////////////
			if(strcmp(cp,"p1") == 0) {
 800156c:	491b      	ldr	r1, [pc, #108]	; (80015dc <tcp_echoserver_recv+0x2bc>)
 800156e:	6938      	ldr	r0, [r7, #16]
 8001570:	f7fe fe3e 	bl	80001f0 <strcmp>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d108      	bne.n	800158c <tcp_echoserver_recv+0x26c>
			    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 50);
 800157a:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <tcp_echoserver_recv+0x2c0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2232      	movs	r2, #50	; 0x32
 8001580:	63da      	str	r2, [r3, #60]	; 0x3c
				message_send(tpcb, 20);
 8001582:	2114      	movs	r1, #20
 8001584:	68b8      	ldr	r0, [r7, #8]
 8001586:	f000 f9e5 	bl	8001954 <message_send>
 800158a:	e0e6      	b.n	800175a <tcp_echoserver_recv+0x43a>
			}
			else if(strcmp(cp,"p2") == 0) {
 800158c:	4915      	ldr	r1, [pc, #84]	; (80015e4 <tcp_echoserver_recv+0x2c4>)
 800158e:	6938      	ldr	r0, [r7, #16]
 8001590:	f7fe fe2e 	bl	80001f0 <strcmp>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d108      	bne.n	80015ac <tcp_echoserver_recv+0x28c>
			    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 65);
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <tcp_echoserver_recv+0x2c0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2241      	movs	r2, #65	; 0x41
 80015a0:	63da      	str	r2, [r3, #60]	; 0x3c
				message_send(tpcb, 21);
 80015a2:	2115      	movs	r1, #21
 80015a4:	68b8      	ldr	r0, [r7, #8]
 80015a6:	f000 f9d5 	bl	8001954 <message_send>
 80015aa:	e0d6      	b.n	800175a <tcp_echoserver_recv+0x43a>
			}
			else if(strcmp(cp,"p3") == 0) {
 80015ac:	490e      	ldr	r1, [pc, #56]	; (80015e8 <tcp_echoserver_recv+0x2c8>)
 80015ae:	6938      	ldr	r0, [r7, #16]
 80015b0:	f7fe fe1e 	bl	80001f0 <strcmp>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d12c      	bne.n	8001614 <tcp_echoserver_recv+0x2f4>
			    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 80);
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <tcp_echoserver_recv+0x2c0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2250      	movs	r2, #80	; 0x50
 80015c0:	63da      	str	r2, [r3, #60]	; 0x3c
				message_send(tpcb, 22);
 80015c2:	2116      	movs	r1, #22
 80015c4:	68b8      	ldr	r0, [r7, #8]
 80015c6:	f000 f9c5 	bl	8001954 <message_send>
 80015ca:	e0c6      	b.n	800175a <tcp_echoserver_recv+0x43a>
 80015cc:	080110d4 	.word	0x080110d4
 80015d0:	080110f4 	.word	0x080110f4
 80015d4:	08011100 	.word	0x08011100
 80015d8:	08001851 	.word	0x08001851
 80015dc:	08011128 	.word	0x08011128
 80015e0:	200002f0 	.word	0x200002f0
 80015e4:	0801112c 	.word	0x0801112c
 80015e8:	08011130 	.word	0x08011130
 80015ec:	08011134 	.word	0x08011134
 80015f0:	08011138 	.word	0x08011138
 80015f4:	0801113c 	.word	0x0801113c
 80015f8:	2000000c 	.word	0x2000000c
 80015fc:	200002a4 	.word	0x200002a4
 8001600:	08011140 	.word	0x08011140
 8001604:	08011144 	.word	0x08011144
 8001608:	20000338 	.word	0x20000338
 800160c:	0801114c 	.word	0x0801114c
 8001610:	08011154 	.word	0x08011154
			}
			else if(strcmp(cp,"p4") == 0) {
 8001614:	495c      	ldr	r1, [pc, #368]	; (8001788 <tcp_echoserver_recv+0x468>)
 8001616:	6938      	ldr	r0, [r7, #16]
 8001618:	f7fe fdea 	bl	80001f0 <strcmp>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d108      	bne.n	8001634 <tcp_echoserver_recv+0x314>
			    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 90);
 8001622:	4b5a      	ldr	r3, [pc, #360]	; (800178c <tcp_echoserver_recv+0x46c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	225a      	movs	r2, #90	; 0x5a
 8001628:	63da      	str	r2, [r3, #60]	; 0x3c
				message_send(tpcb, 23);
 800162a:	2117      	movs	r1, #23
 800162c:	68b8      	ldr	r0, [r7, #8]
 800162e:	f000 f991 	bl	8001954 <message_send>
 8001632:	e092      	b.n	800175a <tcp_echoserver_recv+0x43a>
			}
			else if(strcmp(cp,"p5") == 0) {
 8001634:	4956      	ldr	r1, [pc, #344]	; (8001790 <tcp_echoserver_recv+0x470>)
 8001636:	6938      	ldr	r0, [r7, #16]
 8001638:	f7fe fdda 	bl	80001f0 <strcmp>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d108      	bne.n	8001654 <tcp_echoserver_recv+0x334>
			    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 105);
 8001642:	4b52      	ldr	r3, [pc, #328]	; (800178c <tcp_echoserver_recv+0x46c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2269      	movs	r2, #105	; 0x69
 8001648:	63da      	str	r2, [r3, #60]	; 0x3c
				message_send(tpcb, 24);
 800164a:	2118      	movs	r1, #24
 800164c:	68b8      	ldr	r0, [r7, #8]
 800164e:	f000 f981 	bl	8001954 <message_send>
 8001652:	e082      	b.n	800175a <tcp_echoserver_recv+0x43a>
			}			
			else if(strcmp(cp,"rl") == 0) {
 8001654:	494f      	ldr	r1, [pc, #316]	; (8001794 <tcp_echoserver_recv+0x474>)
 8001656:	6938      	ldr	r0, [r7, #16]
 8001658:	f7fe fdca 	bl	80001f0 <strcmp>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d118      	bne.n	8001694 <tcp_echoserver_recv+0x374>
			  revolution+=3;
 8001662:	4b4d      	ldr	r3, [pc, #308]	; (8001798 <tcp_echoserver_recv+0x478>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	3303      	adds	r3, #3
 8001668:	4a4b      	ldr	r2, [pc, #300]	; (8001798 <tcp_echoserver_recv+0x478>)
 800166a:	6013      	str	r3, [r2, #0]
			  if(revolution<120){
 800166c:	4b4a      	ldr	r3, [pc, #296]	; (8001798 <tcp_echoserver_recv+0x478>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b77      	cmp	r3, #119	; 0x77
 8001672:	dc05      	bgt.n	8001680 <tcp_echoserver_recv+0x360>
				  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, revolution);
 8001674:	4b48      	ldr	r3, [pc, #288]	; (8001798 <tcp_echoserver_recv+0x478>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b48      	ldr	r3, [pc, #288]	; (800179c <tcp_echoserver_recv+0x47c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	639a      	str	r2, [r3, #56]	; 0x38
 800167e:	e004      	b.n	800168a <tcp_echoserver_recv+0x36a>
			  }
			  else{
				  revolution-=3;
 8001680:	4b45      	ldr	r3, [pc, #276]	; (8001798 <tcp_echoserver_recv+0x478>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	3b03      	subs	r3, #3
 8001686:	4a44      	ldr	r2, [pc, #272]	; (8001798 <tcp_echoserver_recv+0x478>)
 8001688:	6013      	str	r3, [r2, #0]
			  }
				message_send(tpcb, 12);
 800168a:	210c      	movs	r1, #12
 800168c:	68b8      	ldr	r0, [r7, #8]
 800168e:	f000 f961 	bl	8001954 <message_send>
 8001692:	e062      	b.n	800175a <tcp_echoserver_recv+0x43a>
			}
			else if(strcmp(cp,"rr") == 0) {
 8001694:	4942      	ldr	r1, [pc, #264]	; (80017a0 <tcp_echoserver_recv+0x480>)
 8001696:	6938      	ldr	r0, [r7, #16]
 8001698:	f7fe fdaa 	bl	80001f0 <strcmp>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d118      	bne.n	80016d4 <tcp_echoserver_recv+0x3b4>
			  revolution-=3;
 80016a2:	4b3d      	ldr	r3, [pc, #244]	; (8001798 <tcp_echoserver_recv+0x478>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3b03      	subs	r3, #3
 80016a8:	4a3b      	ldr	r2, [pc, #236]	; (8001798 <tcp_echoserver_recv+0x478>)
 80016aa:	6013      	str	r3, [r2, #0]
			  if(revolution>40){
 80016ac:	4b3a      	ldr	r3, [pc, #232]	; (8001798 <tcp_echoserver_recv+0x478>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b28      	cmp	r3, #40	; 0x28
 80016b2:	dd05      	ble.n	80016c0 <tcp_echoserver_recv+0x3a0>
				  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, revolution);
 80016b4:	4b38      	ldr	r3, [pc, #224]	; (8001798 <tcp_echoserver_recv+0x478>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b38      	ldr	r3, [pc, #224]	; (800179c <tcp_echoserver_recv+0x47c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	639a      	str	r2, [r3, #56]	; 0x38
 80016be:	e004      	b.n	80016ca <tcp_echoserver_recv+0x3aa>
			  }
			  else{
				  revolution+=3;
 80016c0:	4b35      	ldr	r3, [pc, #212]	; (8001798 <tcp_echoserver_recv+0x478>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3303      	adds	r3, #3
 80016c6:	4a34      	ldr	r2, [pc, #208]	; (8001798 <tcp_echoserver_recv+0x478>)
 80016c8:	6013      	str	r3, [r2, #0]
			  }
				message_send(tpcb, 13);
 80016ca:	210d      	movs	r1, #13
 80016cc:	68b8      	ldr	r0, [r7, #8]
 80016ce:	f000 f941 	bl	8001954 <message_send>
 80016d2:	e042      	b.n	800175a <tcp_echoserver_recv+0x43a>
			}
			else if(strcmp(cp,"shoot") == 0) {
 80016d4:	4933      	ldr	r1, [pc, #204]	; (80017a4 <tcp_echoserver_recv+0x484>)
 80016d6:	6938      	ldr	r0, [r7, #16]
 80016d8:	f7fe fd8a 	bl	80001f0 <strcmp>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d114      	bne.n	800170c <tcp_echoserver_recv+0x3ec>
			  __HAL_TIM_SetCompare(&htim12, TIM_CHANNEL_1, 40);
 80016e2:	4b31      	ldr	r3, [pc, #196]	; (80017a8 <tcp_echoserver_recv+0x488>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2228      	movs	r2, #40	; 0x28
 80016e8:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(1000);
 80016ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016ee:	f000 fb47 	bl	8001d80 <HAL_Delay>
			  __HAL_TIM_SetCompare(&htim12, TIM_CHANNEL_1, 80);
 80016f2:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <tcp_echoserver_recv+0x488>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2250      	movs	r2, #80	; 0x50
 80016f8:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(1000);
 80016fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016fe:	f000 fb3f 	bl	8001d80 <HAL_Delay>
				message_send(tpcb, 14);
 8001702:	210e      	movs	r1, #14
 8001704:	68b8      	ldr	r0, [r7, #8]
 8001706:	f000 f925 	bl	8001954 <message_send>
 800170a:	e026      	b.n	800175a <tcp_echoserver_recv+0x43a>
			}
			else if(strcmp(cp,"C_on") == 0) {
 800170c:	4927      	ldr	r1, [pc, #156]	; (80017ac <tcp_echoserver_recv+0x48c>)
 800170e:	6938      	ldr	r0, [r7, #16]
 8001710:	f7fe fd6e 	bl	80001f0 <strcmp>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d104      	bne.n	8001724 <tcp_echoserver_recv+0x404>
				//카메라 켜는 신호 보내기
							message_send(tpcb, 15);
 800171a:	210f      	movs	r1, #15
 800171c:	68b8      	ldr	r0, [r7, #8]
 800171e:	f000 f919 	bl	8001954 <message_send>
 8001722:	e01a      	b.n	800175a <tcp_echoserver_recv+0x43a>
			}
			else if(strcmp(cp,"C_off") == 0) {
 8001724:	4922      	ldr	r1, [pc, #136]	; (80017b0 <tcp_echoserver_recv+0x490>)
 8001726:	6938      	ldr	r0, [r7, #16]
 8001728:	f7fe fd62 	bl	80001f0 <strcmp>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d104      	bne.n	800173c <tcp_echoserver_recv+0x41c>
				//카메라 끄는 신호 보내기
							message_send(tpcb, 16);
 8001732:	2110      	movs	r1, #16
 8001734:	68b8      	ldr	r0, [r7, #8]
 8001736:	f000 f90d 	bl	8001954 <message_send>
 800173a:	e00e      	b.n	800175a <tcp_echoserver_recv+0x43a>

			// -- <6-1-3> : <L11> 형식이 아닌 데이터가 수신될 경우 bv   b
			// 	- 수신된 데이터를 그대로 echo back 함
			else {
				/* send back received data */
				 es->p = p;
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	609a      	str	r2, [r3, #8]
				tcp_echoserver_send(tpcb, es);	
 8001742:	69b9      	ldr	r1, [r7, #24]
 8001744:	68b8      	ldr	r0, [r7, #8]
 8001746:	f000 f835 	bl	80017b4 <tcp_echoserver_send>
 800174a:	e006      	b.n	800175a <tcp_echoserver_recv+0x43a>
		}
		
		else	{
			  struct pbuf *ptr;
			  /* chain pbufs to the end of what we recv'ed previously  */
			  ptr = es->p;
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	617b      	str	r3, [r7, #20]
			  pbuf_chain(ptr,p);
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	6978      	ldr	r0, [r7, #20]
 8001756:	f005 fa5f 	bl	8006c18 <pbuf_chain>
		}
		ret_err = ERR_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	77fb      	strb	r3, [r7, #31]
 800175e:	e00d      	b.n	800177c <tcp_echoserver_recv+0x45c>
  }
  
  /* data received when connection already closed */
  else  {
		/* Acknowledge data reception */
		tcp_recved(tpcb, p->tot_len);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	891b      	ldrh	r3, [r3, #8]
 8001764:	4619      	mov	r1, r3
 8001766:	68b8      	ldr	r0, [r7, #8]
 8001768:	f006 f942 	bl	80079f0 <tcp_recved>
		
		/* free pbuf and do nothing */
		es->p = NULL;
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
		pbuf_free(p);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f005 f938 	bl	80069e8 <pbuf_free>
		ret_err = ERR_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 800177c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3720      	adds	r7, #32
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	08011134 	.word	0x08011134
 800178c:	200002f0 	.word	0x200002f0
 8001790:	08011138 	.word	0x08011138
 8001794:	0801113c 	.word	0x0801113c
 8001798:	2000000c 	.word	0x2000000c
 800179c:	200002a4 	.word	0x200002a4
 80017a0:	08011140 	.word	0x08011140
 80017a4:	08011144 	.word	0x08011144
 80017a8:	20000338 	.word	0x20000338
 80017ac:	0801114c 	.word	0x0801114c
 80017b0:	08011154 	.word	0x08011154

080017b4 <tcp_echoserver_send>:
  * retval None
  */
// -------------------------------------------------------------------------------

static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 80017be:	2300      	movs	r3, #0
 80017c0:	75fb      	strb	r3, [r7, #23]
 
  while ((wr_err == ERR_OK) &&
 80017c2:	e031      	b.n	8001828 <tcp_echoserver_send+0x74>
         (es->p != NULL) && 
         (es->p->len <= tcp_sndbuf(tpcb)))
  {
    
    /* get pointer on pbuf from es structure */
    ptr = es->p;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	6859      	ldr	r1, [r3, #4]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	895a      	ldrh	r2, [r3, #10]
 80017d2:	2301      	movs	r3, #1
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f009 ff27 	bl	800b628 <tcp_write>
 80017da:	4603      	mov	r3, r0
 80017dc:	75fb      	strb	r3, [r7, #23]
    
    if (wr_err == ERR_OK)
 80017de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d118      	bne.n	8001818 <tcp_echoserver_send+0x64>
    {
      u16_t plen;

      plen = ptr->len;
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	895b      	ldrh	r3, [r3, #10]
 80017ea:	81fb      	strh	r3, [r7, #14]
     
      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	609a      	str	r2, [r3, #8]
      
      if(es->p != NULL)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d004      	beq.n	8001806 <tcp_echoserver_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	4618      	mov	r0, r3
 8001802:	f005 f991 	bl	8006b28 <pbuf_ref>
      }
      
      /* free pbuf: will free pbufs up to es->p (because es->p has a reference count > 0) */
      pbuf_free(ptr);
 8001806:	6938      	ldr	r0, [r7, #16]
 8001808:	f005 f8ee 	bl	80069e8 <pbuf_free>

      /* Update tcp window size to be advertized : should be called when received
      data (with the amount plen) has been processed by the application layer */
      tcp_recved(tpcb, plen);
 800180c:	89fb      	ldrh	r3, [r7, #14]
 800180e:	4619      	mov	r1, r3
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f006 f8ed 	bl	80079f0 <tcp_recved>
 8001816:	e007      	b.n	8001828 <tcp_echoserver_send+0x74>
   }
   else if(wr_err == ERR_MEM)
 8001818:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800181c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001820:	d102      	bne.n	8001828 <tcp_echoserver_send+0x74>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8001828:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d10b      	bne.n	8001848 <tcp_echoserver_send+0x94>
         (es->p != NULL) && 
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8001834:	2b00      	cmp	r3, #0
 8001836:	d007      	beq.n	8001848 <tcp_echoserver_send+0x94>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	895a      	ldrh	r2, [r3, #10]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) && 
 8001844:	429a      	cmp	r2, r3
 8001846:	d9bd      	bls.n	80017c4 <tcp_echoserver_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8001848:	bf00      	nop
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <tcp_echoserver_sent>:
  * retval 	err_t		: returned error code
  */
// -------------------------------------------------------------------------

static err_t tcp_echoserver_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	4613      	mov	r3, r2
 800185c:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct *)arg;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	617b      	str	r3, [r7, #20]
  
  if(es->p != NULL)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d004      	beq.n	8001874 <tcp_echoserver_sent+0x24>
  {
    /* still got pbufs to send */
    tcp_echoserver_send(tpcb, es);
 800186a:	6979      	ldr	r1, [r7, #20]
 800186c:	68b8      	ldr	r0, [r7, #8]
 800186e:	f7ff ffa1 	bl	80017b4 <tcp_echoserver_send>
 8001872:	e007      	b.n	8001884 <tcp_echoserver_sent+0x34>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b03      	cmp	r3, #3
 800187a:	d103      	bne.n	8001884 <tcp_echoserver_sent+0x34>
      tcp_echoserver_connection_close(tpcb, es);
 800187c:	6979      	ldr	r1, [r7, #20]
 800187e:	68b8      	ldr	r0, [r7, #8]
 8001880:	f000 f82e 	bl	80018e0 <tcp_echoserver_connection_close>
  }
  return ERR_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <tcp_echoserver_poll>:
  * retval 		err_t	: error code
  */
// ------------------------------------------------------------

static err_t tcp_echoserver_poll(void *arg, struct tcp_pcb *tpcb)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b084      	sub	sp, #16
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_echoserver_struct *es;

  es = (struct tcp_echoserver_struct *)arg;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	60bb      	str	r3, [r7, #8]
  
	if (es != NULL)  {
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d013      	beq.n	80018ca <tcp_echoserver_poll+0x3c>
		if (es->p != NULL)    {
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d004      	beq.n	80018b4 <tcp_echoserver_poll+0x26>
			  /* there is a remaining pbuf (chain) , try to send data */
			  tcp_echoserver_send(tpcb, es);
 80018aa:	68b9      	ldr	r1, [r7, #8]
 80018ac:	6838      	ldr	r0, [r7, #0]
 80018ae:	f7ff ff81 	bl	80017b4 <tcp_echoserver_send>
 80018b2:	e007      	b.n	80018c4 <tcp_echoserver_poll+0x36>
		}
		else  {
			  /* no remaining pbuf (chain)  */
			  if(es->state == ES_CLOSING)  {
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	d103      	bne.n	80018c4 <tcp_echoserver_poll+0x36>
					/*  close tcp connection */
					tcp_echoserver_connection_close(tpcb, es);
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	6838      	ldr	r0, [r7, #0]
 80018c0:	f000 f80e 	bl	80018e0 <tcp_echoserver_connection_close>
			  }
		}
		ret_err = ERR_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	73fb      	strb	r3, [r7, #15]
 80018c8:	e004      	b.n	80018d4 <tcp_echoserver_poll+0x46>
  }
  
  else  {
		/* nothing to be done */
		tcp_abort(tpcb);
 80018ca:	6838      	ldr	r0, [r7, #0]
 80018cc:	f005 feb6 	bl	800763c <tcp_abort>
		ret_err = ERR_ABRT;
 80018d0:	23f3      	movs	r3, #243	; 0xf3
 80018d2:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 80018d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
  
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <tcp_echoserver_connection_close>:
  * retval 	None
  */
// -------------------------------------------------------------------------------

static void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  
  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 80018ea:	2100      	movs	r1, #0
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f006 ff5d 	bl	80087ac <tcp_arg>
  tcp_sent(tpcb, NULL);
 80018f2:	2100      	movs	r1, #0
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f006 ff8d 	bl	8008814 <tcp_sent>
  tcp_recv(tpcb, NULL);
 80018fa:	2100      	movs	r1, #0
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f006 ff67 	bl	80087d0 <tcp_recv>
  tcp_err(tpcb, NULL);
 8001902:	2100      	movs	r1, #0
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f006 ffa7 	bl	8008858 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f006 ffdc 	bl	80088cc <tcp_poll>
  
  /* delete es structure */
  if (es != NULL)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <tcp_echoserver_connection_close+0x40>
  {
    mem_free(es);
 800191a:	6838      	ldr	r0, [r7, #0]
 800191c:	f003 ff32 	bl	8005784 <mem_free>
  }  
  
  /* close tcp connection */
  tcp_close(tpcb);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f005 fda1 	bl	8007468 <tcp_close>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <tcp_echoserver_error>:
  * retval 	None
  */
// -------------------------------------------------------------------------------

static void tcp_echoserver_error(void *arg, err_t err)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b084      	sub	sp, #16
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	460b      	mov	r3, r1
 8001938:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct *)arg;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d002      	beq.n	800194a <tcp_echoserver_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f003 ff1d 	bl	8005784 <mem_free>
  }
}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <message_send>:
//
// -------------------------------------------------------------------------
/////////////////////////////////////////////////////////////////////edit area//////////////////////////////////////

void message_send(struct tcp_pcb *tpcb2, int number)
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
		struct tcp_echoserver_struct *es2;	
	
		es2 = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 800195e:	200c      	movs	r0, #12
 8001960:	f004 f876 	bl	8005a50 <mem_malloc>
 8001964:	60f8      	str	r0, [r7, #12]
		tpcb_this = tpcb2;
 8001966:	4a8f      	ldr	r2, [pc, #572]	; (8001ba4 <message_send+0x250>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	3b0b      	subs	r3, #11
 8001970:	2b58      	cmp	r3, #88	; 0x58
 8001972:	f200 80f1 	bhi.w	8001b58 <message_send+0x204>
 8001976:	a201      	add	r2, pc, #4	; (adr r2, 800197c <message_send+0x28>)
 8001978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197c:	08001b13 	.word	0x08001b13
 8001980:	08001b1d 	.word	0x08001b1d
 8001984:	08001b27 	.word	0x08001b27
 8001988:	08001b31 	.word	0x08001b31
 800198c:	08001b3b 	.word	0x08001b3b
 8001990:	08001b45 	.word	0x08001b45
 8001994:	08001b59 	.word	0x08001b59
 8001998:	08001b59 	.word	0x08001b59
 800199c:	08001b59 	.word	0x08001b59
 80019a0:	08001ae1 	.word	0x08001ae1
 80019a4:	08001aeb 	.word	0x08001aeb
 80019a8:	08001af5 	.word	0x08001af5
 80019ac:	08001aff 	.word	0x08001aff
 80019b0:	08001b09 	.word	0x08001b09
 80019b4:	08001b59 	.word	0x08001b59
 80019b8:	08001b59 	.word	0x08001b59
 80019bc:	08001b59 	.word	0x08001b59
 80019c0:	08001b59 	.word	0x08001b59
 80019c4:	08001b59 	.word	0x08001b59
 80019c8:	08001b59 	.word	0x08001b59
 80019cc:	08001b59 	.word	0x08001b59
 80019d0:	08001b59 	.word	0x08001b59
 80019d4:	08001b59 	.word	0x08001b59
 80019d8:	08001b59 	.word	0x08001b59
 80019dc:	08001b59 	.word	0x08001b59
 80019e0:	08001b59 	.word	0x08001b59
 80019e4:	08001b59 	.word	0x08001b59
 80019e8:	08001b59 	.word	0x08001b59
 80019ec:	08001b59 	.word	0x08001b59
 80019f0:	08001b59 	.word	0x08001b59
 80019f4:	08001b59 	.word	0x08001b59
 80019f8:	08001b59 	.word	0x08001b59
 80019fc:	08001b59 	.word	0x08001b59
 8001a00:	08001b59 	.word	0x08001b59
 8001a04:	08001b59 	.word	0x08001b59
 8001a08:	08001b59 	.word	0x08001b59
 8001a0c:	08001b59 	.word	0x08001b59
 8001a10:	08001b59 	.word	0x08001b59
 8001a14:	08001b59 	.word	0x08001b59
 8001a18:	08001b59 	.word	0x08001b59
 8001a1c:	08001b59 	.word	0x08001b59
 8001a20:	08001b59 	.word	0x08001b59
 8001a24:	08001b59 	.word	0x08001b59
 8001a28:	08001b59 	.word	0x08001b59
 8001a2c:	08001b59 	.word	0x08001b59
 8001a30:	08001b59 	.word	0x08001b59
 8001a34:	08001b59 	.word	0x08001b59
 8001a38:	08001b59 	.word	0x08001b59
 8001a3c:	08001b59 	.word	0x08001b59
 8001a40:	08001b59 	.word	0x08001b59
 8001a44:	08001b59 	.word	0x08001b59
 8001a48:	08001b59 	.word	0x08001b59
 8001a4c:	08001b59 	.word	0x08001b59
 8001a50:	08001b59 	.word	0x08001b59
 8001a54:	08001b59 	.word	0x08001b59
 8001a58:	08001b59 	.word	0x08001b59
 8001a5c:	08001b59 	.word	0x08001b59
 8001a60:	08001b59 	.word	0x08001b59
 8001a64:	08001b59 	.word	0x08001b59
 8001a68:	08001b59 	.word	0x08001b59
 8001a6c:	08001b59 	.word	0x08001b59
 8001a70:	08001b59 	.word	0x08001b59
 8001a74:	08001b59 	.word	0x08001b59
 8001a78:	08001b59 	.word	0x08001b59
 8001a7c:	08001b59 	.word	0x08001b59
 8001a80:	08001b59 	.word	0x08001b59
 8001a84:	08001b59 	.word	0x08001b59
 8001a88:	08001b59 	.word	0x08001b59
 8001a8c:	08001b59 	.word	0x08001b59
 8001a90:	08001b59 	.word	0x08001b59
 8001a94:	08001b59 	.word	0x08001b59
 8001a98:	08001b59 	.word	0x08001b59
 8001a9c:	08001b59 	.word	0x08001b59
 8001aa0:	08001b59 	.word	0x08001b59
 8001aa4:	08001b59 	.word	0x08001b59
 8001aa8:	08001b59 	.word	0x08001b59
 8001aac:	08001b59 	.word	0x08001b59
 8001ab0:	08001b59 	.word	0x08001b59
 8001ab4:	08001b59 	.word	0x08001b59
 8001ab8:	08001b59 	.word	0x08001b59
 8001abc:	08001b59 	.word	0x08001b59
 8001ac0:	08001b59 	.word	0x08001b59
 8001ac4:	08001b59 	.word	0x08001b59
 8001ac8:	08001b59 	.word	0x08001b59
 8001acc:	08001b59 	.word	0x08001b59
 8001ad0:	08001b59 	.word	0x08001b59
 8001ad4:	08001b59 	.word	0x08001b59
 8001ad8:	08001b59 	.word	0x08001b59
 8001adc:	08001b4f 	.word	0x08001b4f
		
		switch(number) {
				// --  <12-1> number의 값에 따라 대응되는 메시지를 data에 저장.

				case 20 :	sprintf((char*)data, " position1");
 8001ae0:	4931      	ldr	r1, [pc, #196]	; (8001ba8 <message_send+0x254>)
 8001ae2:	4832      	ldr	r0, [pc, #200]	; (8001bac <message_send+0x258>)
 8001ae4:	f00e f97e 	bl	800fde4 <siprintf>
							break;
 8001ae8:	e036      	b.n	8001b58 <message_send+0x204>
				case 21 :	sprintf((char*)data, " position2");
 8001aea:	4931      	ldr	r1, [pc, #196]	; (8001bb0 <message_send+0x25c>)
 8001aec:	482f      	ldr	r0, [pc, #188]	; (8001bac <message_send+0x258>)
 8001aee:	f00e f979 	bl	800fde4 <siprintf>
							break;
 8001af2:	e031      	b.n	8001b58 <message_send+0x204>
				case 22 :	sprintf((char*)data, " position3");
 8001af4:	492f      	ldr	r1, [pc, #188]	; (8001bb4 <message_send+0x260>)
 8001af6:	482d      	ldr	r0, [pc, #180]	; (8001bac <message_send+0x258>)
 8001af8:	f00e f974 	bl	800fde4 <siprintf>
							break;
 8001afc:	e02c      	b.n	8001b58 <message_send+0x204>
				case 23 :	sprintf((char*)data, " position4");
 8001afe:	492e      	ldr	r1, [pc, #184]	; (8001bb8 <message_send+0x264>)
 8001b00:	482a      	ldr	r0, [pc, #168]	; (8001bac <message_send+0x258>)
 8001b02:	f00e f96f 	bl	800fde4 <siprintf>
							break;
 8001b06:	e027      	b.n	8001b58 <message_send+0x204>
				case 24 :	sprintf((char*)data, " position5");
 8001b08:	492c      	ldr	r1, [pc, #176]	; (8001bbc <message_send+0x268>)
 8001b0a:	4828      	ldr	r0, [pc, #160]	; (8001bac <message_send+0x258>)
 8001b0c:	f00e f96a 	bl	800fde4 <siprintf>
							break;
 8001b10:	e022      	b.n	8001b58 <message_send+0x204>
				case 11 :   sprintf((char*)data, " MOVE RIGHT");
 8001b12:	492b      	ldr	r1, [pc, #172]	; (8001bc0 <message_send+0x26c>)
 8001b14:	4825      	ldr	r0, [pc, #148]	; (8001bac <message_send+0x258>)
 8001b16:	f00e f965 	bl	800fde4 <siprintf>
							break;
 8001b1a:	e01d      	b.n	8001b58 <message_send+0x204>
				case 12 :	sprintf((char*)data, " REVOLUTION LEFT");
 8001b1c:	4929      	ldr	r1, [pc, #164]	; (8001bc4 <message_send+0x270>)
 8001b1e:	4823      	ldr	r0, [pc, #140]	; (8001bac <message_send+0x258>)
 8001b20:	f00e f960 	bl	800fde4 <siprintf>
							break;
 8001b24:	e018      	b.n	8001b58 <message_send+0x204>
				case 13 :	sprintf((char*)data, " REVOLUTION RIGHT");
 8001b26:	4928      	ldr	r1, [pc, #160]	; (8001bc8 <message_send+0x274>)
 8001b28:	4820      	ldr	r0, [pc, #128]	; (8001bac <message_send+0x258>)
 8001b2a:	f00e f95b 	bl	800fde4 <siprintf>
							break;
 8001b2e:	e013      	b.n	8001b58 <message_send+0x204>
				case 14 :	sprintf((char*)data, " SHOOTING");
 8001b30:	4926      	ldr	r1, [pc, #152]	; (8001bcc <message_send+0x278>)
 8001b32:	481e      	ldr	r0, [pc, #120]	; (8001bac <message_send+0x258>)
 8001b34:	f00e f956 	bl	800fde4 <siprintf>
							break;
 8001b38:	e00e      	b.n	8001b58 <message_send+0x204>
				case 15 :	sprintf((char*)data, " CAMERA ON!!!");
 8001b3a:	4925      	ldr	r1, [pc, #148]	; (8001bd0 <message_send+0x27c>)
 8001b3c:	481b      	ldr	r0, [pc, #108]	; (8001bac <message_send+0x258>)
 8001b3e:	f00e f951 	bl	800fde4 <siprintf>
							break;
 8001b42:	e009      	b.n	8001b58 <message_send+0x204>
				case 16 :	sprintf((char*)data, " CAMERA OFF!!!");
 8001b44:	4923      	ldr	r1, [pc, #140]	; (8001bd4 <message_send+0x280>)
 8001b46:	4819      	ldr	r0, [pc, #100]	; (8001bac <message_send+0x258>)
 8001b48:	f00e f94c 	bl	800fde4 <siprintf>
							break;
 8001b4c:	e004      	b.n	8001b58 <message_send+0x204>

				case 99 :	sprintf((char*)data, " CONNECTED!");
 8001b4e:	4922      	ldr	r1, [pc, #136]	; (8001bd8 <message_send+0x284>)
 8001b50:	4816      	ldr	r0, [pc, #88]	; (8001bac <message_send+0x258>)
 8001b52:	f00e f947 	bl	800fde4 <siprintf>
							break;
 8001b56:	bf00      	nop
		}

		//--<12-2> 데이터를 보냄 : - server의 message_send() 와 비슷한 방법을 사용
		// 송신할 데이터를 es->p_tx (pbuf)에 넣는다	 (allocate pbuf )

		es2->p = pbuf_alloc(PBUF_TRANSPORT, strlen((char*)data) , PBUF_POOL);
 8001b58:	4814      	ldr	r0, [pc, #80]	; (8001bac <message_send+0x258>)
 8001b5a:	f7fe fb53 	bl	8000204 <strlen>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8001b66:	4619      	mov	r1, r3
 8001b68:	2036      	movs	r0, #54	; 0x36
 8001b6a:	f004 fc59 	bl	8006420 <pbuf_alloc>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	609a      	str	r2, [r3, #8]
		
		if (es2->p) {
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00f      	beq.n	8001b9c <message_send+0x248>
					// copy data to pbuf 
					pbuf_take(es2->p, (char*)data, strlen((char*)data));
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	689c      	ldr	r4, [r3, #8]
 8001b80:	480a      	ldr	r0, [pc, #40]	; (8001bac <message_send+0x258>)
 8001b82:	f7fe fb3f 	bl	8000204 <strlen>
 8001b86:	4603      	mov	r3, r0
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4907      	ldr	r1, [pc, #28]	; (8001bac <message_send+0x258>)
 8001b8e:	4620      	mov	r0, r4
 8001b90:	f005 f996 	bl	8006ec0 <pbuf_take>
					// send data 
					tcp_echoserver_send(tpcb2, es2);
 8001b94:	68f9      	ldr	r1, [r7, #12]
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff fe0c 	bl	80017b4 <tcp_echoserver_send>
		}

}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd90      	pop	{r4, r7, pc}
 8001ba4:	200000a8 	.word	0x200000a8
 8001ba8:	0801115c 	.word	0x0801115c
 8001bac:	20000380 	.word	0x20000380
 8001bb0:	08011168 	.word	0x08011168
 8001bb4:	08011174 	.word	0x08011174
 8001bb8:	08011180 	.word	0x08011180
 8001bbc:	0801118c 	.word	0x0801118c
 8001bc0:	08011198 	.word	0x08011198
 8001bc4:	080111a4 	.word	0x080111a4
 8001bc8:	080111b8 	.word	0x080111b8
 8001bcc:	080111cc 	.word	0x080111cc
 8001bd0:	080111d8 	.word	0x080111d8
 8001bd4:	080111e8 	.word	0x080111e8
 8001bd8:	080111f8 	.word	0x080111f8

08001bdc <HAL_GPIO_EXTI_Callback>:
//
// ------------------------------------------------------------------------
/////////////////////////////////////////////////////////////////////edit area//////////////////////////////////////

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	80fb      	strh	r3, [r7, #6]

  // -- <13-1> 눌러지는 SW 값에 따라 message_send( ) 함수를 호출함
  if (GPIO_Pin == SW1)  {
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d103      	bne.n	8001bf4 <HAL_GPIO_EXTI_Callback+0x18>
	  flag= 1;
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <HAL_GPIO_EXTI_Callback+0x64>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	e013      	b.n	8001c1c <HAL_GPIO_EXTI_Callback+0x40>
  }
  else   if (GPIO_Pin == SW2)  {
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d103      	bne.n	8001c02 <HAL_GPIO_EXTI_Callback+0x26>
	  flag= 2;
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <HAL_GPIO_EXTI_Callback+0x64>)
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	e00c      	b.n	8001c1c <HAL_GPIO_EXTI_Callback+0x40>
  }
  else   if (GPIO_Pin == SW3)  {
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d103      	bne.n	8001c10 <HAL_GPIO_EXTI_Callback+0x34>
	  flag = 3;
 8001c08:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <HAL_GPIO_EXTI_Callback+0x64>)
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	e005      	b.n	8001c1c <HAL_GPIO_EXTI_Callback+0x40>
  }
  else   if (GPIO_Pin == SW4)  {
 8001c10:	88fb      	ldrh	r3, [r7, #6]
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d102      	bne.n	8001c1c <HAL_GPIO_EXTI_Callback+0x40>
	  flag= 4;
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_GPIO_EXTI_Callback+0x64>)
 8001c18:	2204      	movs	r2, #4
 8001c1a:	601a      	str	r2, [r3, #0]
  }

 
  // -- <13-2> SW의 chattering 현상을 방지하기 위해 시간지연을 준다
  for (int i=0; i<=100000; i++) ;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	e002      	b.n	8001c28 <HAL_GPIO_EXTI_Callback+0x4c>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	3301      	adds	r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4a06      	ldr	r2, [pc, #24]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x68>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	ddf8      	ble.n	8001c22 <HAL_GPIO_EXTI_Callback+0x46>
 
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	2000026c 	.word	0x2000026c
 8001c44:	000186a0 	.word	0x000186a0

08001c48 <Reset_Handler>:
 8001c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c80 <LoopFillZerobss+0x14>
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	e003      	b.n	8001c58 <LoopCopyDataInit>

08001c50 <CopyDataInit>:
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <LoopFillZerobss+0x18>)
 8001c52:	585b      	ldr	r3, [r3, r1]
 8001c54:	5043      	str	r3, [r0, r1]
 8001c56:	3104      	adds	r1, #4

08001c58 <LoopCopyDataInit>:
 8001c58:	480b      	ldr	r0, [pc, #44]	; (8001c88 <LoopFillZerobss+0x1c>)
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <LoopFillZerobss+0x20>)
 8001c5c:	1842      	adds	r2, r0, r1
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d3f6      	bcc.n	8001c50 <CopyDataInit>
 8001c62:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <LoopFillZerobss+0x24>)
 8001c64:	e002      	b.n	8001c6c <LoopFillZerobss>

08001c66 <FillZerobss>:
 8001c66:	2300      	movs	r3, #0
 8001c68:	f842 3b04 	str.w	r3, [r2], #4

08001c6c <LoopFillZerobss>:
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <LoopFillZerobss+0x28>)
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d3f9      	bcc.n	8001c66 <FillZerobss>
 8001c72:	f7ff fab9 	bl	80011e8 <SystemInit>
 8001c76:	f00d fffb 	bl	800fc70 <__libc_init_array>
 8001c7a:	f7fe fc9d 	bl	80005b8 <main>
 8001c7e:	4770      	bx	lr
 8001c80:	20030000 	.word	0x20030000
 8001c84:	08013e34 	.word	0x08013e34
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	20000084 	.word	0x20000084
 8001c90:	20000084 	.word	0x20000084
 8001c94:	20006a58 	.word	0x20006a58

08001c98 <ADC_IRQHandler>:
 8001c98:	e7fe      	b.n	8001c98 <ADC_IRQHandler>
	...

08001c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ca0:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <HAL_Init+0x40>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	; (8001cdc <HAL_Init+0x40>)
 8001ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001caa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cac:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <HAL_Init+0x40>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0a      	ldr	r2, [pc, #40]	; (8001cdc <HAL_Init+0x40>)
 8001cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <HAL_Init+0x40>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a07      	ldr	r2, [pc, #28]	; (8001cdc <HAL_Init+0x40>)
 8001cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc4:	2003      	movs	r0, #3
 8001cc6:	f000 f94f 	bl	8001f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f000 f808 	bl	8001ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd0:	f7fe fff8 	bl	8000cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40023c00 	.word	0x40023c00

08001ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_InitTick+0x54>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_InitTick+0x58>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 f967 	bl	8001fd2 <HAL_SYSTICK_Config>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00e      	b.n	8001d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b0f      	cmp	r3, #15
 8001d12:	d80a      	bhi.n	8001d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d14:	2200      	movs	r2, #0
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1c:	f000 f92f 	bl	8001f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d20:	4a06      	ldr	r2, [pc, #24]	; (8001d3c <HAL_InitTick+0x5c>)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e000      	b.n	8001d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000008 	.word	0x20000008
 8001d38:	20000014 	.word	0x20000014
 8001d3c:	20000010 	.word	0x20000010

08001d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_IncTick+0x20>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_IncTick+0x24>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <HAL_IncTick+0x24>)
 8001d52:	6013      	str	r3, [r2, #0]
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000014 	.word	0x20000014
 8001d64:	200003e4 	.word	0x200003e4

08001d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <HAL_GetTick+0x14>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	200003e4 	.word	0x200003e4

08001d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d88:	f7ff ffee 	bl	8001d68 <HAL_GetTick>
 8001d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d98:	d005      	beq.n	8001da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <HAL_Delay+0x44>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4413      	add	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001da6:	bf00      	nop
 8001da8:	f7ff ffde 	bl	8001d68 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d8f7      	bhi.n	8001da8 <HAL_Delay+0x28>
  {
  }
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000014 	.word	0x20000014

08001dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de4:	4013      	ands	r3, r2
 8001de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfa:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	60d3      	str	r3, [r2, #12]
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <__NVIC_GetPriorityGrouping+0x18>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	0a1b      	lsrs	r3, r3, #8
 8001e1a:	f003 0307 	and.w	r3, r3, #7
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	db0b      	blt.n	8001e56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	f003 021f 	and.w	r2, r3, #31
 8001e44:	4907      	ldr	r1, [pc, #28]	; (8001e64 <__NVIC_EnableIRQ+0x38>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000e100 	.word	0xe000e100

08001e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	db0a      	blt.n	8001e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	490c      	ldr	r1, [pc, #48]	; (8001eb4 <__NVIC_SetPriority+0x4c>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	0112      	lsls	r2, r2, #4
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e90:	e00a      	b.n	8001ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4908      	ldr	r1, [pc, #32]	; (8001eb8 <__NVIC_SetPriority+0x50>)
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	3b04      	subs	r3, #4
 8001ea0:	0112      	lsls	r2, r2, #4
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	761a      	strb	r2, [r3, #24]
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000e100 	.word	0xe000e100
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	; 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f1c3 0307 	rsb	r3, r3, #7
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	bf28      	it	cs
 8001eda:	2304      	movcs	r3, #4
 8001edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	2b06      	cmp	r3, #6
 8001ee4:	d902      	bls.n	8001eec <NVIC_EncodePriority+0x30>
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3b03      	subs	r3, #3
 8001eea:	e000      	b.n	8001eee <NVIC_EncodePriority+0x32>
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43da      	mvns	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	401a      	ands	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f04:	f04f 31ff 	mov.w	r1, #4294967295
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0e:	43d9      	mvns	r1, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	4313      	orrs	r3, r2
         );
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3724      	adds	r7, #36	; 0x24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f34:	d301      	bcc.n	8001f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f36:	2301      	movs	r3, #1
 8001f38:	e00f      	b.n	8001f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <SysTick_Config+0x40>)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f42:	210f      	movs	r1, #15
 8001f44:	f04f 30ff 	mov.w	r0, #4294967295
 8001f48:	f7ff ff8e 	bl	8001e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <SysTick_Config+0x40>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f52:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <SysTick_Config+0x40>)
 8001f54:	2207      	movs	r2, #7
 8001f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	e000e010 	.word	0xe000e010

08001f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff ff29 	bl	8001dc8 <__NVIC_SetPriorityGrouping>
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b086      	sub	sp, #24
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	4603      	mov	r3, r0
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
 8001f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f90:	f7ff ff3e 	bl	8001e10 <__NVIC_GetPriorityGrouping>
 8001f94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	68b9      	ldr	r1, [r7, #8]
 8001f9a:	6978      	ldr	r0, [r7, #20]
 8001f9c:	f7ff ff8e 	bl	8001ebc <NVIC_EncodePriority>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff5d 	bl	8001e68 <__NVIC_SetPriority>
}
 8001fae:	bf00      	nop
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff31 	bl	8001e2c <__NVIC_EnableIRQ>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ffa2 	bl	8001f24 <SysTick_Config>
 8001fe0:	4603      	mov	r3, r0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001ffc:	4baa      	ldr	r3, [pc, #680]	; (80022a8 <HAL_ETH_Init+0x2bc>)
 8001ffe:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002004:	2300      	movs	r3, #0
 8002006:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e183      	b.n	800231a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d106      	bne.n	800202c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f002 fe88 	bl	8004d3c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202c:	2300      	movs	r3, #0
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	4b9e      	ldr	r3, [pc, #632]	; (80022ac <HAL_ETH_Init+0x2c0>)
 8002032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002034:	4a9d      	ldr	r2, [pc, #628]	; (80022ac <HAL_ETH_Init+0x2c0>)
 8002036:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800203a:	6453      	str	r3, [r2, #68]	; 0x44
 800203c:	4b9b      	ldr	r3, [pc, #620]	; (80022ac <HAL_ETH_Init+0x2c0>)
 800203e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002048:	4b99      	ldr	r3, [pc, #612]	; (80022b0 <HAL_ETH_Init+0x2c4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	4a98      	ldr	r2, [pc, #608]	; (80022b0 <HAL_ETH_Init+0x2c4>)
 800204e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002052:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002054:	4b96      	ldr	r3, [pc, #600]	; (80022b0 <HAL_ETH_Init+0x2c4>)
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	4994      	ldr	r1, [pc, #592]	; (80022b0 <HAL_ETH_Init+0x2c4>)
 800205e:	4313      	orrs	r3, r2
 8002060:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f042 0201 	orr.w	r2, r2, #1
 8002074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002078:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800207a:	f7ff fe75 	bl	8001d68 <HAL_GetTick>
 800207e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002080:	e011      	b.n	80020a6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002082:	f7ff fe71 	bl	8001d68 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002090:	d909      	bls.n	80020a6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2203      	movs	r2, #3
 8002096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e139      	b.n	800231a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1e4      	bne.n	8002082 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f023 031c 	bic.w	r3, r3, #28
 80020c6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80020c8:	f001 fed4 	bl	8003e74 <HAL_RCC_GetHCLKFreq>
 80020cc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	4a78      	ldr	r2, [pc, #480]	; (80022b4 <HAL_ETH_Init+0x2c8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d908      	bls.n	80020e8 <HAL_ETH_Init+0xfc>
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	4a77      	ldr	r2, [pc, #476]	; (80022b8 <HAL_ETH_Init+0x2cc>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d804      	bhi.n	80020e8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	f043 0308 	orr.w	r3, r3, #8
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	e027      	b.n	8002138 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	4a73      	ldr	r2, [pc, #460]	; (80022b8 <HAL_ETH_Init+0x2cc>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d908      	bls.n	8002102 <HAL_ETH_Init+0x116>
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	4a6d      	ldr	r2, [pc, #436]	; (80022a8 <HAL_ETH_Init+0x2bc>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d204      	bcs.n	8002102 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f043 030c 	orr.w	r3, r3, #12
 80020fe:	61fb      	str	r3, [r7, #28]
 8002100:	e01a      	b.n	8002138 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	4a68      	ldr	r2, [pc, #416]	; (80022a8 <HAL_ETH_Init+0x2bc>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d303      	bcc.n	8002112 <HAL_ETH_Init+0x126>
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	4a6b      	ldr	r2, [pc, #428]	; (80022bc <HAL_ETH_Init+0x2d0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d911      	bls.n	8002136 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	4a69      	ldr	r2, [pc, #420]	; (80022bc <HAL_ETH_Init+0x2d0>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d908      	bls.n	800212c <HAL_ETH_Init+0x140>
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	4a68      	ldr	r2, [pc, #416]	; (80022c0 <HAL_ETH_Init+0x2d4>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d804      	bhi.n	800212c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	f043 0304 	orr.w	r3, r3, #4
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	e005      	b.n	8002138 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f043 0310 	orr.w	r3, r3, #16
 8002132:	61fb      	str	r3, [r7, #28]
 8002134:	e000      	b.n	8002138 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002136:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	69fa      	ldr	r2, [r7, #28]
 800213e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002140:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002144:	2100      	movs	r1, #0
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 fb98 	bl	800287c <HAL_ETH_WritePHYRegister>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00b      	beq.n	800216a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002156:	6939      	ldr	r1, [r7, #16]
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 fd4d 	bl	8002bf8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e0d7      	b.n	800231a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800216a:	20ff      	movs	r0, #255	; 0xff
 800216c:	f7ff fe08 	bl	8001d80 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 80a5 	beq.w	80022c4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800217a:	f7ff fdf5 	bl	8001d68 <HAL_GetTick>
 800217e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002180:	f107 030c 	add.w	r3, r7, #12
 8002184:	461a      	mov	r2, r3
 8002186:	2101      	movs	r1, #1
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 fb0f 	bl	80027ac <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800218e:	f7ff fdeb 	bl	8001d68 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	f241 3288 	movw	r2, #5000	; 0x1388
 800219c:	4293      	cmp	r3, r2
 800219e:	d90f      	bls.n	80021c0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80021a4:	6939      	ldr	r1, [r7, #16]
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 fd26 	bl	8002bf8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e0ac      	b.n	800231a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0da      	beq.n	8002180 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80021ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021ce:	2100      	movs	r1, #0
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 fb53 	bl	800287c <HAL_ETH_WritePHYRegister>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00b      	beq.n	80021f4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80021e0:	6939      	ldr	r1, [r7, #16]
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 fd08 	bl	8002bf8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80021f0:	2301      	movs	r3, #1
 80021f2:	e092      	b.n	800231a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80021f4:	f7ff fdb8 	bl	8001d68 <HAL_GetTick>
 80021f8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80021fa:	f107 030c 	add.w	r3, r7, #12
 80021fe:	461a      	mov	r2, r3
 8002200:	2101      	movs	r1, #1
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 fad2 	bl	80027ac <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002208:	f7ff fdae 	bl	8001d68 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	; 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d90f      	bls.n	800223a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800221e:	6939      	ldr	r1, [r7, #16]
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 fce9 	bl	8002bf8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e06f      	b.n	800231a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f003 0320 	and.w	r3, r3, #32
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0da      	beq.n	80021fa <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002244:	f107 030c 	add.w	r3, r7, #12
 8002248:	461a      	mov	r2, r3
 800224a:	2110      	movs	r1, #16
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 faad 	bl	80027ac <HAL_ETH_ReadPHYRegister>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00b      	beq.n	8002270 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800225c:	6939      	ldr	r1, [r7, #16]
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 fcca 	bl	8002bf8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800226c:	2301      	movs	r3, #1
 800226e:	e054      	b.n	800231a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	2b00      	cmp	r3, #0
 8002278:	d004      	beq.n	8002284 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	e002      	b.n	800228a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
 800229a:	e035      	b.n	8002308 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	e030      	b.n	8002308 <HAL_ETH_Init+0x31c>
 80022a6:	bf00      	nop
 80022a8:	03938700 	.word	0x03938700
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40013800 	.word	0x40013800
 80022b4:	01312cff 	.word	0x01312cff
 80022b8:	02160ebf 	.word	0x02160ebf
 80022bc:	05f5e0ff 	.word	0x05f5e0ff
 80022c0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	08db      	lsrs	r3, r3, #3
 80022ca:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	085b      	lsrs	r3, r3, #1
 80022d2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80022d4:	4313      	orrs	r3, r2
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	2100      	movs	r1, #0
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 facd 	bl	800287c <HAL_ETH_WritePHYRegister>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00b      	beq.n	8002300 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80022ec:	6939      	ldr	r1, [r7, #16]
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 fc82 	bl	8002bf8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e00c      	b.n	800231a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002300:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002304:	f7ff fd3c 	bl	8001d80 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002308:	6939      	ldr	r1, [r7, #16]
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 fc74 	bl	8002bf8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3720      	adds	r7, #32
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop

08002324 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
 8002330:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_ETH_DMATxDescListInit+0x20>
 8002340:	2302      	movs	r3, #2
 8002342:	e052      	b.n	80023ea <HAL_ETH_DMATxDescListInit+0xc6>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	e030      	b.n	80023c2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	015b      	lsls	r3, r3, #5
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	4413      	add	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002370:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	4413      	add	r3, r2
 8002380:	461a      	mov	r2, r3
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d105      	bne.n	800239a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	3b01      	subs	r3, #1
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d208      	bcs.n	80023b6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	3301      	adds	r3, #1
 80023a8:	015b      	lsls	r3, r3, #5
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	4413      	add	r3, r2
 80023ae:	461a      	mov	r2, r3
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	60da      	str	r2, [r3, #12]
 80023b4:	e002      	b.n	80023bc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	3301      	adds	r3, #1
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d3ca      	bcc.n	8002360 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d4:	3310      	adds	r3, #16
 80023d6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	371c      	adds	r7, #28
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b087      	sub	sp, #28
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
 8002402:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <HAL_ETH_DMARxDescListInit+0x20>
 8002412:	2302      	movs	r3, #2
 8002414:	e056      	b.n	80024c4 <HAL_ETH_DMARxDescListInit+0xce>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2202      	movs	r2, #2
 8002422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	e034      	b.n	800249c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	015b      	lsls	r3, r3, #5
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	4413      	add	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002442:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800244a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002452:	fb02 f303 	mul.w	r3, r2, r3
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	461a      	mov	r2, r3
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d105      	bne.n	8002474 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	3b01      	subs	r3, #1
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	429a      	cmp	r2, r3
 800247c:	d208      	bcs.n	8002490 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	3301      	adds	r3, #1
 8002482:	015b      	lsls	r3, r3, #5
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	4413      	add	r3, r2
 8002488:	461a      	mov	r2, r3
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	e002      	b.n	8002496 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	3301      	adds	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d3c6      	bcc.n	8002432 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ae:	330c      	adds	r3, #12
 80024b0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	371c      	adds	r7, #28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_ETH_TransmitFrame+0x24>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e0cd      	b.n	8002690 <HAL_ETH_TransmitFrame+0x1c0>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2202      	movs	r2, #2
 8002500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800251a:	2301      	movs	r3, #1
 800251c:	e0b8      	b.n	8002690 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	da09      	bge.n	800253c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2212      	movs	r2, #18
 800252c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0a9      	b.n	8002690 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002542:	4293      	cmp	r3, r2
 8002544:	d915      	bls.n	8002572 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	4a54      	ldr	r2, [pc, #336]	; (800269c <HAL_ETH_TransmitFrame+0x1cc>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	0a9b      	lsrs	r3, r3, #10
 8002550:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	4b51      	ldr	r3, [pc, #324]	; (800269c <HAL_ETH_TransmitFrame+0x1cc>)
 8002556:	fba3 1302 	umull	r1, r3, r3, r2
 800255a:	0a9b      	lsrs	r3, r3, #10
 800255c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002560:	fb01 f303 	mul.w	r3, r1, r3
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	3301      	adds	r3, #1
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	e001      	b.n	8002576 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8002572:	2301      	movs	r3, #1
 8002574:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d11c      	bne.n	80025b6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002586:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800258a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002596:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80025a6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	461a      	mov	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80025b4:	e04b      	b.n	800264e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	e044      	b.n	8002646 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025ca:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d107      	bne.n	80025e2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025e0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80025ea:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d116      	bne.n	8002624 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002604:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	4a25      	ldr	r2, [pc, #148]	; (80026a0 <HAL_ETH_TransmitFrame+0x1d0>)
 800260a:	fb02 f203 	mul.w	r2, r2, r3
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	4413      	add	r3, r2
 8002612:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002616:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002622:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002632:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	461a      	mov	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	3301      	adds	r3, #1
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	429a      	cmp	r2, r3
 800264c:	d3b6      	bcc.n	80025bc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002656:	3314      	adds	r3, #20
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00d      	beq.n	800267e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800266a:	3314      	adds	r3, #20
 800266c:	2204      	movs	r2, #4
 800266e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002678:	3304      	adds	r3, #4
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	371c      	adds	r7, #28
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	ac02b00b 	.word	0xac02b00b
 80026a0:	fffffa0c 	.word	0xfffffa0c

080026a4 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_ETH_GetReceivedFrame+0x1a>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e070      	b.n	80027a0 <HAL_ETH_GetReceivedFrame+0xfc>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2202      	movs	r2, #2
 80026ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	db5a      	blt.n	800278e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d030      	beq.n	8002748 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d103      	bne.n	8002700 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	0c1b      	lsrs	r3, r3, #16
 8002710:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002714:	3b04      	subs	r3, #4
 8002716:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	461a      	mov	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	e02b      	b.n	80027a0 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002752:	2b00      	cmp	r3, #0
 8002754:	d010      	beq.n	8002778 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	461a      	mov	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	629a      	str	r2, [r3, #40]	; 0x28
 8002776:	e00a      	b.n	800278e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	461a      	mov	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	460b      	mov	r3, r1
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b82      	cmp	r3, #130	; 0x82
 80027cc:	d101      	bne.n	80027d2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80027ce:	2302      	movs	r3, #2
 80027d0:	e050      	b.n	8002874 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2282      	movs	r2, #130	; 0x82
 80027d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f003 031c 	and.w	r3, r3, #28
 80027e8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8a1b      	ldrh	r3, [r3, #16]
 80027ee:	02db      	lsls	r3, r3, #11
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80027f8:	897b      	ldrh	r3, [r7, #10]
 80027fa:	019b      	lsls	r3, r3, #6
 80027fc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	4313      	orrs	r3, r2
 8002804:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f023 0302 	bic.w	r3, r3, #2
 800280c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800281e:	f7ff faa3 	bl	8001d68 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002824:	e015      	b.n	8002852 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002826:	f7ff fa9f 	bl	8001d68 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002834:	d309      	bcc.n	800284a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e014      	b.n	8002874 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1e4      	bne.n	8002826 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	b29b      	uxth	r3, r3
 8002864:	461a      	mov	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	460b      	mov	r3, r1
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b42      	cmp	r3, #66	; 0x42
 800289c:	d101      	bne.n	80028a2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800289e:	2302      	movs	r3, #2
 80028a0:	e04e      	b.n	8002940 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2242      	movs	r2, #66	; 0x42
 80028a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f003 031c 	and.w	r3, r3, #28
 80028b8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8a1b      	ldrh	r3, [r3, #16]
 80028be:	02db      	lsls	r3, r3, #11
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80028c8:	897b      	ldrh	r3, [r7, #10]
 80028ca:	019b      	lsls	r3, r3, #6
 80028cc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f043 0302 	orr.w	r3, r3, #2
 80028dc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80028f8:	f7ff fa36 	bl	8001d68 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80028fe:	e015      	b.n	800292c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002900:	f7ff fa32 	bl	8001d68 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800290e:	d309      	bcc.n	8002924 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e00d      	b.n	8002940 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1e4      	bne.n	8002900 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002956:	2b01      	cmp	r3, #1
 8002958:	d101      	bne.n	800295e <HAL_ETH_Start+0x16>
 800295a:	2302      	movs	r3, #2
 800295c:	e01f      	b.n	800299e <HAL_ETH_Start+0x56>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2202      	movs	r2, #2
 800296a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fb44 	bl	8002ffc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 fb7b 	bl	8003070 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fc12 	bl	80031a4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 fbaf 	bl	80030e4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fbdc 	bl	8003144 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_ETH_Stop+0x16>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e01f      	b.n	80029fc <HAL_ETH_Stop+0x56>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 fba1 	bl	8003114 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fbce 	bl	8003174 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 fb66 	bl	80030aa <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 fbe0 	bl	80031a4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 fb26 	bl	8003036 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_ETH_ConfigMAC+0x1c>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e0e4      	b.n	8002bea <HAL_ETH_ConfigMAC+0x1e6>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 80b1 	beq.w	8002b9a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	4b6c      	ldr	r3, [pc, #432]	; (8002bf4 <HAL_ETH_ConfigMAC+0x1f0>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002a50:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002a56:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002a5c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002a62:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002a68:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002a6e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002a74:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002a7a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002a80:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002a86:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002a8c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002a92:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002aaa:	2001      	movs	r0, #1
 8002aac:	f7ff f968 	bl	8001d80 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002ac0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002ac6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002acc:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002ad2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002ad8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002ade:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002aea:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002aec:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002af6:	2001      	movs	r0, #1
 8002af8:	f7ff f942 	bl	8001d80 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002b0c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b16:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002b26:	4013      	ands	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002b34:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002b3a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002b40:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002b46:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002b4c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b64:	2001      	movs	r0, #1
 8002b66:	f7ff f90b 	bl	8001d80 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f7ff f8f8 	bl	8001d80 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	61da      	str	r2, [r3, #28]
 8002b98:	e01e      	b.n	8002bd8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002ba8:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bca:	2001      	movs	r0, #1
 8002bcc:	f7ff f8d8 	bl	8001d80 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	ff20810f 	.word	0xff20810f

08002bf8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b0b0      	sub	sp, #192	; 0xc0
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d007      	beq.n	8002c1e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c14:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002c22:	2300      	movs	r3, #0
 8002c24:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002c26:	2300      	movs	r3, #0
 8002c28:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d103      	bne.n	8002c46 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c42:	663b      	str	r3, [r7, #96]	; 0x60
 8002c44:	e001      	b.n	8002c4a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002c46:	2300      	movs	r3, #0
 8002c48:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c4e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002c54:	2300      	movs	r3, #0
 8002c56:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002c60:	2300      	movs	r3, #0
 8002c62:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002c64:	2340      	movs	r3, #64	; 0x40
 8002c66:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002c74:	2300      	movs	r3, #0
 8002c76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002c80:	2300      	movs	r3, #0
 8002c82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002ccc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cd0:	4bac      	ldr	r3, [pc, #688]	; (8002f84 <ETH_MACDMAConfig+0x38c>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002cd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002cdc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002ce0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002ce4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002cea:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002cec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002cee:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002cf2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002cf8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002cfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002cfc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002cfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002d00:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002d02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002d04:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002d08:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002d0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002d0c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002d0e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d20:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	f7ff f827 	bl	8001d80 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d3a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002d3c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002d3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002d40:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002d42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002d44:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002d46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002d4a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002d4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002d50:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002d52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002d56:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002d58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002d5c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002d60:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002d68:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002d6a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d76:	2001      	movs	r0, #1
 8002d78:	f7ff f802 	bl	8001d80 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d84:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d8e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002d98:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002da4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002da8:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002dac:	4013      	ands	r3, r2
 8002dae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002db2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002db6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002db8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002dbc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002dbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002dc2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002dc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002dc8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002dca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002dce:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002dd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002dd4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002dd6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002de8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002df4:	2001      	movs	r0, #1
 8002df6:	f7fe ffc3 	bl	8001d80 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e02:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002e04:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002e08:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e1e:	2001      	movs	r0, #1
 8002e20:	f7fe ffae 	bl	8001d80 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e2c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002e32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e36:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002e3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e40:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002e42:	2300      	movs	r3, #0
 8002e44:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002e52:	2304      	movs	r3, #4
 8002e54:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002e56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002e5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e60:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002e62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e66:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002e68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e6c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002e6e:	2380      	movs	r3, #128	; 0x80
 8002e70:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002e76:	2300      	movs	r3, #0
 8002e78:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e82:	3318      	adds	r3, #24
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002e8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e8e:	4b3e      	ldr	r3, [pc, #248]	; (8002f88 <ETH_MACDMAConfig+0x390>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002e96:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002e98:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002e9a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002e9c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002e9e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002ea0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002ea2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002ea4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002ea6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002ea8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002eaa:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002eac:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002eae:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002eb2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002eb6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002eb8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eca:	3318      	adds	r3, #24
 8002ecc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ed0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eda:	3318      	adds	r3, #24
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ee2:	2001      	movs	r0, #1
 8002ee4:	f7fe ff4c 	bl	8001d80 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ef0:	3318      	adds	r3, #24
 8002ef2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ef6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002efc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002f00:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002f04:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002f08:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f0c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002f0e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002f12:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f20:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f30:	2001      	movs	r0, #1
 8002f32:	f7fe ff25 	bl	8001d80 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f3e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f42:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d10f      	bne.n	8002f6c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f54:	331c      	adds	r3, #28
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f68:	331c      	adds	r3, #28
 8002f6a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	461a      	mov	r2, r3
 8002f72:	2100      	movs	r1, #0
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f809 	bl	8002f8c <ETH_MACAddressConfig>
}
 8002f7a:	bf00      	nop
 8002f7c:	37c0      	adds	r7, #192	; 0xc0
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	ff20810f 	.word	0xff20810f
 8002f88:	f8de3f23 	.word	0xf8de3f23

08002f8c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3305      	adds	r3, #5
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	021b      	lsls	r3, r3, #8
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	3204      	adds	r2, #4
 8002fa4:	7812      	ldrb	r2, [r2, #0]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <ETH_MACAddressConfig+0x68>)
 8002fae:	4413      	add	r3, r2
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3303      	adds	r3, #3
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	061a      	lsls	r2, r3, #24
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3302      	adds	r3, #2
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	041b      	lsls	r3, r3, #16
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	021b      	lsls	r3, r3, #8
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	7812      	ldrb	r2, [r2, #0]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <ETH_MACAddressConfig+0x6c>)
 8002fde:	4413      	add	r3, r2
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	6013      	str	r3, [r2, #0]
}
 8002fe6:	bf00      	nop
 8002fe8:	371c      	adds	r7, #28
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	40028040 	.word	0x40028040
 8002ff8:	40028044 	.word	0x40028044

08002ffc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0208 	orr.w	r2, r2, #8
 8003016:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003020:	2001      	movs	r0, #1
 8003022:	f000 f8e9 	bl	80031f8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	601a      	str	r2, [r3, #0]
}
 800302e:	bf00      	nop
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003036:	b580      	push	{r7, lr}
 8003038:	b084      	sub	sp, #16
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0208 	bic.w	r2, r2, #8
 8003050:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800305a:	2001      	movs	r0, #1
 800305c:	f000 f8cc 	bl	80031f8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	601a      	str	r2, [r3, #0]
}
 8003068:	bf00      	nop
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0204 	orr.w	r2, r2, #4
 800308a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003094:	2001      	movs	r0, #1
 8003096:	f000 f8af 	bl	80031f8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	601a      	str	r2, [r3, #0]
}
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0204 	bic.w	r2, r2, #4
 80030c4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80030ce:	2001      	movs	r0, #1
 80030d0:	f000 f892 	bl	80031f8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	601a      	str	r2, [r3, #0]
}
 80030dc:	bf00      	nop
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030f4:	3318      	adds	r3, #24
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003104:	3318      	adds	r3, #24
 8003106:	601a      	str	r2, [r3, #0]
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003124:	3318      	adds	r3, #24
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003134:	3318      	adds	r3, #24
 8003136:	601a      	str	r2, [r3, #0]
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003154:	3318      	adds	r3, #24
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 0202 	orr.w	r2, r2, #2
 8003160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003164:	3318      	adds	r3, #24
 8003166:	601a      	str	r2, [r3, #0]
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003184:	3318      	adds	r3, #24
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0202 	bic.w	r2, r2, #2
 8003190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003194:	3318      	adds	r3, #24
 8003196:	601a      	str	r2, [r3, #0]
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031b8:	3318      	adds	r3, #24
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80031c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031c8:	3318      	adds	r3, #24
 80031ca:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031d4:	3318      	adds	r3, #24
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80031da:	2001      	movs	r0, #1
 80031dc:	f000 f80c 	bl	80031f8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ea:	3318      	adds	r3, #24
 80031ec:	601a      	str	r2, [r3, #0]
}
 80031ee:	bf00      	nop
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003200:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <ETH_Delay+0x38>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a0b      	ldr	r2, [pc, #44]	; (8003234 <ETH_Delay+0x3c>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	0a5b      	lsrs	r3, r3, #9
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	fb02 f303 	mul.w	r3, r2, r3
 8003212:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8003214:	bf00      	nop
  } 
  while (Delay --);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1e5a      	subs	r2, r3, #1
 800321a:	60fa      	str	r2, [r7, #12]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1f9      	bne.n	8003214 <ETH_Delay+0x1c>
}
 8003220:	bf00      	nop
 8003222:	bf00      	nop
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	20000008 	.word	0x20000008
 8003234:	10624dd3 	.word	0x10624dd3

08003238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003238:	b480      	push	{r7}
 800323a:	b089      	sub	sp, #36	; 0x24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003246:	2300      	movs	r3, #0
 8003248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800324a:	2300      	movs	r3, #0
 800324c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800324e:	2300      	movs	r3, #0
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	e177      	b.n	8003544 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003254:	2201      	movs	r2, #1
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	4013      	ands	r3, r2
 8003266:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	429a      	cmp	r2, r3
 800326e:	f040 8166 	bne.w	800353e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	2b01      	cmp	r3, #1
 800327c:	d005      	beq.n	800328a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003286:	2b02      	cmp	r3, #2
 8003288:	d130      	bne.n	80032ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	2203      	movs	r2, #3
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43db      	mvns	r3, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4013      	ands	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032c0:	2201      	movs	r2, #1
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	091b      	lsrs	r3, r3, #4
 80032d6:	f003 0201 	and.w	r2, r3, #1
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	2b03      	cmp	r3, #3
 80032f6:	d017      	beq.n	8003328 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	2203      	movs	r2, #3
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	43db      	mvns	r3, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4013      	ands	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 0303 	and.w	r3, r3, #3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d123      	bne.n	800337c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	08da      	lsrs	r2, r3, #3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3208      	adds	r2, #8
 800333c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003340:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	220f      	movs	r2, #15
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	4013      	ands	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	08da      	lsrs	r2, r3, #3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3208      	adds	r2, #8
 8003376:	69b9      	ldr	r1, [r7, #24]
 8003378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	2203      	movs	r2, #3
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4013      	ands	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 0203 	and.w	r2, r3, #3
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 80c0 	beq.w	800353e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	4b66      	ldr	r3, [pc, #408]	; (800355c <HAL_GPIO_Init+0x324>)
 80033c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c6:	4a65      	ldr	r2, [pc, #404]	; (800355c <HAL_GPIO_Init+0x324>)
 80033c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033cc:	6453      	str	r3, [r2, #68]	; 0x44
 80033ce:	4b63      	ldr	r3, [pc, #396]	; (800355c <HAL_GPIO_Init+0x324>)
 80033d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033da:	4a61      	ldr	r2, [pc, #388]	; (8003560 <HAL_GPIO_Init+0x328>)
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	089b      	lsrs	r3, r3, #2
 80033e0:	3302      	adds	r3, #2
 80033e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	220f      	movs	r2, #15
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43db      	mvns	r3, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4013      	ands	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a58      	ldr	r2, [pc, #352]	; (8003564 <HAL_GPIO_Init+0x32c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d037      	beq.n	8003476 <HAL_GPIO_Init+0x23e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a57      	ldr	r2, [pc, #348]	; (8003568 <HAL_GPIO_Init+0x330>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d031      	beq.n	8003472 <HAL_GPIO_Init+0x23a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a56      	ldr	r2, [pc, #344]	; (800356c <HAL_GPIO_Init+0x334>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d02b      	beq.n	800346e <HAL_GPIO_Init+0x236>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a55      	ldr	r2, [pc, #340]	; (8003570 <HAL_GPIO_Init+0x338>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d025      	beq.n	800346a <HAL_GPIO_Init+0x232>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a54      	ldr	r2, [pc, #336]	; (8003574 <HAL_GPIO_Init+0x33c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d01f      	beq.n	8003466 <HAL_GPIO_Init+0x22e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a53      	ldr	r2, [pc, #332]	; (8003578 <HAL_GPIO_Init+0x340>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d019      	beq.n	8003462 <HAL_GPIO_Init+0x22a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a52      	ldr	r2, [pc, #328]	; (800357c <HAL_GPIO_Init+0x344>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d013      	beq.n	800345e <HAL_GPIO_Init+0x226>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a51      	ldr	r2, [pc, #324]	; (8003580 <HAL_GPIO_Init+0x348>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d00d      	beq.n	800345a <HAL_GPIO_Init+0x222>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a50      	ldr	r2, [pc, #320]	; (8003584 <HAL_GPIO_Init+0x34c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d007      	beq.n	8003456 <HAL_GPIO_Init+0x21e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a4f      	ldr	r2, [pc, #316]	; (8003588 <HAL_GPIO_Init+0x350>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d101      	bne.n	8003452 <HAL_GPIO_Init+0x21a>
 800344e:	2309      	movs	r3, #9
 8003450:	e012      	b.n	8003478 <HAL_GPIO_Init+0x240>
 8003452:	230a      	movs	r3, #10
 8003454:	e010      	b.n	8003478 <HAL_GPIO_Init+0x240>
 8003456:	2308      	movs	r3, #8
 8003458:	e00e      	b.n	8003478 <HAL_GPIO_Init+0x240>
 800345a:	2307      	movs	r3, #7
 800345c:	e00c      	b.n	8003478 <HAL_GPIO_Init+0x240>
 800345e:	2306      	movs	r3, #6
 8003460:	e00a      	b.n	8003478 <HAL_GPIO_Init+0x240>
 8003462:	2305      	movs	r3, #5
 8003464:	e008      	b.n	8003478 <HAL_GPIO_Init+0x240>
 8003466:	2304      	movs	r3, #4
 8003468:	e006      	b.n	8003478 <HAL_GPIO_Init+0x240>
 800346a:	2303      	movs	r3, #3
 800346c:	e004      	b.n	8003478 <HAL_GPIO_Init+0x240>
 800346e:	2302      	movs	r3, #2
 8003470:	e002      	b.n	8003478 <HAL_GPIO_Init+0x240>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <HAL_GPIO_Init+0x240>
 8003476:	2300      	movs	r3, #0
 8003478:	69fa      	ldr	r2, [r7, #28]
 800347a:	f002 0203 	and.w	r2, r2, #3
 800347e:	0092      	lsls	r2, r2, #2
 8003480:	4093      	lsls	r3, r2
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4313      	orrs	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003488:	4935      	ldr	r1, [pc, #212]	; (8003560 <HAL_GPIO_Init+0x328>)
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	089b      	lsrs	r3, r3, #2
 800348e:	3302      	adds	r3, #2
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003496:	4b3d      	ldr	r3, [pc, #244]	; (800358c <HAL_GPIO_Init+0x354>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	43db      	mvns	r3, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4013      	ands	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034ba:	4a34      	ldr	r2, [pc, #208]	; (800358c <HAL_GPIO_Init+0x354>)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034c0:	4b32      	ldr	r3, [pc, #200]	; (800358c <HAL_GPIO_Init+0x354>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034e4:	4a29      	ldr	r2, [pc, #164]	; (800358c <HAL_GPIO_Init+0x354>)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034ea:	4b28      	ldr	r3, [pc, #160]	; (800358c <HAL_GPIO_Init+0x354>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	43db      	mvns	r3, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4013      	ands	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800350e:	4a1f      	ldr	r2, [pc, #124]	; (800358c <HAL_GPIO_Init+0x354>)
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003514:	4b1d      	ldr	r3, [pc, #116]	; (800358c <HAL_GPIO_Init+0x354>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	43db      	mvns	r3, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4013      	ands	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003538:	4a14      	ldr	r2, [pc, #80]	; (800358c <HAL_GPIO_Init+0x354>)
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3301      	adds	r3, #1
 8003542:	61fb      	str	r3, [r7, #28]
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	2b0f      	cmp	r3, #15
 8003548:	f67f ae84 	bls.w	8003254 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800354c:	bf00      	nop
 800354e:	bf00      	nop
 8003550:	3724      	adds	r7, #36	; 0x24
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800
 8003560:	40013800 	.word	0x40013800
 8003564:	40020000 	.word	0x40020000
 8003568:	40020400 	.word	0x40020400
 800356c:	40020800 	.word	0x40020800
 8003570:	40020c00 	.word	0x40020c00
 8003574:	40021000 	.word	0x40021000
 8003578:	40021400 	.word	0x40021400
 800357c:	40021800 	.word	0x40021800
 8003580:	40021c00 	.word	0x40021c00
 8003584:	40022000 	.word	0x40022000
 8003588:	40022400 	.word	0x40022400
 800358c:	40013c00 	.word	0x40013c00

08003590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	807b      	strh	r3, [r7, #2]
 800359c:	4613      	mov	r3, r2
 800359e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035a0:	787b      	ldrb	r3, [r7, #1]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035a6:	887a      	ldrh	r2, [r7, #2]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035ac:	e003      	b.n	80035b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035ae:	887b      	ldrh	r3, [r7, #2]
 80035b0:	041a      	lsls	r2, r3, #16
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	619a      	str	r2, [r3, #24]
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
	...

080035c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80035ce:	4b08      	ldr	r3, [pc, #32]	; (80035f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035d0:	695a      	ldr	r2, [r3, #20]
 80035d2:	88fb      	ldrh	r3, [r7, #6]
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d006      	beq.n	80035e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035da:	4a05      	ldr	r2, [pc, #20]	; (80035f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035dc:	88fb      	ldrh	r3, [r7, #6]
 80035de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035e0:	88fb      	ldrh	r3, [r7, #6]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fe fafa 	bl	8001bdc <HAL_GPIO_EXTI_Callback>
  }
}
 80035e8:	bf00      	nop
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40013c00 	.word	0x40013c00

080035f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e264      	b.n	8003ad0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d075      	beq.n	80036fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003612:	4ba3      	ldr	r3, [pc, #652]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 030c 	and.w	r3, r3, #12
 800361a:	2b04      	cmp	r3, #4
 800361c:	d00c      	beq.n	8003638 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800361e:	4ba0      	ldr	r3, [pc, #640]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003626:	2b08      	cmp	r3, #8
 8003628:	d112      	bne.n	8003650 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800362a:	4b9d      	ldr	r3, [pc, #628]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003632:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003636:	d10b      	bne.n	8003650 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003638:	4b99      	ldr	r3, [pc, #612]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d05b      	beq.n	80036fc <HAL_RCC_OscConfig+0x108>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d157      	bne.n	80036fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e23f      	b.n	8003ad0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003658:	d106      	bne.n	8003668 <HAL_RCC_OscConfig+0x74>
 800365a:	4b91      	ldr	r3, [pc, #580]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a90      	ldr	r2, [pc, #576]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	e01d      	b.n	80036a4 <HAL_RCC_OscConfig+0xb0>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003670:	d10c      	bne.n	800368c <HAL_RCC_OscConfig+0x98>
 8003672:	4b8b      	ldr	r3, [pc, #556]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a8a      	ldr	r2, [pc, #552]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	4b88      	ldr	r3, [pc, #544]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a87      	ldr	r2, [pc, #540]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	e00b      	b.n	80036a4 <HAL_RCC_OscConfig+0xb0>
 800368c:	4b84      	ldr	r3, [pc, #528]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a83      	ldr	r2, [pc, #524]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	4b81      	ldr	r3, [pc, #516]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a80      	ldr	r2, [pc, #512]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 800369e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d013      	beq.n	80036d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ac:	f7fe fb5c 	bl	8001d68 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036b4:	f7fe fb58 	bl	8001d68 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b64      	cmp	r3, #100	; 0x64
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e204      	b.n	8003ad0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c6:	4b76      	ldr	r3, [pc, #472]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0f0      	beq.n	80036b4 <HAL_RCC_OscConfig+0xc0>
 80036d2:	e014      	b.n	80036fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d4:	f7fe fb48 	bl	8001d68 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036dc:	f7fe fb44 	bl	8001d68 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b64      	cmp	r3, #100	; 0x64
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e1f0      	b.n	8003ad0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ee:	4b6c      	ldr	r3, [pc, #432]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0xe8>
 80036fa:	e000      	b.n	80036fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d063      	beq.n	80037d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800370a:	4b65      	ldr	r3, [pc, #404]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 030c 	and.w	r3, r3, #12
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00b      	beq.n	800372e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003716:	4b62      	ldr	r3, [pc, #392]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800371e:	2b08      	cmp	r3, #8
 8003720:	d11c      	bne.n	800375c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003722:	4b5f      	ldr	r3, [pc, #380]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d116      	bne.n	800375c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800372e:	4b5c      	ldr	r3, [pc, #368]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d005      	beq.n	8003746 <HAL_RCC_OscConfig+0x152>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d001      	beq.n	8003746 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e1c4      	b.n	8003ad0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003746:	4b56      	ldr	r3, [pc, #344]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4952      	ldr	r1, [pc, #328]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003756:	4313      	orrs	r3, r2
 8003758:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375a:	e03a      	b.n	80037d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d020      	beq.n	80037a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003764:	4b4f      	ldr	r3, [pc, #316]	; (80038a4 <HAL_RCC_OscConfig+0x2b0>)
 8003766:	2201      	movs	r2, #1
 8003768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376a:	f7fe fafd 	bl	8001d68 <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003772:	f7fe faf9 	bl	8001d68 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e1a5      	b.n	8003ad0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003784:	4b46      	ldr	r3, [pc, #280]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0f0      	beq.n	8003772 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003790:	4b43      	ldr	r3, [pc, #268]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	4940      	ldr	r1, [pc, #256]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	600b      	str	r3, [r1, #0]
 80037a4:	e015      	b.n	80037d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037a6:	4b3f      	ldr	r3, [pc, #252]	; (80038a4 <HAL_RCC_OscConfig+0x2b0>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fe fadc 	bl	8001d68 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037b4:	f7fe fad8 	bl	8001d68 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e184      	b.n	8003ad0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037c6:	4b36      	ldr	r3, [pc, #216]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d030      	beq.n	8003840 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d016      	beq.n	8003814 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037e6:	4b30      	ldr	r3, [pc, #192]	; (80038a8 <HAL_RCC_OscConfig+0x2b4>)
 80037e8:	2201      	movs	r2, #1
 80037ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ec:	f7fe fabc 	bl	8001d68 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037f4:	f7fe fab8 	bl	8001d68 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e164      	b.n	8003ad0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003806:	4b26      	ldr	r3, [pc, #152]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f0      	beq.n	80037f4 <HAL_RCC_OscConfig+0x200>
 8003812:	e015      	b.n	8003840 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003814:	4b24      	ldr	r3, [pc, #144]	; (80038a8 <HAL_RCC_OscConfig+0x2b4>)
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381a:	f7fe faa5 	bl	8001d68 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003822:	f7fe faa1 	bl	8001d68 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e14d      	b.n	8003ad0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003834:	4b1a      	ldr	r3, [pc, #104]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1f0      	bne.n	8003822 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 80a0 	beq.w	800398e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800384e:	2300      	movs	r3, #0
 8003850:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003852:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10f      	bne.n	800387e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	4b0f      	ldr	r3, [pc, #60]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	4a0e      	ldr	r2, [pc, #56]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800386c:	6413      	str	r3, [r2, #64]	; 0x40
 800386e:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800387a:	2301      	movs	r3, #1
 800387c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800387e:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <HAL_RCC_OscConfig+0x2b8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003886:	2b00      	cmp	r3, #0
 8003888:	d121      	bne.n	80038ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800388a:	4b08      	ldr	r3, [pc, #32]	; (80038ac <HAL_RCC_OscConfig+0x2b8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a07      	ldr	r2, [pc, #28]	; (80038ac <HAL_RCC_OscConfig+0x2b8>)
 8003890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003896:	f7fe fa67 	bl	8001d68 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389c:	e011      	b.n	80038c2 <HAL_RCC_OscConfig+0x2ce>
 800389e:	bf00      	nop
 80038a0:	40023800 	.word	0x40023800
 80038a4:	42470000 	.word	0x42470000
 80038a8:	42470e80 	.word	0x42470e80
 80038ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b0:	f7fe fa5a 	bl	8001d68 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e106      	b.n	8003ad0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c2:	4b85      	ldr	r3, [pc, #532]	; (8003ad8 <HAL_RCC_OscConfig+0x4e4>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d106      	bne.n	80038e4 <HAL_RCC_OscConfig+0x2f0>
 80038d6:	4b81      	ldr	r3, [pc, #516]	; (8003adc <HAL_RCC_OscConfig+0x4e8>)
 80038d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038da:	4a80      	ldr	r2, [pc, #512]	; (8003adc <HAL_RCC_OscConfig+0x4e8>)
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	6713      	str	r3, [r2, #112]	; 0x70
 80038e2:	e01c      	b.n	800391e <HAL_RCC_OscConfig+0x32a>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2b05      	cmp	r3, #5
 80038ea:	d10c      	bne.n	8003906 <HAL_RCC_OscConfig+0x312>
 80038ec:	4b7b      	ldr	r3, [pc, #492]	; (8003adc <HAL_RCC_OscConfig+0x4e8>)
 80038ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f0:	4a7a      	ldr	r2, [pc, #488]	; (8003adc <HAL_RCC_OscConfig+0x4e8>)
 80038f2:	f043 0304 	orr.w	r3, r3, #4
 80038f6:	6713      	str	r3, [r2, #112]	; 0x70
 80038f8:	4b78      	ldr	r3, [pc, #480]	; (8003adc <HAL_RCC_OscConfig+0x4e8>)
 80038fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fc:	4a77      	ldr	r2, [pc, #476]	; (8003adc <HAL_RCC_OscConfig+0x4e8>)
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	6713      	str	r3, [r2, #112]	; 0x70
 8003904:	e00b      	b.n	800391e <HAL_RCC_OscConfig+0x32a>
 8003906:	4b75      	ldr	r3, [pc, #468]	; (8003adc <HAL_RCC_OscConfig+0x4e8>)
 8003908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390a:	4a74      	ldr	r2, [pc, #464]	; (8003adc <HAL_RCC_OscConfig+0x4e8>)
 800390c:	f023 0301 	bic.w	r3, r3, #1
 8003910:	6713      	str	r3, [r2, #112]	; 0x70
 8003912:	4b72      	ldr	r3, [pc, #456]	; (8003adc <HAL_RCC_OscConfig+0x4e8>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003916:	4a71      	ldr	r2, [pc, #452]	; (8003adc <HAL_RCC_OscConfig+0x4e8>)
 8003918:	f023 0304 	bic.w	r3, r3, #4
 800391c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d015      	beq.n	8003952 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003926:	f7fe fa1f 	bl	8001d68 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800392c:	e00a      	b.n	8003944 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800392e:	f7fe fa1b 	bl	8001d68 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	f241 3288 	movw	r2, #5000	; 0x1388
 800393c:	4293      	cmp	r3, r2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e0c5      	b.n	8003ad0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003944:	4b65      	ldr	r3, [pc, #404]	; (8003adc <HAL_RCC_OscConfig+0x4e8>)
 8003946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0ee      	beq.n	800392e <HAL_RCC_OscConfig+0x33a>
 8003950:	e014      	b.n	800397c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003952:	f7fe fa09 	bl	8001d68 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003958:	e00a      	b.n	8003970 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800395a:	f7fe fa05 	bl	8001d68 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	f241 3288 	movw	r2, #5000	; 0x1388
 8003968:	4293      	cmp	r3, r2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e0af      	b.n	8003ad0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003970:	4b5a      	ldr	r3, [pc, #360]	; (8003adc <HAL_RCC_OscConfig+0x4e8>)
 8003972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1ee      	bne.n	800395a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800397c:	7dfb      	ldrb	r3, [r7, #23]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d105      	bne.n	800398e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003982:	4b56      	ldr	r3, [pc, #344]	; (8003adc <HAL_RCC_OscConfig+0x4e8>)
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	4a55      	ldr	r2, [pc, #340]	; (8003adc <HAL_RCC_OscConfig+0x4e8>)
 8003988:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800398c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 809b 	beq.w	8003ace <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003998:	4b50      	ldr	r3, [pc, #320]	; (8003adc <HAL_RCC_OscConfig+0x4e8>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 030c 	and.w	r3, r3, #12
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d05c      	beq.n	8003a5e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d141      	bne.n	8003a30 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ac:	4b4c      	ldr	r3, [pc, #304]	; (8003ae0 <HAL_RCC_OscConfig+0x4ec>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b2:	f7fe f9d9 	bl	8001d68 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ba:	f7fe f9d5 	bl	8001d68 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e081      	b.n	8003ad0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039cc:	4b43      	ldr	r3, [pc, #268]	; (8003adc <HAL_RCC_OscConfig+0x4e8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1f0      	bne.n	80039ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69da      	ldr	r2, [r3, #28]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	019b      	lsls	r3, r3, #6
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ee:	085b      	lsrs	r3, r3, #1
 80039f0:	3b01      	subs	r3, #1
 80039f2:	041b      	lsls	r3, r3, #16
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fa:	061b      	lsls	r3, r3, #24
 80039fc:	4937      	ldr	r1, [pc, #220]	; (8003adc <HAL_RCC_OscConfig+0x4e8>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a02:	4b37      	ldr	r3, [pc, #220]	; (8003ae0 <HAL_RCC_OscConfig+0x4ec>)
 8003a04:	2201      	movs	r2, #1
 8003a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a08:	f7fe f9ae 	bl	8001d68 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a10:	f7fe f9aa 	bl	8001d68 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e056      	b.n	8003ad0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a22:	4b2e      	ldr	r3, [pc, #184]	; (8003adc <HAL_RCC_OscConfig+0x4e8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0x41c>
 8003a2e:	e04e      	b.n	8003ace <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a30:	4b2b      	ldr	r3, [pc, #172]	; (8003ae0 <HAL_RCC_OscConfig+0x4ec>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a36:	f7fe f997 	bl	8001d68 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a3e:	f7fe f993 	bl	8001d68 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e03f      	b.n	8003ad0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a50:	4b22      	ldr	r3, [pc, #136]	; (8003adc <HAL_RCC_OscConfig+0x4e8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1f0      	bne.n	8003a3e <HAL_RCC_OscConfig+0x44a>
 8003a5c:	e037      	b.n	8003ace <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e032      	b.n	8003ad0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a6a:	4b1c      	ldr	r3, [pc, #112]	; (8003adc <HAL_RCC_OscConfig+0x4e8>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d028      	beq.n	8003aca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d121      	bne.n	8003aca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d11a      	bne.n	8003aca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003aa0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d111      	bne.n	8003aca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab0:	085b      	lsrs	r3, r3, #1
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d107      	bne.n	8003aca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d001      	beq.n	8003ace <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e000      	b.n	8003ad0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3718      	adds	r7, #24
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40007000 	.word	0x40007000
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	42470060 	.word	0x42470060

08003ae4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e0cc      	b.n	8003c92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003af8:	4b68      	ldr	r3, [pc, #416]	; (8003c9c <HAL_RCC_ClockConfig+0x1b8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 030f 	and.w	r3, r3, #15
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d90c      	bls.n	8003b20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b06:	4b65      	ldr	r3, [pc, #404]	; (8003c9c <HAL_RCC_ClockConfig+0x1b8>)
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0e:	4b63      	ldr	r3, [pc, #396]	; (8003c9c <HAL_RCC_ClockConfig+0x1b8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d001      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e0b8      	b.n	8003c92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d020      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b38:	4b59      	ldr	r3, [pc, #356]	; (8003ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	4a58      	ldr	r2, [pc, #352]	; (8003ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d005      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b50:	4b53      	ldr	r3, [pc, #332]	; (8003ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	4a52      	ldr	r2, [pc, #328]	; (8003ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b5c:	4b50      	ldr	r3, [pc, #320]	; (8003ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	494d      	ldr	r1, [pc, #308]	; (8003ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d044      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d107      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b82:	4b47      	ldr	r3, [pc, #284]	; (8003ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d119      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e07f      	b.n	8003c92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d003      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b9e:	2b03      	cmp	r3, #3
 8003ba0:	d107      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba2:	4b3f      	ldr	r3, [pc, #252]	; (8003ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d109      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e06f      	b.n	8003c92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb2:	4b3b      	ldr	r3, [pc, #236]	; (8003ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e067      	b.n	8003c92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bc2:	4b37      	ldr	r3, [pc, #220]	; (8003ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f023 0203 	bic.w	r2, r3, #3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	4934      	ldr	r1, [pc, #208]	; (8003ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bd4:	f7fe f8c8 	bl	8001d68 <HAL_GetTick>
 8003bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bda:	e00a      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bdc:	f7fe f8c4 	bl	8001d68 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e04f      	b.n	8003c92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf2:	4b2b      	ldr	r3, [pc, #172]	; (8003ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 020c 	and.w	r2, r3, #12
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d1eb      	bne.n	8003bdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c04:	4b25      	ldr	r3, [pc, #148]	; (8003c9c <HAL_RCC_ClockConfig+0x1b8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 030f 	and.w	r3, r3, #15
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d20c      	bcs.n	8003c2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c12:	4b22      	ldr	r3, [pc, #136]	; (8003c9c <HAL_RCC_ClockConfig+0x1b8>)
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1a:	4b20      	ldr	r3, [pc, #128]	; (8003c9c <HAL_RCC_ClockConfig+0x1b8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d001      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e032      	b.n	8003c92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d008      	beq.n	8003c4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c38:	4b19      	ldr	r3, [pc, #100]	; (8003ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	4916      	ldr	r1, [pc, #88]	; (8003ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0308 	and.w	r3, r3, #8
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d009      	beq.n	8003c6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c56:	4b12      	ldr	r3, [pc, #72]	; (8003ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	490e      	ldr	r1, [pc, #56]	; (8003ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c6a:	f000 f821 	bl	8003cb0 <HAL_RCC_GetSysClockFreq>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	091b      	lsrs	r3, r3, #4
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	490a      	ldr	r1, [pc, #40]	; (8003ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c7c:	5ccb      	ldrb	r3, [r1, r3]
 8003c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c82:	4a09      	ldr	r2, [pc, #36]	; (8003ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c86:	4b09      	ldr	r3, [pc, #36]	; (8003cac <HAL_RCC_ClockConfig+0x1c8>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fe f828 	bl	8001ce0 <HAL_InitTick>

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40023c00 	.word	0x40023c00
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	08013be4 	.word	0x08013be4
 8003ca8:	20000008 	.word	0x20000008
 8003cac:	20000010 	.word	0x20000010

08003cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003cb4:	b084      	sub	sp, #16
 8003cb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	607b      	str	r3, [r7, #4]
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cc8:	4b67      	ldr	r3, [pc, #412]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 030c 	and.w	r3, r3, #12
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d00d      	beq.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x40>
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	f200 80bd 	bhi.w	8003e54 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x34>
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d003      	beq.n	8003cea <HAL_RCC_GetSysClockFreq+0x3a>
 8003ce2:	e0b7      	b.n	8003e54 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ce4:	4b61      	ldr	r3, [pc, #388]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ce6:	60bb      	str	r3, [r7, #8]
       break;
 8003ce8:	e0b7      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cea:	4b61      	ldr	r3, [pc, #388]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003cec:	60bb      	str	r3, [r7, #8]
      break;
 8003cee:	e0b4      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cf0:	4b5d      	ldr	r3, [pc, #372]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cf8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cfa:	4b5b      	ldr	r3, [pc, #364]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d04d      	beq.n	8003da2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d06:	4b58      	ldr	r3, [pc, #352]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	099b      	lsrs	r3, r3, #6
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d16:	f04f 0100 	mov.w	r1, #0
 8003d1a:	ea02 0800 	and.w	r8, r2, r0
 8003d1e:	ea03 0901 	and.w	r9, r3, r1
 8003d22:	4640      	mov	r0, r8
 8003d24:	4649      	mov	r1, r9
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	f04f 0300 	mov.w	r3, #0
 8003d2e:	014b      	lsls	r3, r1, #5
 8003d30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d34:	0142      	lsls	r2, r0, #5
 8003d36:	4610      	mov	r0, r2
 8003d38:	4619      	mov	r1, r3
 8003d3a:	ebb0 0008 	subs.w	r0, r0, r8
 8003d3e:	eb61 0109 	sbc.w	r1, r1, r9
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	018b      	lsls	r3, r1, #6
 8003d4c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d50:	0182      	lsls	r2, r0, #6
 8003d52:	1a12      	subs	r2, r2, r0
 8003d54:	eb63 0301 	sbc.w	r3, r3, r1
 8003d58:	f04f 0000 	mov.w	r0, #0
 8003d5c:	f04f 0100 	mov.w	r1, #0
 8003d60:	00d9      	lsls	r1, r3, #3
 8003d62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d66:	00d0      	lsls	r0, r2, #3
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	eb12 0208 	adds.w	r2, r2, r8
 8003d70:	eb43 0309 	adc.w	r3, r3, r9
 8003d74:	f04f 0000 	mov.w	r0, #0
 8003d78:	f04f 0100 	mov.w	r1, #0
 8003d7c:	0259      	lsls	r1, r3, #9
 8003d7e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003d82:	0250      	lsls	r0, r2, #9
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4610      	mov	r0, r2
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	f7fc fa94 	bl	80002c0 <__aeabi_uldivmod>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	e04a      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da2:	4b31      	ldr	r3, [pc, #196]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	099b      	lsrs	r3, r3, #6
 8003da8:	461a      	mov	r2, r3
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003db2:	f04f 0100 	mov.w	r1, #0
 8003db6:	ea02 0400 	and.w	r4, r2, r0
 8003dba:	ea03 0501 	and.w	r5, r3, r1
 8003dbe:	4620      	mov	r0, r4
 8003dc0:	4629      	mov	r1, r5
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	f04f 0300 	mov.w	r3, #0
 8003dca:	014b      	lsls	r3, r1, #5
 8003dcc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003dd0:	0142      	lsls	r2, r0, #5
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	1b00      	subs	r0, r0, r4
 8003dd8:	eb61 0105 	sbc.w	r1, r1, r5
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	018b      	lsls	r3, r1, #6
 8003de6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003dea:	0182      	lsls	r2, r0, #6
 8003dec:	1a12      	subs	r2, r2, r0
 8003dee:	eb63 0301 	sbc.w	r3, r3, r1
 8003df2:	f04f 0000 	mov.w	r0, #0
 8003df6:	f04f 0100 	mov.w	r1, #0
 8003dfa:	00d9      	lsls	r1, r3, #3
 8003dfc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e00:	00d0      	lsls	r0, r2, #3
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	1912      	adds	r2, r2, r4
 8003e08:	eb45 0303 	adc.w	r3, r5, r3
 8003e0c:	f04f 0000 	mov.w	r0, #0
 8003e10:	f04f 0100 	mov.w	r1, #0
 8003e14:	0299      	lsls	r1, r3, #10
 8003e16:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e1a:	0290      	lsls	r0, r2, #10
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4610      	mov	r0, r2
 8003e22:	4619      	mov	r1, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	461a      	mov	r2, r3
 8003e28:	f04f 0300 	mov.w	r3, #0
 8003e2c:	f7fc fa48 	bl	80002c0 <__aeabi_uldivmod>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	4613      	mov	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e38:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	0c1b      	lsrs	r3, r3, #16
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	3301      	adds	r3, #1
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e50:	60bb      	str	r3, [r7, #8]
      break;
 8003e52:	e002      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e54:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e56:	60bb      	str	r3, [r7, #8]
      break;
 8003e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003e66:	bf00      	nop
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	00f42400 	.word	0x00f42400
 8003e70:	007a1200 	.word	0x007a1200

08003e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e78:	4b03      	ldr	r3, [pc, #12]	; (8003e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	20000008 	.word	0x20000008

08003e8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e041      	b.n	8003f22 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d106      	bne.n	8003eb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fc ff2e 	bl	8000d14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4610      	mov	r0, r2
 8003ecc:	f000 faf2 	bl	80044b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d109      	bne.n	8003f50 <HAL_TIM_PWM_Start+0x24>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	bf14      	ite	ne
 8003f48:	2301      	movne	r3, #1
 8003f4a:	2300      	moveq	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	e022      	b.n	8003f96 <HAL_TIM_PWM_Start+0x6a>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d109      	bne.n	8003f6a <HAL_TIM_PWM_Start+0x3e>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	bf14      	ite	ne
 8003f62:	2301      	movne	r3, #1
 8003f64:	2300      	moveq	r3, #0
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	e015      	b.n	8003f96 <HAL_TIM_PWM_Start+0x6a>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d109      	bne.n	8003f84 <HAL_TIM_PWM_Start+0x58>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	bf14      	ite	ne
 8003f7c:	2301      	movne	r3, #1
 8003f7e:	2300      	moveq	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	e008      	b.n	8003f96 <HAL_TIM_PWM_Start+0x6a>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	bf14      	ite	ne
 8003f90:	2301      	movne	r3, #1
 8003f92:	2300      	moveq	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e07c      	b.n	8004098 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d104      	bne.n	8003fae <HAL_TIM_PWM_Start+0x82>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fac:	e013      	b.n	8003fd6 <HAL_TIM_PWM_Start+0xaa>
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d104      	bne.n	8003fbe <HAL_TIM_PWM_Start+0x92>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fbc:	e00b      	b.n	8003fd6 <HAL_TIM_PWM_Start+0xaa>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d104      	bne.n	8003fce <HAL_TIM_PWM_Start+0xa2>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fcc:	e003      	b.n	8003fd6 <HAL_TIM_PWM_Start+0xaa>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	6839      	ldr	r1, [r7, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fcb8 	bl	8004954 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a2d      	ldr	r2, [pc, #180]	; (80040a0 <HAL_TIM_PWM_Start+0x174>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d004      	beq.n	8003ff8 <HAL_TIM_PWM_Start+0xcc>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a2c      	ldr	r2, [pc, #176]	; (80040a4 <HAL_TIM_PWM_Start+0x178>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d101      	bne.n	8003ffc <HAL_TIM_PWM_Start+0xd0>
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <HAL_TIM_PWM_Start+0xd2>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d007      	beq.n	8004012 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004010:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a22      	ldr	r2, [pc, #136]	; (80040a0 <HAL_TIM_PWM_Start+0x174>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d022      	beq.n	8004062 <HAL_TIM_PWM_Start+0x136>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004024:	d01d      	beq.n	8004062 <HAL_TIM_PWM_Start+0x136>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a1f      	ldr	r2, [pc, #124]	; (80040a8 <HAL_TIM_PWM_Start+0x17c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d018      	beq.n	8004062 <HAL_TIM_PWM_Start+0x136>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a1d      	ldr	r2, [pc, #116]	; (80040ac <HAL_TIM_PWM_Start+0x180>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d013      	beq.n	8004062 <HAL_TIM_PWM_Start+0x136>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a1c      	ldr	r2, [pc, #112]	; (80040b0 <HAL_TIM_PWM_Start+0x184>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d00e      	beq.n	8004062 <HAL_TIM_PWM_Start+0x136>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a16      	ldr	r2, [pc, #88]	; (80040a4 <HAL_TIM_PWM_Start+0x178>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d009      	beq.n	8004062 <HAL_TIM_PWM_Start+0x136>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a18      	ldr	r2, [pc, #96]	; (80040b4 <HAL_TIM_PWM_Start+0x188>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d004      	beq.n	8004062 <HAL_TIM_PWM_Start+0x136>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a16      	ldr	r2, [pc, #88]	; (80040b8 <HAL_TIM_PWM_Start+0x18c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d111      	bne.n	8004086 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2b06      	cmp	r3, #6
 8004072:	d010      	beq.n	8004096 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0201 	orr.w	r2, r2, #1
 8004082:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004084:	e007      	b.n	8004096 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f042 0201 	orr.w	r2, r2, #1
 8004094:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40010000 	.word	0x40010000
 80040a4:	40010400 	.word	0x40010400
 80040a8:	40000400 	.word	0x40000400
 80040ac:	40000800 	.word	0x40000800
 80040b0:	40000c00 	.word	0x40000c00
 80040b4:	40014000 	.word	0x40014000
 80040b8:	40001800 	.word	0x40001800

080040bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d122      	bne.n	8004118 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d11b      	bne.n	8004118 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f06f 0202 	mvn.w	r2, #2
 80040e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f9ba 	bl	8004478 <HAL_TIM_IC_CaptureCallback>
 8004104:	e005      	b.n	8004112 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f9ac 	bl	8004464 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f9bd 	bl	800448c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f003 0304 	and.w	r3, r3, #4
 8004122:	2b04      	cmp	r3, #4
 8004124:	d122      	bne.n	800416c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b04      	cmp	r3, #4
 8004132:	d11b      	bne.n	800416c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0204 	mvn.w	r2, #4
 800413c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2202      	movs	r2, #2
 8004142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f990 	bl	8004478 <HAL_TIM_IC_CaptureCallback>
 8004158:	e005      	b.n	8004166 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f982 	bl	8004464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f993 	bl	800448c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f003 0308 	and.w	r3, r3, #8
 8004176:	2b08      	cmp	r3, #8
 8004178:	d122      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b08      	cmp	r3, #8
 8004186:	d11b      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0208 	mvn.w	r2, #8
 8004190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2204      	movs	r2, #4
 8004196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f966 	bl	8004478 <HAL_TIM_IC_CaptureCallback>
 80041ac:	e005      	b.n	80041ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f958 	bl	8004464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f969 	bl	800448c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 0310 	and.w	r3, r3, #16
 80041ca:	2b10      	cmp	r3, #16
 80041cc:	d122      	bne.n	8004214 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	2b10      	cmp	r3, #16
 80041da:	d11b      	bne.n	8004214 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f06f 0210 	mvn.w	r2, #16
 80041e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2208      	movs	r2, #8
 80041ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f93c 	bl	8004478 <HAL_TIM_IC_CaptureCallback>
 8004200:	e005      	b.n	800420e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f92e 	bl	8004464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f93f 	bl	800448c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b01      	cmp	r3, #1
 8004220:	d10e      	bne.n	8004240 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b01      	cmp	r3, #1
 800422e:	d107      	bne.n	8004240 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f06f 0201 	mvn.w	r2, #1
 8004238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f908 	bl	8004450 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800424a:	2b80      	cmp	r3, #128	; 0x80
 800424c:	d10e      	bne.n	800426c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004258:	2b80      	cmp	r3, #128	; 0x80
 800425a:	d107      	bne.n	800426c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 fc20 	bl	8004aac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004276:	2b40      	cmp	r3, #64	; 0x40
 8004278:	d10e      	bne.n	8004298 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004284:	2b40      	cmp	r3, #64	; 0x40
 8004286:	d107      	bne.n	8004298 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f904 	bl	80044a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f003 0320 	and.w	r3, r3, #32
 80042a2:	2b20      	cmp	r3, #32
 80042a4:	d10e      	bne.n	80042c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f003 0320 	and.w	r3, r3, #32
 80042b0:	2b20      	cmp	r3, #32
 80042b2:	d107      	bne.n	80042c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f06f 0220 	mvn.w	r2, #32
 80042bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 fbea 	bl	8004a98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042c4:	bf00      	nop
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d101      	bne.n	80042ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042e6:	2302      	movs	r3, #2
 80042e8:	e0ae      	b.n	8004448 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b0c      	cmp	r3, #12
 80042f6:	f200 809f 	bhi.w	8004438 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80042fa:	a201      	add	r2, pc, #4	; (adr r2, 8004300 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004300:	08004335 	.word	0x08004335
 8004304:	08004439 	.word	0x08004439
 8004308:	08004439 	.word	0x08004439
 800430c:	08004439 	.word	0x08004439
 8004310:	08004375 	.word	0x08004375
 8004314:	08004439 	.word	0x08004439
 8004318:	08004439 	.word	0x08004439
 800431c:	08004439 	.word	0x08004439
 8004320:	080043b7 	.word	0x080043b7
 8004324:	08004439 	.word	0x08004439
 8004328:	08004439 	.word	0x08004439
 800432c:	08004439 	.word	0x08004439
 8004330:	080043f7 	.word	0x080043f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68b9      	ldr	r1, [r7, #8]
 800433a:	4618      	mov	r0, r3
 800433c:	f000 f95a 	bl	80045f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699a      	ldr	r2, [r3, #24]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0208 	orr.w	r2, r2, #8
 800434e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699a      	ldr	r2, [r3, #24]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0204 	bic.w	r2, r2, #4
 800435e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6999      	ldr	r1, [r3, #24]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	691a      	ldr	r2, [r3, #16]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	619a      	str	r2, [r3, #24]
      break;
 8004372:	e064      	b.n	800443e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68b9      	ldr	r1, [r7, #8]
 800437a:	4618      	mov	r0, r3
 800437c:	f000 f9aa 	bl	80046d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699a      	ldr	r2, [r3, #24]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800438e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699a      	ldr	r2, [r3, #24]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800439e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6999      	ldr	r1, [r3, #24]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	021a      	lsls	r2, r3, #8
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	619a      	str	r2, [r3, #24]
      break;
 80043b4:	e043      	b.n	800443e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68b9      	ldr	r1, [r7, #8]
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 f9ff 	bl	80047c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69da      	ldr	r2, [r3, #28]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0208 	orr.w	r2, r2, #8
 80043d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	69da      	ldr	r2, [r3, #28]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0204 	bic.w	r2, r2, #4
 80043e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	69d9      	ldr	r1, [r3, #28]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	61da      	str	r2, [r3, #28]
      break;
 80043f4:	e023      	b.n	800443e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68b9      	ldr	r1, [r7, #8]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 fa53 	bl	80048a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69da      	ldr	r2, [r3, #28]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004410:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	69da      	ldr	r2, [r3, #28]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004420:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	69d9      	ldr	r1, [r3, #28]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	021a      	lsls	r2, r3, #8
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	61da      	str	r2, [r3, #28]
      break;
 8004436:	e002      	b.n	800443e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	75fb      	strb	r3, [r7, #23]
      break;
 800443c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004446:	7dfb      	ldrb	r3, [r7, #23]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a40      	ldr	r2, [pc, #256]	; (80045c8 <TIM_Base_SetConfig+0x114>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d013      	beq.n	80044f4 <TIM_Base_SetConfig+0x40>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d2:	d00f      	beq.n	80044f4 <TIM_Base_SetConfig+0x40>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a3d      	ldr	r2, [pc, #244]	; (80045cc <TIM_Base_SetConfig+0x118>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d00b      	beq.n	80044f4 <TIM_Base_SetConfig+0x40>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a3c      	ldr	r2, [pc, #240]	; (80045d0 <TIM_Base_SetConfig+0x11c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d007      	beq.n	80044f4 <TIM_Base_SetConfig+0x40>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a3b      	ldr	r2, [pc, #236]	; (80045d4 <TIM_Base_SetConfig+0x120>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d003      	beq.n	80044f4 <TIM_Base_SetConfig+0x40>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a3a      	ldr	r2, [pc, #232]	; (80045d8 <TIM_Base_SetConfig+0x124>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d108      	bne.n	8004506 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	4313      	orrs	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a2f      	ldr	r2, [pc, #188]	; (80045c8 <TIM_Base_SetConfig+0x114>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d02b      	beq.n	8004566 <TIM_Base_SetConfig+0xb2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004514:	d027      	beq.n	8004566 <TIM_Base_SetConfig+0xb2>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a2c      	ldr	r2, [pc, #176]	; (80045cc <TIM_Base_SetConfig+0x118>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d023      	beq.n	8004566 <TIM_Base_SetConfig+0xb2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a2b      	ldr	r2, [pc, #172]	; (80045d0 <TIM_Base_SetConfig+0x11c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d01f      	beq.n	8004566 <TIM_Base_SetConfig+0xb2>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a2a      	ldr	r2, [pc, #168]	; (80045d4 <TIM_Base_SetConfig+0x120>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d01b      	beq.n	8004566 <TIM_Base_SetConfig+0xb2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a29      	ldr	r2, [pc, #164]	; (80045d8 <TIM_Base_SetConfig+0x124>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d017      	beq.n	8004566 <TIM_Base_SetConfig+0xb2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a28      	ldr	r2, [pc, #160]	; (80045dc <TIM_Base_SetConfig+0x128>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d013      	beq.n	8004566 <TIM_Base_SetConfig+0xb2>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a27      	ldr	r2, [pc, #156]	; (80045e0 <TIM_Base_SetConfig+0x12c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d00f      	beq.n	8004566 <TIM_Base_SetConfig+0xb2>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a26      	ldr	r2, [pc, #152]	; (80045e4 <TIM_Base_SetConfig+0x130>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d00b      	beq.n	8004566 <TIM_Base_SetConfig+0xb2>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a25      	ldr	r2, [pc, #148]	; (80045e8 <TIM_Base_SetConfig+0x134>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d007      	beq.n	8004566 <TIM_Base_SetConfig+0xb2>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a24      	ldr	r2, [pc, #144]	; (80045ec <TIM_Base_SetConfig+0x138>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d003      	beq.n	8004566 <TIM_Base_SetConfig+0xb2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a23      	ldr	r2, [pc, #140]	; (80045f0 <TIM_Base_SetConfig+0x13c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d108      	bne.n	8004578 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800456c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	4313      	orrs	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a0a      	ldr	r2, [pc, #40]	; (80045c8 <TIM_Base_SetConfig+0x114>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d003      	beq.n	80045ac <TIM_Base_SetConfig+0xf8>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a0c      	ldr	r2, [pc, #48]	; (80045d8 <TIM_Base_SetConfig+0x124>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d103      	bne.n	80045b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	691a      	ldr	r2, [r3, #16]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	615a      	str	r2, [r3, #20]
}
 80045ba:	bf00      	nop
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40010000 	.word	0x40010000
 80045cc:	40000400 	.word	0x40000400
 80045d0:	40000800 	.word	0x40000800
 80045d4:	40000c00 	.word	0x40000c00
 80045d8:	40010400 	.word	0x40010400
 80045dc:	40014000 	.word	0x40014000
 80045e0:	40014400 	.word	0x40014400
 80045e4:	40014800 	.word	0x40014800
 80045e8:	40001800 	.word	0x40001800
 80045ec:	40001c00 	.word	0x40001c00
 80045f0:	40002000 	.word	0x40002000

080045f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b087      	sub	sp, #28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	f023 0201 	bic.w	r2, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f023 0303 	bic.w	r3, r3, #3
 800462a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	4313      	orrs	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f023 0302 	bic.w	r3, r3, #2
 800463c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	4313      	orrs	r3, r2
 8004646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a20      	ldr	r2, [pc, #128]	; (80046cc <TIM_OC1_SetConfig+0xd8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d003      	beq.n	8004658 <TIM_OC1_SetConfig+0x64>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a1f      	ldr	r2, [pc, #124]	; (80046d0 <TIM_OC1_SetConfig+0xdc>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d10c      	bne.n	8004672 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f023 0308 	bic.w	r3, r3, #8
 800465e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	4313      	orrs	r3, r2
 8004668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f023 0304 	bic.w	r3, r3, #4
 8004670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a15      	ldr	r2, [pc, #84]	; (80046cc <TIM_OC1_SetConfig+0xd8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d003      	beq.n	8004682 <TIM_OC1_SetConfig+0x8e>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a14      	ldr	r2, [pc, #80]	; (80046d0 <TIM_OC1_SetConfig+0xdc>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d111      	bne.n	80046a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004688:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004690:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4313      	orrs	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	621a      	str	r2, [r3, #32]
}
 80046c0:	bf00      	nop
 80046c2:	371c      	adds	r7, #28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	40010000 	.word	0x40010000
 80046d0:	40010400 	.word	0x40010400

080046d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	f023 0210 	bic.w	r2, r3, #16
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800470a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	021b      	lsls	r3, r3, #8
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	4313      	orrs	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	f023 0320 	bic.w	r3, r3, #32
 800471e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	4313      	orrs	r3, r2
 800472a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a22      	ldr	r2, [pc, #136]	; (80047b8 <TIM_OC2_SetConfig+0xe4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d003      	beq.n	800473c <TIM_OC2_SetConfig+0x68>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a21      	ldr	r2, [pc, #132]	; (80047bc <TIM_OC2_SetConfig+0xe8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d10d      	bne.n	8004758 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004756:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a17      	ldr	r2, [pc, #92]	; (80047b8 <TIM_OC2_SetConfig+0xe4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d003      	beq.n	8004768 <TIM_OC2_SetConfig+0x94>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a16      	ldr	r2, [pc, #88]	; (80047bc <TIM_OC2_SetConfig+0xe8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d113      	bne.n	8004790 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800476e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004776:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	4313      	orrs	r3, r2
 800478e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	621a      	str	r2, [r3, #32]
}
 80047aa:	bf00      	nop
 80047ac:	371c      	adds	r7, #28
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40010000 	.word	0x40010000
 80047bc:	40010400 	.word	0x40010400

080047c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 0303 	bic.w	r3, r3, #3
 80047f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	021b      	lsls	r3, r3, #8
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	4313      	orrs	r3, r2
 8004814:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a21      	ldr	r2, [pc, #132]	; (80048a0 <TIM_OC3_SetConfig+0xe0>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d003      	beq.n	8004826 <TIM_OC3_SetConfig+0x66>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a20      	ldr	r2, [pc, #128]	; (80048a4 <TIM_OC3_SetConfig+0xe4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d10d      	bne.n	8004842 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800482c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	021b      	lsls	r3, r3, #8
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a16      	ldr	r2, [pc, #88]	; (80048a0 <TIM_OC3_SetConfig+0xe0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d003      	beq.n	8004852 <TIM_OC3_SetConfig+0x92>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a15      	ldr	r2, [pc, #84]	; (80048a4 <TIM_OC3_SetConfig+0xe4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d113      	bne.n	800487a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	011b      	lsls	r3, r3, #4
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	4313      	orrs	r3, r2
 800486c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	621a      	str	r2, [r3, #32]
}
 8004894:	bf00      	nop
 8004896:	371c      	adds	r7, #28
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	40010000 	.word	0x40010000
 80048a4:	40010400 	.word	0x40010400

080048a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	021b      	lsls	r3, r3, #8
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	031b      	lsls	r3, r3, #12
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a12      	ldr	r2, [pc, #72]	; (800494c <TIM_OC4_SetConfig+0xa4>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d003      	beq.n	8004910 <TIM_OC4_SetConfig+0x68>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a11      	ldr	r2, [pc, #68]	; (8004950 <TIM_OC4_SetConfig+0xa8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d109      	bne.n	8004924 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004916:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	019b      	lsls	r3, r3, #6
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	4313      	orrs	r3, r2
 8004922:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	621a      	str	r2, [r3, #32]
}
 800493e:	bf00      	nop
 8004940:	371c      	adds	r7, #28
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40010000 	.word	0x40010000
 8004950:	40010400 	.word	0x40010400

08004954 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004954:	b480      	push	{r7}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f003 031f 	and.w	r3, r3, #31
 8004966:	2201      	movs	r2, #1
 8004968:	fa02 f303 	lsl.w	r3, r2, r3
 800496c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a1a      	ldr	r2, [r3, #32]
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	43db      	mvns	r3, r3
 8004976:	401a      	ands	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a1a      	ldr	r2, [r3, #32]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f003 031f 	and.w	r3, r3, #31
 8004986:	6879      	ldr	r1, [r7, #4]
 8004988:	fa01 f303 	lsl.w	r3, r1, r3
 800498c:	431a      	orrs	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	621a      	str	r2, [r3, #32]
}
 8004992:	bf00      	nop
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
	...

080049a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d101      	bne.n	80049b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049b4:	2302      	movs	r3, #2
 80049b6:	e05a      	b.n	8004a6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a21      	ldr	r2, [pc, #132]	; (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d022      	beq.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a04:	d01d      	beq.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a1d      	ldr	r2, [pc, #116]	; (8004a80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d018      	beq.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a1b      	ldr	r2, [pc, #108]	; (8004a84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d013      	beq.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a1a      	ldr	r2, [pc, #104]	; (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00e      	beq.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a18      	ldr	r2, [pc, #96]	; (8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d009      	beq.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a17      	ldr	r2, [pc, #92]	; (8004a90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d004      	beq.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a15      	ldr	r2, [pc, #84]	; (8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d10c      	bne.n	8004a5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	40010000 	.word	0x40010000
 8004a80:	40000400 	.word	0x40000400
 8004a84:	40000800 	.word	0x40000800
 8004a88:	40000c00 	.word	0x40000c00
 8004a8c:	40010400 	.word	0x40010400
 8004a90:	40014000 	.word	0x40014000
 8004a94:	40001800 	.word	0x40001800

08004a98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004ac6:	4b8d      	ldr	r3, [pc, #564]	; (8004cfc <MX_LWIP_Init+0x23c>)
 8004ac8:	22c0      	movs	r2, #192	; 0xc0
 8004aca:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004acc:	4b8b      	ldr	r3, [pc, #556]	; (8004cfc <MX_LWIP_Init+0x23c>)
 8004ace:	22a8      	movs	r2, #168	; 0xa8
 8004ad0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8004ad2:	4b8a      	ldr	r3, [pc, #552]	; (8004cfc <MX_LWIP_Init+0x23c>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 12;
 8004ad8:	4b88      	ldr	r3, [pc, #544]	; (8004cfc <MX_LWIP_Init+0x23c>)
 8004ada:	220c      	movs	r2, #12
 8004adc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004ade:	4b88      	ldr	r3, [pc, #544]	; (8004d00 <MX_LWIP_Init+0x240>)
 8004ae0:	22ff      	movs	r2, #255	; 0xff
 8004ae2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004ae4:	4b86      	ldr	r3, [pc, #536]	; (8004d00 <MX_LWIP_Init+0x240>)
 8004ae6:	22ff      	movs	r2, #255	; 0xff
 8004ae8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004aea:	4b85      	ldr	r3, [pc, #532]	; (8004d00 <MX_LWIP_Init+0x240>)
 8004aec:	22ff      	movs	r2, #255	; 0xff
 8004aee:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004af0:	4b83      	ldr	r3, [pc, #524]	; (8004d00 <MX_LWIP_Init+0x240>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004af6:	4b83      	ldr	r3, [pc, #524]	; (8004d04 <MX_LWIP_Init+0x244>)
 8004af8:	22c0      	movs	r2, #192	; 0xc0
 8004afa:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004afc:	4b81      	ldr	r3, [pc, #516]	; (8004d04 <MX_LWIP_Init+0x244>)
 8004afe:	22a8      	movs	r2, #168	; 0xa8
 8004b00:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8004b02:	4b80      	ldr	r3, [pc, #512]	; (8004d04 <MX_LWIP_Init+0x244>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004b08:	4b7e      	ldr	r3, [pc, #504]	; (8004d04 <MX_LWIP_Init+0x244>)
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004b0e:	f000 fce5 	bl	80054dc <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004b12:	4b7a      	ldr	r3, [pc, #488]	; (8004cfc <MX_LWIP_Init+0x23c>)
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	061a      	lsls	r2, r3, #24
 8004b18:	4b78      	ldr	r3, [pc, #480]	; (8004cfc <MX_LWIP_Init+0x23c>)
 8004b1a:	785b      	ldrb	r3, [r3, #1]
 8004b1c:	041b      	lsls	r3, r3, #16
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	4b76      	ldr	r3, [pc, #472]	; (8004cfc <MX_LWIP_Init+0x23c>)
 8004b22:	789b      	ldrb	r3, [r3, #2]
 8004b24:	021b      	lsls	r3, r3, #8
 8004b26:	4313      	orrs	r3, r2
 8004b28:	4a74      	ldr	r2, [pc, #464]	; (8004cfc <MX_LWIP_Init+0x23c>)
 8004b2a:	78d2      	ldrb	r2, [r2, #3]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	061a      	lsls	r2, r3, #24
 8004b30:	4b72      	ldr	r3, [pc, #456]	; (8004cfc <MX_LWIP_Init+0x23c>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	0619      	lsls	r1, r3, #24
 8004b36:	4b71      	ldr	r3, [pc, #452]	; (8004cfc <MX_LWIP_Init+0x23c>)
 8004b38:	785b      	ldrb	r3, [r3, #1]
 8004b3a:	041b      	lsls	r3, r3, #16
 8004b3c:	4319      	orrs	r1, r3
 8004b3e:	4b6f      	ldr	r3, [pc, #444]	; (8004cfc <MX_LWIP_Init+0x23c>)
 8004b40:	789b      	ldrb	r3, [r3, #2]
 8004b42:	021b      	lsls	r3, r3, #8
 8004b44:	430b      	orrs	r3, r1
 8004b46:	496d      	ldr	r1, [pc, #436]	; (8004cfc <MX_LWIP_Init+0x23c>)
 8004b48:	78c9      	ldrb	r1, [r1, #3]
 8004b4a:	430b      	orrs	r3, r1
 8004b4c:	021b      	lsls	r3, r3, #8
 8004b4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b52:	431a      	orrs	r2, r3
 8004b54:	4b69      	ldr	r3, [pc, #420]	; (8004cfc <MX_LWIP_Init+0x23c>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	0619      	lsls	r1, r3, #24
 8004b5a:	4b68      	ldr	r3, [pc, #416]	; (8004cfc <MX_LWIP_Init+0x23c>)
 8004b5c:	785b      	ldrb	r3, [r3, #1]
 8004b5e:	041b      	lsls	r3, r3, #16
 8004b60:	4319      	orrs	r1, r3
 8004b62:	4b66      	ldr	r3, [pc, #408]	; (8004cfc <MX_LWIP_Init+0x23c>)
 8004b64:	789b      	ldrb	r3, [r3, #2]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	4964      	ldr	r1, [pc, #400]	; (8004cfc <MX_LWIP_Init+0x23c>)
 8004b6c:	78c9      	ldrb	r1, [r1, #3]
 8004b6e:	430b      	orrs	r3, r1
 8004b70:	0a1b      	lsrs	r3, r3, #8
 8004b72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004b76:	431a      	orrs	r2, r3
 8004b78:	4b60      	ldr	r3, [pc, #384]	; (8004cfc <MX_LWIP_Init+0x23c>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	0619      	lsls	r1, r3, #24
 8004b7e:	4b5f      	ldr	r3, [pc, #380]	; (8004cfc <MX_LWIP_Init+0x23c>)
 8004b80:	785b      	ldrb	r3, [r3, #1]
 8004b82:	041b      	lsls	r3, r3, #16
 8004b84:	4319      	orrs	r1, r3
 8004b86:	4b5d      	ldr	r3, [pc, #372]	; (8004cfc <MX_LWIP_Init+0x23c>)
 8004b88:	789b      	ldrb	r3, [r3, #2]
 8004b8a:	021b      	lsls	r3, r3, #8
 8004b8c:	430b      	orrs	r3, r1
 8004b8e:	495b      	ldr	r1, [pc, #364]	; (8004cfc <MX_LWIP_Init+0x23c>)
 8004b90:	78c9      	ldrb	r1, [r1, #3]
 8004b92:	430b      	orrs	r3, r1
 8004b94:	0e1b      	lsrs	r3, r3, #24
 8004b96:	4313      	orrs	r3, r2
 8004b98:	4a5b      	ldr	r2, [pc, #364]	; (8004d08 <MX_LWIP_Init+0x248>)
 8004b9a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004b9c:	4b58      	ldr	r3, [pc, #352]	; (8004d00 <MX_LWIP_Init+0x240>)
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	061a      	lsls	r2, r3, #24
 8004ba2:	4b57      	ldr	r3, [pc, #348]	; (8004d00 <MX_LWIP_Init+0x240>)
 8004ba4:	785b      	ldrb	r3, [r3, #1]
 8004ba6:	041b      	lsls	r3, r3, #16
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	4b55      	ldr	r3, [pc, #340]	; (8004d00 <MX_LWIP_Init+0x240>)
 8004bac:	789b      	ldrb	r3, [r3, #2]
 8004bae:	021b      	lsls	r3, r3, #8
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	4a53      	ldr	r2, [pc, #332]	; (8004d00 <MX_LWIP_Init+0x240>)
 8004bb4:	78d2      	ldrb	r2, [r2, #3]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	061a      	lsls	r2, r3, #24
 8004bba:	4b51      	ldr	r3, [pc, #324]	; (8004d00 <MX_LWIP_Init+0x240>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	0619      	lsls	r1, r3, #24
 8004bc0:	4b4f      	ldr	r3, [pc, #316]	; (8004d00 <MX_LWIP_Init+0x240>)
 8004bc2:	785b      	ldrb	r3, [r3, #1]
 8004bc4:	041b      	lsls	r3, r3, #16
 8004bc6:	4319      	orrs	r1, r3
 8004bc8:	4b4d      	ldr	r3, [pc, #308]	; (8004d00 <MX_LWIP_Init+0x240>)
 8004bca:	789b      	ldrb	r3, [r3, #2]
 8004bcc:	021b      	lsls	r3, r3, #8
 8004bce:	430b      	orrs	r3, r1
 8004bd0:	494b      	ldr	r1, [pc, #300]	; (8004d00 <MX_LWIP_Init+0x240>)
 8004bd2:	78c9      	ldrb	r1, [r1, #3]
 8004bd4:	430b      	orrs	r3, r1
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	4b48      	ldr	r3, [pc, #288]	; (8004d00 <MX_LWIP_Init+0x240>)
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	0619      	lsls	r1, r3, #24
 8004be4:	4b46      	ldr	r3, [pc, #280]	; (8004d00 <MX_LWIP_Init+0x240>)
 8004be6:	785b      	ldrb	r3, [r3, #1]
 8004be8:	041b      	lsls	r3, r3, #16
 8004bea:	4319      	orrs	r1, r3
 8004bec:	4b44      	ldr	r3, [pc, #272]	; (8004d00 <MX_LWIP_Init+0x240>)
 8004bee:	789b      	ldrb	r3, [r3, #2]
 8004bf0:	021b      	lsls	r3, r3, #8
 8004bf2:	430b      	orrs	r3, r1
 8004bf4:	4942      	ldr	r1, [pc, #264]	; (8004d00 <MX_LWIP_Init+0x240>)
 8004bf6:	78c9      	ldrb	r1, [r1, #3]
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	0a1b      	lsrs	r3, r3, #8
 8004bfc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004c00:	431a      	orrs	r2, r3
 8004c02:	4b3f      	ldr	r3, [pc, #252]	; (8004d00 <MX_LWIP_Init+0x240>)
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	0619      	lsls	r1, r3, #24
 8004c08:	4b3d      	ldr	r3, [pc, #244]	; (8004d00 <MX_LWIP_Init+0x240>)
 8004c0a:	785b      	ldrb	r3, [r3, #1]
 8004c0c:	041b      	lsls	r3, r3, #16
 8004c0e:	4319      	orrs	r1, r3
 8004c10:	4b3b      	ldr	r3, [pc, #236]	; (8004d00 <MX_LWIP_Init+0x240>)
 8004c12:	789b      	ldrb	r3, [r3, #2]
 8004c14:	021b      	lsls	r3, r3, #8
 8004c16:	430b      	orrs	r3, r1
 8004c18:	4939      	ldr	r1, [pc, #228]	; (8004d00 <MX_LWIP_Init+0x240>)
 8004c1a:	78c9      	ldrb	r1, [r1, #3]
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	0e1b      	lsrs	r3, r3, #24
 8004c20:	4313      	orrs	r3, r2
 8004c22:	4a3a      	ldr	r2, [pc, #232]	; (8004d0c <MX_LWIP_Init+0x24c>)
 8004c24:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004c26:	4b37      	ldr	r3, [pc, #220]	; (8004d04 <MX_LWIP_Init+0x244>)
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	061a      	lsls	r2, r3, #24
 8004c2c:	4b35      	ldr	r3, [pc, #212]	; (8004d04 <MX_LWIP_Init+0x244>)
 8004c2e:	785b      	ldrb	r3, [r3, #1]
 8004c30:	041b      	lsls	r3, r3, #16
 8004c32:	431a      	orrs	r2, r3
 8004c34:	4b33      	ldr	r3, [pc, #204]	; (8004d04 <MX_LWIP_Init+0x244>)
 8004c36:	789b      	ldrb	r3, [r3, #2]
 8004c38:	021b      	lsls	r3, r3, #8
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	4a31      	ldr	r2, [pc, #196]	; (8004d04 <MX_LWIP_Init+0x244>)
 8004c3e:	78d2      	ldrb	r2, [r2, #3]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	061a      	lsls	r2, r3, #24
 8004c44:	4b2f      	ldr	r3, [pc, #188]	; (8004d04 <MX_LWIP_Init+0x244>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	0619      	lsls	r1, r3, #24
 8004c4a:	4b2e      	ldr	r3, [pc, #184]	; (8004d04 <MX_LWIP_Init+0x244>)
 8004c4c:	785b      	ldrb	r3, [r3, #1]
 8004c4e:	041b      	lsls	r3, r3, #16
 8004c50:	4319      	orrs	r1, r3
 8004c52:	4b2c      	ldr	r3, [pc, #176]	; (8004d04 <MX_LWIP_Init+0x244>)
 8004c54:	789b      	ldrb	r3, [r3, #2]
 8004c56:	021b      	lsls	r3, r3, #8
 8004c58:	430b      	orrs	r3, r1
 8004c5a:	492a      	ldr	r1, [pc, #168]	; (8004d04 <MX_LWIP_Init+0x244>)
 8004c5c:	78c9      	ldrb	r1, [r1, #3]
 8004c5e:	430b      	orrs	r3, r1
 8004c60:	021b      	lsls	r3, r3, #8
 8004c62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c66:	431a      	orrs	r2, r3
 8004c68:	4b26      	ldr	r3, [pc, #152]	; (8004d04 <MX_LWIP_Init+0x244>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	0619      	lsls	r1, r3, #24
 8004c6e:	4b25      	ldr	r3, [pc, #148]	; (8004d04 <MX_LWIP_Init+0x244>)
 8004c70:	785b      	ldrb	r3, [r3, #1]
 8004c72:	041b      	lsls	r3, r3, #16
 8004c74:	4319      	orrs	r1, r3
 8004c76:	4b23      	ldr	r3, [pc, #140]	; (8004d04 <MX_LWIP_Init+0x244>)
 8004c78:	789b      	ldrb	r3, [r3, #2]
 8004c7a:	021b      	lsls	r3, r3, #8
 8004c7c:	430b      	orrs	r3, r1
 8004c7e:	4921      	ldr	r1, [pc, #132]	; (8004d04 <MX_LWIP_Init+0x244>)
 8004c80:	78c9      	ldrb	r1, [r1, #3]
 8004c82:	430b      	orrs	r3, r1
 8004c84:	0a1b      	lsrs	r3, r3, #8
 8004c86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	4b1d      	ldr	r3, [pc, #116]	; (8004d04 <MX_LWIP_Init+0x244>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	0619      	lsls	r1, r3, #24
 8004c92:	4b1c      	ldr	r3, [pc, #112]	; (8004d04 <MX_LWIP_Init+0x244>)
 8004c94:	785b      	ldrb	r3, [r3, #1]
 8004c96:	041b      	lsls	r3, r3, #16
 8004c98:	4319      	orrs	r1, r3
 8004c9a:	4b1a      	ldr	r3, [pc, #104]	; (8004d04 <MX_LWIP_Init+0x244>)
 8004c9c:	789b      	ldrb	r3, [r3, #2]
 8004c9e:	021b      	lsls	r3, r3, #8
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	4918      	ldr	r1, [pc, #96]	; (8004d04 <MX_LWIP_Init+0x244>)
 8004ca4:	78c9      	ldrb	r1, [r1, #3]
 8004ca6:	430b      	orrs	r3, r1
 8004ca8:	0e1b      	lsrs	r3, r3, #24
 8004caa:	4313      	orrs	r3, r2
 8004cac:	4a18      	ldr	r2, [pc, #96]	; (8004d10 <MX_LWIP_Init+0x250>)
 8004cae:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004cb0:	4b18      	ldr	r3, [pc, #96]	; (8004d14 <MX_LWIP_Init+0x254>)
 8004cb2:	9302      	str	r3, [sp, #8]
 8004cb4:	4b18      	ldr	r3, [pc, #96]	; (8004d18 <MX_LWIP_Init+0x258>)
 8004cb6:	9301      	str	r3, [sp, #4]
 8004cb8:	2300      	movs	r3, #0
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	4b14      	ldr	r3, [pc, #80]	; (8004d10 <MX_LWIP_Init+0x250>)
 8004cbe:	4a13      	ldr	r2, [pc, #76]	; (8004d0c <MX_LWIP_Init+0x24c>)
 8004cc0:	4911      	ldr	r1, [pc, #68]	; (8004d08 <MX_LWIP_Init+0x248>)
 8004cc2:	4816      	ldr	r0, [pc, #88]	; (8004d1c <MX_LWIP_Init+0x25c>)
 8004cc4:	f001 f8b0 	bl	8005e28 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004cc8:	4814      	ldr	r0, [pc, #80]	; (8004d1c <MX_LWIP_Init+0x25c>)
 8004cca:	f001 fa5f 	bl	800618c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004cce:	4b13      	ldr	r3, [pc, #76]	; (8004d1c <MX_LWIP_Init+0x25c>)
 8004cd0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004cd4:	089b      	lsrs	r3, r3, #2
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004ce0:	480e      	ldr	r0, [pc, #56]	; (8004d1c <MX_LWIP_Init+0x25c>)
 8004ce2:	f001 fa63 	bl	80061ac <netif_set_up>
 8004ce6:	e002      	b.n	8004cee <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004ce8:	480c      	ldr	r0, [pc, #48]	; (8004d1c <MX_LWIP_Init+0x25c>)
 8004cea:	f001 facb 	bl	8006284 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004cee:	490c      	ldr	r1, [pc, #48]	; (8004d20 <MX_LWIP_Init+0x260>)
 8004cf0:	480a      	ldr	r0, [pc, #40]	; (8004d1c <MX_LWIP_Init+0x25c>)
 8004cf2:	f001 faf9 	bl	80062e8 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004cf6:	bf00      	nop
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	200003f4 	.word	0x200003f4
 8004d00:	200003f0 	.word	0x200003f0
 8004d04:	200003e8 	.word	0x200003e8
 8004d08:	200003ec 	.word	0x200003ec
 8004d0c:	200003f8 	.word	0x200003f8
 8004d10:	200003fc 	.word	0x200003fc
 8004d14:	0800fac5 	.word	0x0800fac5
 8004d18:	08005309 	.word	0x08005309
 8004d1c:	20000270 	.word	0x20000270
 8004d20:	08005375 	.word	0x08005375

08004d24 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004d28:	4803      	ldr	r0, [pc, #12]	; (8004d38 <MX_LWIP_Process+0x14>)
 8004d2a:	f000 facd 	bl	80052c8 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8004d2e:	f008 fae3 	bl	800d2f8 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004d32:	bf00      	nop
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20000270 	.word	0x20000270

08004d3c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08e      	sub	sp, #56	; 0x38
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	605a      	str	r2, [r3, #4]
 8004d4e:	609a      	str	r2, [r3, #8]
 8004d50:	60da      	str	r2, [r3, #12]
 8004d52:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a55      	ldr	r2, [pc, #340]	; (8004eb0 <HAL_ETH_MspInit+0x174>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	f040 80a4 	bne.w	8004ea8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004d60:	2300      	movs	r3, #0
 8004d62:	623b      	str	r3, [r7, #32]
 8004d64:	4b53      	ldr	r3, [pc, #332]	; (8004eb4 <HAL_ETH_MspInit+0x178>)
 8004d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d68:	4a52      	ldr	r2, [pc, #328]	; (8004eb4 <HAL_ETH_MspInit+0x178>)
 8004d6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8004d70:	4b50      	ldr	r3, [pc, #320]	; (8004eb4 <HAL_ETH_MspInit+0x178>)
 8004d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d78:	623b      	str	r3, [r7, #32]
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	61fb      	str	r3, [r7, #28]
 8004d80:	4b4c      	ldr	r3, [pc, #304]	; (8004eb4 <HAL_ETH_MspInit+0x178>)
 8004d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d84:	4a4b      	ldr	r2, [pc, #300]	; (8004eb4 <HAL_ETH_MspInit+0x178>)
 8004d86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8004d8c:	4b49      	ldr	r3, [pc, #292]	; (8004eb4 <HAL_ETH_MspInit+0x178>)
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d94:	61fb      	str	r3, [r7, #28]
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	61bb      	str	r3, [r7, #24]
 8004d9c:	4b45      	ldr	r3, [pc, #276]	; (8004eb4 <HAL_ETH_MspInit+0x178>)
 8004d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da0:	4a44      	ldr	r2, [pc, #272]	; (8004eb4 <HAL_ETH_MspInit+0x178>)
 8004da2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004da6:	6313      	str	r3, [r2, #48]	; 0x30
 8004da8:	4b42      	ldr	r3, [pc, #264]	; (8004eb4 <HAL_ETH_MspInit+0x178>)
 8004daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004db0:	61bb      	str	r3, [r7, #24]
 8004db2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	4b3e      	ldr	r3, [pc, #248]	; (8004eb4 <HAL_ETH_MspInit+0x178>)
 8004dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbc:	4a3d      	ldr	r2, [pc, #244]	; (8004eb4 <HAL_ETH_MspInit+0x178>)
 8004dbe:	f043 0304 	orr.w	r3, r3, #4
 8004dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8004dc4:	4b3b      	ldr	r3, [pc, #236]	; (8004eb4 <HAL_ETH_MspInit+0x178>)
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	613b      	str	r3, [r7, #16]
 8004dd4:	4b37      	ldr	r3, [pc, #220]	; (8004eb4 <HAL_ETH_MspInit+0x178>)
 8004dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd8:	4a36      	ldr	r2, [pc, #216]	; (8004eb4 <HAL_ETH_MspInit+0x178>)
 8004dda:	f043 0301 	orr.w	r3, r3, #1
 8004dde:	6313      	str	r3, [r2, #48]	; 0x30
 8004de0:	4b34      	ldr	r3, [pc, #208]	; (8004eb4 <HAL_ETH_MspInit+0x178>)
 8004de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	613b      	str	r3, [r7, #16]
 8004dea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dec:	2300      	movs	r3, #0
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	4b30      	ldr	r3, [pc, #192]	; (8004eb4 <HAL_ETH_MspInit+0x178>)
 8004df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df4:	4a2f      	ldr	r2, [pc, #188]	; (8004eb4 <HAL_ETH_MspInit+0x178>)
 8004df6:	f043 0302 	orr.w	r3, r3, #2
 8004dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8004dfc:	4b2d      	ldr	r3, [pc, #180]	; (8004eb4 <HAL_ETH_MspInit+0x178>)
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60bb      	str	r3, [r7, #8]
 8004e0c:	4b29      	ldr	r3, [pc, #164]	; (8004eb4 <HAL_ETH_MspInit+0x178>)
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e10:	4a28      	ldr	r2, [pc, #160]	; (8004eb4 <HAL_ETH_MspInit+0x178>)
 8004e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e16:	6313      	str	r3, [r2, #48]	; 0x30
 8004e18:	4b26      	ldr	r3, [pc, #152]	; (8004eb4 <HAL_ETH_MspInit+0x178>)
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e20:	60bb      	str	r3, [r7, #8]
 8004e22:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004e24:	2332      	movs	r3, #50	; 0x32
 8004e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e28:	2302      	movs	r3, #2
 8004e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e30:	2303      	movs	r3, #3
 8004e32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e34:	230b      	movs	r3, #11
 8004e36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	481e      	ldr	r0, [pc, #120]	; (8004eb8 <HAL_ETH_MspInit+0x17c>)
 8004e40:	f7fe f9fa 	bl	8003238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004e44:	2386      	movs	r3, #134	; 0x86
 8004e46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e48:	2302      	movs	r3, #2
 8004e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e50:	2303      	movs	r3, #3
 8004e52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e54:	230b      	movs	r3, #11
 8004e56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4817      	ldr	r0, [pc, #92]	; (8004ebc <HAL_ETH_MspInit+0x180>)
 8004e60:	f7fe f9ea 	bl	8003238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004e64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e72:	2303      	movs	r3, #3
 8004e74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e76:	230b      	movs	r3, #11
 8004e78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e7e:	4619      	mov	r1, r3
 8004e80:	480f      	ldr	r0, [pc, #60]	; (8004ec0 <HAL_ETH_MspInit+0x184>)
 8004e82:	f7fe f9d9 	bl	8003238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8004e86:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e90:	2300      	movs	r3, #0
 8004e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e94:	2303      	movs	r3, #3
 8004e96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e98:	230b      	movs	r3, #11
 8004e9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	4808      	ldr	r0, [pc, #32]	; (8004ec4 <HAL_ETH_MspInit+0x188>)
 8004ea4:	f7fe f9c8 	bl	8003238 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004ea8:	bf00      	nop
 8004eaa:	3738      	adds	r7, #56	; 0x38
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40028000 	.word	0x40028000
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	40020800 	.word	0x40020800
 8004ebc:	40020000 	.word	0x40020000
 8004ec0:	40020400 	.word	0x40020400
 8004ec4:	40021800 	.word	0x40021800

08004ec8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004ed4:	4b4d      	ldr	r3, [pc, #308]	; (800500c <low_level_init+0x144>)
 8004ed6:	4a4e      	ldr	r2, [pc, #312]	; (8005010 <low_level_init+0x148>)
 8004ed8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004eda:	4b4c      	ldr	r3, [pc, #304]	; (800500c <low_level_init+0x144>)
 8004edc:	2201      	movs	r2, #1
 8004ede:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004ee0:	4b4a      	ldr	r3, [pc, #296]	; (800500c <low_level_init+0x144>)
 8004ee2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004ee6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004ee8:	4b48      	ldr	r3, [pc, #288]	; (800500c <low_level_init+0x144>)
 8004eea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004eee:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004ef0:	4b46      	ldr	r3, [pc, #280]	; (800500c <low_level_init+0x144>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004efa:	2380      	movs	r3, #128	; 0x80
 8004efc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004efe:	23e1      	movs	r3, #225	; 0xe1
 8004f00:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004f02:	2300      	movs	r3, #0
 8004f04:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004f06:	2300      	movs	r3, #0
 8004f08:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004f0e:	4a3f      	ldr	r2, [pc, #252]	; (800500c <low_level_init+0x144>)
 8004f10:	f107 0308 	add.w	r3, r7, #8
 8004f14:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8004f16:	4b3d      	ldr	r3, [pc, #244]	; (800500c <low_level_init+0x144>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004f1c:	4b3b      	ldr	r3, [pc, #236]	; (800500c <low_level_init+0x144>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004f22:	4b3a      	ldr	r3, [pc, #232]	; (800500c <low_level_init+0x144>)
 8004f24:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004f28:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004f2a:	4838      	ldr	r0, [pc, #224]	; (800500c <low_level_init+0x144>)
 8004f2c:	f7fd f85e 	bl	8001fec <HAL_ETH_Init>
 8004f30:	4603      	mov	r3, r0
 8004f32:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8004f34:	7dfb      	ldrb	r3, [r7, #23]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d108      	bne.n	8004f4c <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004f40:	f043 0304 	orr.w	r3, r3, #4
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	4a31      	ldr	r2, [pc, #196]	; (8005014 <low_level_init+0x14c>)
 8004f50:	4931      	ldr	r1, [pc, #196]	; (8005018 <low_level_init+0x150>)
 8004f52:	482e      	ldr	r0, [pc, #184]	; (800500c <low_level_init+0x144>)
 8004f54:	f7fd f9e6 	bl	8002324 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004f58:	2304      	movs	r3, #4
 8004f5a:	4a30      	ldr	r2, [pc, #192]	; (800501c <low_level_init+0x154>)
 8004f5c:	4930      	ldr	r1, [pc, #192]	; (8005020 <low_level_init+0x158>)
 8004f5e:	482b      	ldr	r0, [pc, #172]	; (800500c <low_level_init+0x144>)
 8004f60:	f7fd fa49 	bl	80023f6 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2206      	movs	r2, #6
 8004f68:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004f6c:	4b27      	ldr	r3, [pc, #156]	; (800500c <low_level_init+0x144>)
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	781a      	ldrb	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004f78:	4b24      	ldr	r3, [pc, #144]	; (800500c <low_level_init+0x144>)
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	785a      	ldrb	r2, [r3, #1]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004f84:	4b21      	ldr	r3, [pc, #132]	; (800500c <low_level_init+0x144>)
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	789a      	ldrb	r2, [r3, #2]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004f90:	4b1e      	ldr	r3, [pc, #120]	; (800500c <low_level_init+0x144>)
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	78da      	ldrb	r2, [r3, #3]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004f9c:	4b1b      	ldr	r3, [pc, #108]	; (800500c <low_level_init+0x144>)
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	791a      	ldrb	r2, [r3, #4]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004fa8:	4b18      	ldr	r3, [pc, #96]	; (800500c <low_level_init+0x144>)
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	795a      	ldrb	r2, [r3, #5]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004fba:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004fc2:	f043 030a 	orr.w	r3, r3, #10
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004fce:	480f      	ldr	r0, [pc, #60]	; (800500c <low_level_init+0x144>)
 8004fd0:	f7fd fcba 	bl	8002948 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004fd4:	f107 0310 	add.w	r3, r7, #16
 8004fd8:	461a      	mov	r2, r3
 8004fda:	211d      	movs	r1, #29
 8004fdc:	480b      	ldr	r0, [pc, #44]	; (800500c <low_level_init+0x144>)
 8004fde:	f7fd fbe5 	bl	80027ac <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f043 030b 	orr.w	r3, r3, #11
 8004fe8:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	461a      	mov	r2, r3
 8004fee:	211d      	movs	r1, #29
 8004ff0:	4806      	ldr	r0, [pc, #24]	; (800500c <low_level_init+0x144>)
 8004ff2:	f7fd fc43 	bl	800287c <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004ff6:	f107 0310 	add.w	r3, r7, #16
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	211d      	movs	r1, #29
 8004ffe:	4803      	ldr	r0, [pc, #12]	; (800500c <low_level_init+0x144>)
 8005000:	f7fd fbd4 	bl	80027ac <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005004:	bf00      	nop
 8005006:	3718      	adds	r7, #24
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	20001cd0 	.word	0x20001cd0
 8005010:	40028000 	.word	0x40028000
 8005014:	20001d18 	.word	0x20001d18
 8005018:	20000400 	.word	0x20000400
 800501c:	20000480 	.word	0x20000480
 8005020:	20001c50 	.word	0x20001c50

08005024 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b08a      	sub	sp, #40	; 0x28
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800502e:	4b4b      	ldr	r3, [pc, #300]	; (800515c <low_level_output+0x138>)
 8005030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005036:	2300      	movs	r3, #0
 8005038:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800503a:	2300      	movs	r3, #0
 800503c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800503e:	2300      	movs	r3, #0
 8005040:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8005042:	2300      	movs	r3, #0
 8005044:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005046:	4b45      	ldr	r3, [pc, #276]	; (800515c <low_level_output+0x138>)
 8005048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800504c:	2300      	movs	r3, #0
 800504e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	623b      	str	r3, [r7, #32]
 8005054:	e05a      	b.n	800510c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	da03      	bge.n	8005066 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800505e:	23f8      	movs	r3, #248	; 0xf8
 8005060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005064:	e05c      	b.n	8005120 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	895b      	ldrh	r3, [r3, #10]
 800506a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800506c:	2300      	movs	r3, #0
 800506e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005070:	e02f      	b.n	80050d2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005072:	69fa      	ldr	r2, [r7, #28]
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	18d0      	adds	r0, r2, r3
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	18d1      	adds	r1, r2, r3
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8005086:	3304      	adds	r3, #4
 8005088:	461a      	mov	r2, r3
 800508a:	f00a fe23 	bl	800fcd4 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	da03      	bge.n	80050a4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800509c:	23f8      	movs	r3, #248	; 0xf8
 800509e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80050a2:	e03d      	b.n	8005120 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4413      	add	r3, r2
 80050b0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80050b4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80050c0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80050cc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80050ce:	2300      	movs	r3, #0
 80050d0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	4413      	add	r3, r2
 80050d8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80050dc:	4293      	cmp	r3, r2
 80050de:	d8c8      	bhi.n	8005072 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80050e0:	69fa      	ldr	r2, [r7, #28]
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	18d0      	adds	r0, r2, r3
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	4413      	add	r3, r2
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	4619      	mov	r1, r3
 80050f2:	f00a fdef 	bl	800fcd4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4413      	add	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4413      	add	r3, r2
 8005104:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	623b      	str	r3, [r7, #32]
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1a1      	bne.n	8005056 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005112:	6979      	ldr	r1, [r7, #20]
 8005114:	4811      	ldr	r0, [pc, #68]	; (800515c <low_level_output+0x138>)
 8005116:	f7fd f9db 	bl	80024d0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800511a:	2300      	movs	r3, #0
 800511c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005120:	4b0e      	ldr	r3, [pc, #56]	; (800515c <low_level_output+0x138>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005128:	3314      	adds	r3, #20
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0320 	and.w	r3, r3, #32
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00d      	beq.n	8005150 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005134:	4b09      	ldr	r3, [pc, #36]	; (800515c <low_level_output+0x138>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800513c:	3314      	adds	r3, #20
 800513e:	2220      	movs	r2, #32
 8005140:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005142:	4b06      	ldr	r3, [pc, #24]	; (800515c <low_level_output+0x138>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800514a:	3304      	adds	r3, #4
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8005150:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005154:	4618      	mov	r0, r3
 8005156:	3728      	adds	r7, #40	; 0x28
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	20001cd0 	.word	0x20001cd0

08005160 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b08c      	sub	sp, #48	; 0x30
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005168:	2300      	movs	r3, #0
 800516a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800516c:	2300      	movs	r3, #0
 800516e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005170:	2300      	movs	r3, #0
 8005172:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005174:	2300      	movs	r3, #0
 8005176:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005178:	2300      	movs	r3, #0
 800517a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800517c:	2300      	movs	r3, #0
 800517e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005180:	2300      	movs	r3, #0
 8005182:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8005184:	484f      	ldr	r0, [pc, #316]	; (80052c4 <low_level_input+0x164>)
 8005186:	f7fd fa8d 	bl	80026a4 <HAL_ETH_GetReceivedFrame>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <low_level_input+0x34>

    return NULL;
 8005190:	2300      	movs	r3, #0
 8005192:	e092      	b.n	80052ba <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005194:	4b4b      	ldr	r3, [pc, #300]	; (80052c4 <low_level_input+0x164>)
 8005196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005198:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800519a:	4b4a      	ldr	r3, [pc, #296]	; (80052c4 <low_level_input+0x164>)
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80051a0:	89fb      	ldrh	r3, [r7, #14]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d007      	beq.n	80051b6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80051a6:	89fb      	ldrh	r3, [r7, #14]
 80051a8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80051ac:	4619      	mov	r1, r3
 80051ae:	2000      	movs	r0, #0
 80051b0:	f001 f936 	bl	8006420 <pbuf_alloc>
 80051b4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80051b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d04b      	beq.n	8005254 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80051bc:	4b41      	ldr	r3, [pc, #260]	; (80052c4 <low_level_input+0x164>)
 80051be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80051c2:	2300      	movs	r3, #0
 80051c4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80051c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ca:	e040      	b.n	800524e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80051cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ce:	895b      	ldrh	r3, [r3, #10]
 80051d0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80051d2:	2300      	movs	r3, #0
 80051d4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80051d6:	e021      	b.n	800521c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80051d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	18d0      	adds	r0, r2, r3
 80051e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	18d1      	adds	r1, r2, r3
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80051ec:	3304      	adds	r3, #4
 80051ee:	461a      	mov	r2, r3
 80051f0:	f00a fd70 	bl	800fcd4 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005200:	69fa      	ldr	r2, [r7, #28]
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	4413      	add	r3, r2
 8005206:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800520a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005216:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005218:	2300      	movs	r3, #0
 800521a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	4413      	add	r3, r2
 8005222:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005226:	4293      	cmp	r3, r2
 8005228:	d8d6      	bhi.n	80051d8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800522a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	18d0      	adds	r0, r2, r3
 8005232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	4413      	add	r3, r2
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	4619      	mov	r1, r3
 800523c:	f00a fd4a 	bl	800fcd4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005240:	69fa      	ldr	r2, [r7, #28]
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	4413      	add	r3, r2
 8005246:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	62bb      	str	r3, [r7, #40]	; 0x28
 800524e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1bb      	bne.n	80051cc <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005254:	4b1b      	ldr	r3, [pc, #108]	; (80052c4 <low_level_input+0x164>)
 8005256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005258:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800525a:	2300      	movs	r3, #0
 800525c:	613b      	str	r3, [r7, #16]
 800525e:	e00b      	b.n	8005278 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	3301      	adds	r3, #1
 8005276:	613b      	str	r3, [r7, #16]
 8005278:	4b12      	ldr	r3, [pc, #72]	; (80052c4 <low_level_input+0x164>)
 800527a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	429a      	cmp	r2, r3
 8005280:	d3ee      	bcc.n	8005260 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8005282:	4b10      	ldr	r3, [pc, #64]	; (80052c4 <low_level_input+0x164>)
 8005284:	2200      	movs	r2, #0
 8005286:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005288:	4b0e      	ldr	r3, [pc, #56]	; (80052c4 <low_level_input+0x164>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005290:	3314      	adds	r3, #20
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00d      	beq.n	80052b8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800529c:	4b09      	ldr	r3, [pc, #36]	; (80052c4 <low_level_input+0x164>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052a4:	3314      	adds	r3, #20
 80052a6:	2280      	movs	r2, #128	; 0x80
 80052a8:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80052aa:	4b06      	ldr	r3, [pc, #24]	; (80052c4 <low_level_input+0x164>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052b2:	3308      	adds	r3, #8
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]
  }
  return p;
 80052b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3730      	adds	r7, #48	; 0x30
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20001cd0 	.word	0x20001cd0

080052c8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7ff ff45 	bl	8005160 <low_level_input>
 80052d6:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d010      	beq.n	8005300 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	4798      	blx	r3
 80052e8:	4603      	mov	r3, r0
 80052ea:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 80052ec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d006      	beq.n	8005302 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f001 fb77 	bl	80069e8 <pbuf_free>
    p = NULL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	e000      	b.n	8005302 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8005300:	bf00      	nop
  }
}
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d106      	bne.n	8005324 <ethernetif_init+0x1c>
 8005316:	4b0e      	ldr	r3, [pc, #56]	; (8005350 <ethernetif_init+0x48>)
 8005318:	f240 2211 	movw	r2, #529	; 0x211
 800531c:	490d      	ldr	r1, [pc, #52]	; (8005354 <ethernetif_init+0x4c>)
 800531e:	480e      	ldr	r0, [pc, #56]	; (8005358 <ethernetif_init+0x50>)
 8005320:	f00a fd08 	bl	800fd34 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2273      	movs	r2, #115	; 0x73
 8005328:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2274      	movs	r2, #116	; 0x74
 8005330:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a09      	ldr	r2, [pc, #36]	; (800535c <ethernetif_init+0x54>)
 8005338:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a08      	ldr	r2, [pc, #32]	; (8005360 <ethernetif_init+0x58>)
 800533e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7ff fdc1 	bl	8004ec8 <low_level_init>

  return ERR_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	08011204 	.word	0x08011204
 8005354:	08011220 	.word	0x08011220
 8005358:	08011230 	.word	0x08011230
 800535c:	0800df89 	.word	0x0800df89
 8005360:	08005025 	.word	0x08005025

08005364 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005368:	f7fc fcfe 	bl	8001d68 <HAL_GetTick>
 800536c:	4603      	mov	r3, r0
}
 800536e:	4618      	mov	r0, r3
 8005370:	bd80      	pop	{r7, pc}
	...

08005374 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800537c:	2300      	movs	r3, #0
 800537e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005380:	2300      	movs	r3, #0
 8005382:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800538a:	089b      	lsrs	r3, r3, #2
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d05d      	beq.n	8005452 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005396:	4b34      	ldr	r3, [pc, #208]	; (8005468 <ethernetif_update_config+0xf4>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d03f      	beq.n	800541e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800539e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80053a2:	2100      	movs	r1, #0
 80053a4:	4830      	ldr	r0, [pc, #192]	; (8005468 <ethernetif_update_config+0xf4>)
 80053a6:	f7fd fa69 	bl	800287c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80053aa:	f7fc fcdd 	bl	8001d68 <HAL_GetTick>
 80053ae:	4603      	mov	r3, r0
 80053b0:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80053b2:	f107 0308 	add.w	r3, r7, #8
 80053b6:	461a      	mov	r2, r3
 80053b8:	2101      	movs	r1, #1
 80053ba:	482b      	ldr	r0, [pc, #172]	; (8005468 <ethernetif_update_config+0xf4>)
 80053bc:	f7fd f9f6 	bl	80027ac <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80053c0:	f7fc fcd2 	bl	8001d68 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053ce:	d828      	bhi.n	8005422 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0eb      	beq.n	80053b2 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80053da:	f107 0308 	add.w	r3, r7, #8
 80053de:	461a      	mov	r2, r3
 80053e0:	2110      	movs	r1, #16
 80053e2:	4821      	ldr	r0, [pc, #132]	; (8005468 <ethernetif_update_config+0xf4>)
 80053e4:	f7fd f9e2 	bl	80027ac <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f003 0304 	and.w	r3, r3, #4
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d004      	beq.n	80053fc <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80053f2:	4b1d      	ldr	r3, [pc, #116]	; (8005468 <ethernetif_update_config+0xf4>)
 80053f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053f8:	60da      	str	r2, [r3, #12]
 80053fa:	e002      	b.n	8005402 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80053fc:	4b1a      	ldr	r3, [pc, #104]	; (8005468 <ethernetif_update_config+0xf4>)
 80053fe:	2200      	movs	r2, #0
 8005400:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800540c:	4b16      	ldr	r3, [pc, #88]	; (8005468 <ethernetif_update_config+0xf4>)
 800540e:	2200      	movs	r2, #0
 8005410:	609a      	str	r2, [r3, #8]
 8005412:	e016      	b.n	8005442 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005414:	4b14      	ldr	r3, [pc, #80]	; (8005468 <ethernetif_update_config+0xf4>)
 8005416:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800541a:	609a      	str	r2, [r3, #8]
 800541c:	e011      	b.n	8005442 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800541e:	bf00      	nop
 8005420:	e000      	b.n	8005424 <ethernetif_update_config+0xb0>
          goto error;
 8005422:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005424:	4b10      	ldr	r3, [pc, #64]	; (8005468 <ethernetif_update_config+0xf4>)
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	08db      	lsrs	r3, r3, #3
 800542a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800542c:	4b0e      	ldr	r3, [pc, #56]	; (8005468 <ethernetif_update_config+0xf4>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	085b      	lsrs	r3, r3, #1
 8005432:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005434:	4313      	orrs	r3, r2
 8005436:	b29b      	uxth	r3, r3
 8005438:	461a      	mov	r2, r3
 800543a:	2100      	movs	r1, #0
 800543c:	480a      	ldr	r0, [pc, #40]	; (8005468 <ethernetif_update_config+0xf4>)
 800543e:	f7fd fa1d 	bl	800287c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005442:	2100      	movs	r1, #0
 8005444:	4808      	ldr	r0, [pc, #32]	; (8005468 <ethernetif_update_config+0xf4>)
 8005446:	f7fd fadd 	bl	8002a04 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800544a:	4807      	ldr	r0, [pc, #28]	; (8005468 <ethernetif_update_config+0xf4>)
 800544c:	f7fd fa7c 	bl	8002948 <HAL_ETH_Start>
 8005450:	e002      	b.n	8005458 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005452:	4805      	ldr	r0, [pc, #20]	; (8005468 <ethernetif_update_config+0xf4>)
 8005454:	f7fd faa7 	bl	80029a6 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f807 	bl	800546c <ethernetif_notify_conn_changed>
}
 800545e:	bf00      	nop
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	20001cd0 	.word	0x20001cd0

0800546c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	4603      	mov	r3, r0
 8005488:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800548a:	88fb      	ldrh	r3, [r7, #6]
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	b21a      	sxth	r2, r3
 8005490:	88fb      	ldrh	r3, [r7, #6]
 8005492:	0a1b      	lsrs	r3, r3, #8
 8005494:	b29b      	uxth	r3, r3
 8005496:	b21b      	sxth	r3, r3
 8005498:	4313      	orrs	r3, r2
 800549a:	b21b      	sxth	r3, r3
 800549c:	b29b      	uxth	r3, r3
}
 800549e:	4618      	mov	r0, r3
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	061a      	lsls	r2, r3, #24
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	021b      	lsls	r3, r3, #8
 80054ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	0a1b      	lsrs	r3, r3, #8
 80054c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80054c8:	431a      	orrs	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	0e1b      	lsrs	r3, r3, #24
 80054ce:	4313      	orrs	r3, r2
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80054e2:	2300      	movs	r3, #0
 80054e4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80054e6:	f000 f8d5 	bl	8005694 <mem_init>
  memp_init();
 80054ea:	f000 fbdb 	bl	8005ca4 <memp_init>
  pbuf_init();
  netif_init();
 80054ee:	f000 fc93 	bl	8005e18 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80054f2:	f007 ff43 	bl	800d37c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80054f6:	f001 fda7 	bl	8007048 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80054fa:	f007 feb5 	bl	800d268 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80054fe:	bf00      	nop
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
	...

08005508 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	4603      	mov	r3, r0
 8005510:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8005512:	4b05      	ldr	r3, [pc, #20]	; (8005528 <ptr_to_mem+0x20>)
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	88fb      	ldrh	r3, [r7, #6]
 8005518:	4413      	add	r3, r2
}
 800551a:	4618      	mov	r0, r3
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	200000ac 	.word	0x200000ac

0800552c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005534:	4b05      	ldr	r3, [pc, #20]	; (800554c <mem_to_ptr+0x20>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	b29b      	uxth	r3, r3
}
 800553e:	4618      	mov	r0, r3
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	200000ac 	.word	0x200000ac

08005550 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005550:	b590      	push	{r4, r7, lr}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005558:	4b45      	ldr	r3, [pc, #276]	; (8005670 <plug_holes+0x120>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	429a      	cmp	r2, r3
 8005560:	d206      	bcs.n	8005570 <plug_holes+0x20>
 8005562:	4b44      	ldr	r3, [pc, #272]	; (8005674 <plug_holes+0x124>)
 8005564:	f240 12df 	movw	r2, #479	; 0x1df
 8005568:	4943      	ldr	r1, [pc, #268]	; (8005678 <plug_holes+0x128>)
 800556a:	4844      	ldr	r0, [pc, #272]	; (800567c <plug_holes+0x12c>)
 800556c:	f00a fbe2 	bl	800fd34 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005570:	4b43      	ldr	r3, [pc, #268]	; (8005680 <plug_holes+0x130>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	429a      	cmp	r2, r3
 8005578:	d306      	bcc.n	8005588 <plug_holes+0x38>
 800557a:	4b3e      	ldr	r3, [pc, #248]	; (8005674 <plug_holes+0x124>)
 800557c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005580:	4940      	ldr	r1, [pc, #256]	; (8005684 <plug_holes+0x134>)
 8005582:	483e      	ldr	r0, [pc, #248]	; (800567c <plug_holes+0x12c>)
 8005584:	f00a fbd6 	bl	800fd34 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	791b      	ldrb	r3, [r3, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d006      	beq.n	800559e <plug_holes+0x4e>
 8005590:	4b38      	ldr	r3, [pc, #224]	; (8005674 <plug_holes+0x124>)
 8005592:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005596:	493c      	ldr	r1, [pc, #240]	; (8005688 <plug_holes+0x138>)
 8005598:	4838      	ldr	r0, [pc, #224]	; (800567c <plug_holes+0x12c>)
 800559a:	f00a fbcb 	bl	800fd34 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80055a6:	d906      	bls.n	80055b6 <plug_holes+0x66>
 80055a8:	4b32      	ldr	r3, [pc, #200]	; (8005674 <plug_holes+0x124>)
 80055aa:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80055ae:	4937      	ldr	r1, [pc, #220]	; (800568c <plug_holes+0x13c>)
 80055b0:	4832      	ldr	r0, [pc, #200]	; (800567c <plug_holes+0x12c>)
 80055b2:	f00a fbbf 	bl	800fd34 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7ff ffa4 	bl	8005508 <ptr_to_mem>
 80055c0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d024      	beq.n	8005614 <plug_holes+0xc4>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	791b      	ldrb	r3, [r3, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d120      	bne.n	8005614 <plug_holes+0xc4>
 80055d2:	4b2b      	ldr	r3, [pc, #172]	; (8005680 <plug_holes+0x130>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d01b      	beq.n	8005614 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80055dc:	4b2c      	ldr	r3, [pc, #176]	; (8005690 <plug_holes+0x140>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d102      	bne.n	80055ec <plug_holes+0x9c>
      lfree = mem;
 80055e6:	4a2a      	ldr	r2, [pc, #168]	; (8005690 <plug_holes+0x140>)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	881a      	ldrh	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80055fc:	d00a      	beq.n	8005614 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f7ff ff80 	bl	8005508 <ptr_to_mem>
 8005608:	4604      	mov	r4, r0
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7ff ff8e 	bl	800552c <mem_to_ptr>
 8005610:	4603      	mov	r3, r0
 8005612:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	885b      	ldrh	r3, [r3, #2]
 8005618:	4618      	mov	r0, r3
 800561a:	f7ff ff75 	bl	8005508 <ptr_to_mem>
 800561e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	429a      	cmp	r2, r3
 8005626:	d01f      	beq.n	8005668 <plug_holes+0x118>
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	791b      	ldrb	r3, [r3, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d11b      	bne.n	8005668 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005630:	4b17      	ldr	r3, [pc, #92]	; (8005690 <plug_holes+0x140>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	429a      	cmp	r2, r3
 8005638:	d102      	bne.n	8005640 <plug_holes+0xf0>
      lfree = pmem;
 800563a:	4a15      	ldr	r2, [pc, #84]	; (8005690 <plug_holes+0x140>)
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	881a      	ldrh	r2, [r3, #0]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	881b      	ldrh	r3, [r3, #0]
 800564c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005650:	d00a      	beq.n	8005668 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff ff56 	bl	8005508 <ptr_to_mem>
 800565c:	4604      	mov	r4, r0
 800565e:	68b8      	ldr	r0, [r7, #8]
 8005660:	f7ff ff64 	bl	800552c <mem_to_ptr>
 8005664:	4603      	mov	r3, r0
 8005666:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005668:	bf00      	nop
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	bd90      	pop	{r4, r7, pc}
 8005670:	200000ac 	.word	0x200000ac
 8005674:	08011258 	.word	0x08011258
 8005678:	08011288 	.word	0x08011288
 800567c:	080112a0 	.word	0x080112a0
 8005680:	200000b0 	.word	0x200000b0
 8005684:	080112c8 	.word	0x080112c8
 8005688:	080112e4 	.word	0x080112e4
 800568c:	08011300 	.word	0x08011300
 8005690:	200000b4 	.word	0x200000b4

08005694 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800569a:	4b18      	ldr	r3, [pc, #96]	; (80056fc <mem_init+0x68>)
 800569c:	3303      	adds	r3, #3
 800569e:	f023 0303 	bic.w	r3, r3, #3
 80056a2:	461a      	mov	r2, r3
 80056a4:	4b16      	ldr	r3, [pc, #88]	; (8005700 <mem_init+0x6c>)
 80056a6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80056a8:	4b15      	ldr	r3, [pc, #84]	; (8005700 <mem_init+0x6c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80056b4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80056c2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80056c6:	f7ff ff1f 	bl	8005508 <ptr_to_mem>
 80056ca:	4603      	mov	r3, r0
 80056cc:	4a0d      	ldr	r2, [pc, #52]	; (8005704 <mem_init+0x70>)
 80056ce:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80056d0:	4b0c      	ldr	r3, [pc, #48]	; (8005704 <mem_init+0x70>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2201      	movs	r2, #1
 80056d6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80056d8:	4b0a      	ldr	r3, [pc, #40]	; (8005704 <mem_init+0x70>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80056e0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80056e2:	4b08      	ldr	r3, [pc, #32]	; (8005704 <mem_init+0x70>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80056ea:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80056ec:	4b04      	ldr	r3, [pc, #16]	; (8005700 <mem_init+0x6c>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a05      	ldr	r2, [pc, #20]	; (8005708 <mem_init+0x74>)
 80056f2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80056f4:	bf00      	nop
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	20003500 	.word	0x20003500
 8005700:	200000ac 	.word	0x200000ac
 8005704:	200000b0 	.word	0x200000b0
 8005708:	200000b4 	.word	0x200000b4

0800570c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7ff ff09 	bl	800552c <mem_to_ptr>
 800571a:	4603      	mov	r3, r0
 800571c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	4618      	mov	r0, r3
 8005724:	f7ff fef0 	bl	8005508 <ptr_to_mem>
 8005728:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	885b      	ldrh	r3, [r3, #2]
 800572e:	4618      	mov	r0, r3
 8005730:	f7ff feea 	bl	8005508 <ptr_to_mem>
 8005734:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800573e:	d818      	bhi.n	8005772 <mem_link_valid+0x66>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	885b      	ldrh	r3, [r3, #2]
 8005744:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005748:	d813      	bhi.n	8005772 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800574e:	8afa      	ldrh	r2, [r7, #22]
 8005750:	429a      	cmp	r2, r3
 8005752:	d004      	beq.n	800575e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	8afa      	ldrh	r2, [r7, #22]
 800575a:	429a      	cmp	r2, r3
 800575c:	d109      	bne.n	8005772 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800575e:	4b08      	ldr	r3, [pc, #32]	; (8005780 <mem_link_valid+0x74>)
 8005760:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	429a      	cmp	r2, r3
 8005766:	d006      	beq.n	8005776 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	885b      	ldrh	r3, [r3, #2]
 800576c:	8afa      	ldrh	r2, [r7, #22]
 800576e:	429a      	cmp	r2, r3
 8005770:	d001      	beq.n	8005776 <mem_link_valid+0x6a>
    return 0;
 8005772:	2300      	movs	r3, #0
 8005774:	e000      	b.n	8005778 <mem_link_valid+0x6c>
  }
  return 1;
 8005776:	2301      	movs	r3, #1
}
 8005778:	4618      	mov	r0, r3
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	200000b0 	.word	0x200000b0

08005784 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d04c      	beq.n	800582c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f003 0303 	and.w	r3, r3, #3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d007      	beq.n	80057ac <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800579c:	4b25      	ldr	r3, [pc, #148]	; (8005834 <mem_free+0xb0>)
 800579e:	f240 2273 	movw	r2, #627	; 0x273
 80057a2:	4925      	ldr	r1, [pc, #148]	; (8005838 <mem_free+0xb4>)
 80057a4:	4825      	ldr	r0, [pc, #148]	; (800583c <mem_free+0xb8>)
 80057a6:	f00a fac5 	bl	800fd34 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80057aa:	e040      	b.n	800582e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3b08      	subs	r3, #8
 80057b0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80057b2:	4b23      	ldr	r3, [pc, #140]	; (8005840 <mem_free+0xbc>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d306      	bcc.n	80057ca <mem_free+0x46>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f103 020c 	add.w	r2, r3, #12
 80057c2:	4b20      	ldr	r3, [pc, #128]	; (8005844 <mem_free+0xc0>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d907      	bls.n	80057da <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80057ca:	4b1a      	ldr	r3, [pc, #104]	; (8005834 <mem_free+0xb0>)
 80057cc:	f240 227f 	movw	r2, #639	; 0x27f
 80057d0:	491d      	ldr	r1, [pc, #116]	; (8005848 <mem_free+0xc4>)
 80057d2:	481a      	ldr	r0, [pc, #104]	; (800583c <mem_free+0xb8>)
 80057d4:	f00a faae 	bl	800fd34 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80057d8:	e029      	b.n	800582e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	791b      	ldrb	r3, [r3, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d107      	bne.n	80057f2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80057e2:	4b14      	ldr	r3, [pc, #80]	; (8005834 <mem_free+0xb0>)
 80057e4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80057e8:	4918      	ldr	r1, [pc, #96]	; (800584c <mem_free+0xc8>)
 80057ea:	4814      	ldr	r0, [pc, #80]	; (800583c <mem_free+0xb8>)
 80057ec:	f00a faa2 	bl	800fd34 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80057f0:	e01d      	b.n	800582e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f7ff ff8a 	bl	800570c <mem_link_valid>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d107      	bne.n	800580e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80057fe:	4b0d      	ldr	r3, [pc, #52]	; (8005834 <mem_free+0xb0>)
 8005800:	f240 2295 	movw	r2, #661	; 0x295
 8005804:	4912      	ldr	r1, [pc, #72]	; (8005850 <mem_free+0xcc>)
 8005806:	480d      	ldr	r0, [pc, #52]	; (800583c <mem_free+0xb8>)
 8005808:	f00a fa94 	bl	800fd34 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800580c:	e00f      	b.n	800582e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005814:	4b0f      	ldr	r3, [pc, #60]	; (8005854 <mem_free+0xd0>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	429a      	cmp	r2, r3
 800581c:	d202      	bcs.n	8005824 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800581e:	4a0d      	ldr	r2, [pc, #52]	; (8005854 <mem_free+0xd0>)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f7ff fe93 	bl	8005550 <plug_holes>
 800582a:	e000      	b.n	800582e <mem_free+0xaa>
    return;
 800582c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	08011258 	.word	0x08011258
 8005838:	0801132c 	.word	0x0801132c
 800583c:	080112a0 	.word	0x080112a0
 8005840:	200000ac 	.word	0x200000ac
 8005844:	200000b0 	.word	0x200000b0
 8005848:	08011350 	.word	0x08011350
 800584c:	0801136c 	.word	0x0801136c
 8005850:	08011394 	.word	0x08011394
 8005854:	200000b4 	.word	0x200000b4

08005858 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	460b      	mov	r3, r1
 8005862:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005864:	887b      	ldrh	r3, [r7, #2]
 8005866:	3303      	adds	r3, #3
 8005868:	b29b      	uxth	r3, r3
 800586a:	f023 0303 	bic.w	r3, r3, #3
 800586e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005870:	8bfb      	ldrh	r3, [r7, #30]
 8005872:	2b0b      	cmp	r3, #11
 8005874:	d801      	bhi.n	800587a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005876:	230c      	movs	r3, #12
 8005878:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800587a:	8bfb      	ldrh	r3, [r7, #30]
 800587c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005880:	d803      	bhi.n	800588a <mem_trim+0x32>
 8005882:	8bfa      	ldrh	r2, [r7, #30]
 8005884:	887b      	ldrh	r3, [r7, #2]
 8005886:	429a      	cmp	r2, r3
 8005888:	d201      	bcs.n	800588e <mem_trim+0x36>
    return NULL;
 800588a:	2300      	movs	r3, #0
 800588c:	e0cc      	b.n	8005a28 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800588e:	4b68      	ldr	r3, [pc, #416]	; (8005a30 <mem_trim+0x1d8>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	429a      	cmp	r2, r3
 8005896:	d304      	bcc.n	80058a2 <mem_trim+0x4a>
 8005898:	4b66      	ldr	r3, [pc, #408]	; (8005a34 <mem_trim+0x1dc>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d306      	bcc.n	80058b0 <mem_trim+0x58>
 80058a2:	4b65      	ldr	r3, [pc, #404]	; (8005a38 <mem_trim+0x1e0>)
 80058a4:	f240 22d1 	movw	r2, #721	; 0x2d1
 80058a8:	4964      	ldr	r1, [pc, #400]	; (8005a3c <mem_trim+0x1e4>)
 80058aa:	4865      	ldr	r0, [pc, #404]	; (8005a40 <mem_trim+0x1e8>)
 80058ac:	f00a fa42 	bl	800fd34 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80058b0:	4b5f      	ldr	r3, [pc, #380]	; (8005a30 <mem_trim+0x1d8>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d304      	bcc.n	80058c4 <mem_trim+0x6c>
 80058ba:	4b5e      	ldr	r3, [pc, #376]	; (8005a34 <mem_trim+0x1dc>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d301      	bcc.n	80058c8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	e0af      	b.n	8005a28 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3b08      	subs	r3, #8
 80058cc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80058ce:	69b8      	ldr	r0, [r7, #24]
 80058d0:	f7ff fe2c 	bl	800552c <mem_to_ptr>
 80058d4:	4603      	mov	r3, r0
 80058d6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	881a      	ldrh	r2, [r3, #0]
 80058dc:	8afb      	ldrh	r3, [r7, #22]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	3b08      	subs	r3, #8
 80058e4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80058e6:	8bfa      	ldrh	r2, [r7, #30]
 80058e8:	8abb      	ldrh	r3, [r7, #20]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d906      	bls.n	80058fc <mem_trim+0xa4>
 80058ee:	4b52      	ldr	r3, [pc, #328]	; (8005a38 <mem_trim+0x1e0>)
 80058f0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80058f4:	4953      	ldr	r1, [pc, #332]	; (8005a44 <mem_trim+0x1ec>)
 80058f6:	4852      	ldr	r0, [pc, #328]	; (8005a40 <mem_trim+0x1e8>)
 80058f8:	f00a fa1c 	bl	800fd34 <iprintf>
  if (newsize > size) {
 80058fc:	8bfa      	ldrh	r2, [r7, #30]
 80058fe:	8abb      	ldrh	r3, [r7, #20]
 8005900:	429a      	cmp	r2, r3
 8005902:	d901      	bls.n	8005908 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005904:	2300      	movs	r3, #0
 8005906:	e08f      	b.n	8005a28 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005908:	8bfa      	ldrh	r2, [r7, #30]
 800590a:	8abb      	ldrh	r3, [r7, #20]
 800590c:	429a      	cmp	r2, r3
 800590e:	d101      	bne.n	8005914 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	e089      	b.n	8005a28 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	4618      	mov	r0, r3
 800591a:	f7ff fdf5 	bl	8005508 <ptr_to_mem>
 800591e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	791b      	ldrb	r3, [r3, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d13f      	bne.n	80059a8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005930:	d106      	bne.n	8005940 <mem_trim+0xe8>
 8005932:	4b41      	ldr	r3, [pc, #260]	; (8005a38 <mem_trim+0x1e0>)
 8005934:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005938:	4943      	ldr	r1, [pc, #268]	; (8005a48 <mem_trim+0x1f0>)
 800593a:	4841      	ldr	r0, [pc, #260]	; (8005a40 <mem_trim+0x1e8>)
 800593c:	f00a f9fa 	bl	800fd34 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	881b      	ldrh	r3, [r3, #0]
 8005944:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005946:	8afa      	ldrh	r2, [r7, #22]
 8005948:	8bfb      	ldrh	r3, [r7, #30]
 800594a:	4413      	add	r3, r2
 800594c:	b29b      	uxth	r3, r3
 800594e:	3308      	adds	r3, #8
 8005950:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005952:	4b3e      	ldr	r3, [pc, #248]	; (8005a4c <mem_trim+0x1f4>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	429a      	cmp	r2, r3
 800595a:	d106      	bne.n	800596a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800595c:	89fb      	ldrh	r3, [r7, #14]
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff fdd2 	bl	8005508 <ptr_to_mem>
 8005964:	4603      	mov	r3, r0
 8005966:	4a39      	ldr	r2, [pc, #228]	; (8005a4c <mem_trim+0x1f4>)
 8005968:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800596a:	89fb      	ldrh	r3, [r7, #14]
 800596c:	4618      	mov	r0, r3
 800596e:	f7ff fdcb 	bl	8005508 <ptr_to_mem>
 8005972:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	2200      	movs	r2, #0
 8005978:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	89ba      	ldrh	r2, [r7, #12]
 800597e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	8afa      	ldrh	r2, [r7, #22]
 8005984:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	89fa      	ldrh	r2, [r7, #14]
 800598a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005994:	d047      	beq.n	8005a26 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	4618      	mov	r0, r3
 800599c:	f7ff fdb4 	bl	8005508 <ptr_to_mem>
 80059a0:	4602      	mov	r2, r0
 80059a2:	89fb      	ldrh	r3, [r7, #14]
 80059a4:	8053      	strh	r3, [r2, #2]
 80059a6:	e03e      	b.n	8005a26 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80059a8:	8bfb      	ldrh	r3, [r7, #30]
 80059aa:	f103 0214 	add.w	r2, r3, #20
 80059ae:	8abb      	ldrh	r3, [r7, #20]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d838      	bhi.n	8005a26 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80059b4:	8afa      	ldrh	r2, [r7, #22]
 80059b6:	8bfb      	ldrh	r3, [r7, #30]
 80059b8:	4413      	add	r3, r2
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3308      	adds	r3, #8
 80059be:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	881b      	ldrh	r3, [r3, #0]
 80059c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80059c8:	d106      	bne.n	80059d8 <mem_trim+0x180>
 80059ca:	4b1b      	ldr	r3, [pc, #108]	; (8005a38 <mem_trim+0x1e0>)
 80059cc:	f240 3216 	movw	r2, #790	; 0x316
 80059d0:	491d      	ldr	r1, [pc, #116]	; (8005a48 <mem_trim+0x1f0>)
 80059d2:	481b      	ldr	r0, [pc, #108]	; (8005a40 <mem_trim+0x1e8>)
 80059d4:	f00a f9ae 	bl	800fd34 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80059d8:	89fb      	ldrh	r3, [r7, #14]
 80059da:	4618      	mov	r0, r3
 80059dc:	f7ff fd94 	bl	8005508 <ptr_to_mem>
 80059e0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80059e2:	4b1a      	ldr	r3, [pc, #104]	; (8005a4c <mem_trim+0x1f4>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d202      	bcs.n	80059f2 <mem_trim+0x19a>
      lfree = mem2;
 80059ec:	4a17      	ldr	r2, [pc, #92]	; (8005a4c <mem_trim+0x1f4>)
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	2200      	movs	r2, #0
 80059f6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	881a      	ldrh	r2, [r3, #0]
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	8afa      	ldrh	r2, [r7, #22]
 8005a04:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	89fa      	ldrh	r2, [r7, #14]
 8005a0a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005a14:	d007      	beq.n	8005a26 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7ff fd74 	bl	8005508 <ptr_to_mem>
 8005a20:	4602      	mov	r2, r0
 8005a22:	89fb      	ldrh	r3, [r7, #14]
 8005a24:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005a26:	687b      	ldr	r3, [r7, #4]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3720      	adds	r7, #32
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	200000ac 	.word	0x200000ac
 8005a34:	200000b0 	.word	0x200000b0
 8005a38:	08011258 	.word	0x08011258
 8005a3c:	080113c8 	.word	0x080113c8
 8005a40:	080112a0 	.word	0x080112a0
 8005a44:	080113e0 	.word	0x080113e0
 8005a48:	08011400 	.word	0x08011400
 8005a4c:	200000b4 	.word	0x200000b4

08005a50 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	4603      	mov	r3, r0
 8005a58:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005a5a:	88fb      	ldrh	r3, [r7, #6]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <mem_malloc+0x14>
    return NULL;
 8005a60:	2300      	movs	r3, #0
 8005a62:	e0d9      	b.n	8005c18 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005a64:	88fb      	ldrh	r3, [r7, #6]
 8005a66:	3303      	adds	r3, #3
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	f023 0303 	bic.w	r3, r3, #3
 8005a6e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005a70:	8bbb      	ldrh	r3, [r7, #28]
 8005a72:	2b0b      	cmp	r3, #11
 8005a74:	d801      	bhi.n	8005a7a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005a76:	230c      	movs	r3, #12
 8005a78:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005a7a:	8bbb      	ldrh	r3, [r7, #28]
 8005a7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005a80:	d803      	bhi.n	8005a8a <mem_malloc+0x3a>
 8005a82:	8bba      	ldrh	r2, [r7, #28]
 8005a84:	88fb      	ldrh	r3, [r7, #6]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d201      	bcs.n	8005a8e <mem_malloc+0x3e>
    return NULL;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	e0c4      	b.n	8005c18 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005a8e:	4b64      	ldr	r3, [pc, #400]	; (8005c20 <mem_malloc+0x1d0>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7ff fd4a 	bl	800552c <mem_to_ptr>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	83fb      	strh	r3, [r7, #30]
 8005a9c:	e0b4      	b.n	8005c08 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005a9e:	8bfb      	ldrh	r3, [r7, #30]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7ff fd31 	bl	8005508 <ptr_to_mem>
 8005aa6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	791b      	ldrb	r3, [r3, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f040 80a4 	bne.w	8005bfa <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	8bfb      	ldrh	r3, [r7, #30]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	f1a3 0208 	sub.w	r2, r3, #8
 8005ac0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	f0c0 8099 	bcc.w	8005bfa <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	461a      	mov	r2, r3
 8005ace:	8bfb      	ldrh	r3, [r7, #30]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	f1a3 0208 	sub.w	r2, r3, #8
 8005ad6:	8bbb      	ldrh	r3, [r7, #28]
 8005ad8:	3314      	adds	r3, #20
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d333      	bcc.n	8005b46 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005ade:	8bfa      	ldrh	r2, [r7, #30]
 8005ae0:	8bbb      	ldrh	r3, [r7, #28]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	3308      	adds	r3, #8
 8005ae8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005aea:	8a7b      	ldrh	r3, [r7, #18]
 8005aec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005af0:	d106      	bne.n	8005b00 <mem_malloc+0xb0>
 8005af2:	4b4c      	ldr	r3, [pc, #304]	; (8005c24 <mem_malloc+0x1d4>)
 8005af4:	f240 3287 	movw	r2, #903	; 0x387
 8005af8:	494b      	ldr	r1, [pc, #300]	; (8005c28 <mem_malloc+0x1d8>)
 8005afa:	484c      	ldr	r0, [pc, #304]	; (8005c2c <mem_malloc+0x1dc>)
 8005afc:	f00a f91a 	bl	800fd34 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005b00:	8a7b      	ldrh	r3, [r7, #18]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7ff fd00 	bl	8005508 <ptr_to_mem>
 8005b08:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	881a      	ldrh	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8bfa      	ldrh	r2, [r7, #30]
 8005b1c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	8a7a      	ldrh	r2, [r7, #18]
 8005b22:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	2201      	movs	r2, #1
 8005b28:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005b32:	d00b      	beq.n	8005b4c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7ff fce5 	bl	8005508 <ptr_to_mem>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	8a7b      	ldrh	r3, [r7, #18]
 8005b42:	8053      	strh	r3, [r2, #2]
 8005b44:	e002      	b.n	8005b4c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005b4c:	4b34      	ldr	r3, [pc, #208]	; (8005c20 <mem_malloc+0x1d0>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d127      	bne.n	8005ba6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005b56:	4b32      	ldr	r3, [pc, #200]	; (8005c20 <mem_malloc+0x1d0>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005b5c:	e005      	b.n	8005b6a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7ff fcd0 	bl	8005508 <ptr_to_mem>
 8005b68:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	791b      	ldrb	r3, [r3, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d004      	beq.n	8005b7c <mem_malloc+0x12c>
 8005b72:	4b2f      	ldr	r3, [pc, #188]	; (8005c30 <mem_malloc+0x1e0>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d1f0      	bne.n	8005b5e <mem_malloc+0x10e>
          }
          lfree = cur;
 8005b7c:	4a28      	ldr	r2, [pc, #160]	; (8005c20 <mem_malloc+0x1d0>)
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005b82:	4b27      	ldr	r3, [pc, #156]	; (8005c20 <mem_malloc+0x1d0>)
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	4b2a      	ldr	r3, [pc, #168]	; (8005c30 <mem_malloc+0x1e0>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d00b      	beq.n	8005ba6 <mem_malloc+0x156>
 8005b8e:	4b24      	ldr	r3, [pc, #144]	; (8005c20 <mem_malloc+0x1d0>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	791b      	ldrb	r3, [r3, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d006      	beq.n	8005ba6 <mem_malloc+0x156>
 8005b98:	4b22      	ldr	r3, [pc, #136]	; (8005c24 <mem_malloc+0x1d4>)
 8005b9a:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005b9e:	4925      	ldr	r1, [pc, #148]	; (8005c34 <mem_malloc+0x1e4>)
 8005ba0:	4822      	ldr	r0, [pc, #136]	; (8005c2c <mem_malloc+0x1dc>)
 8005ba2:	f00a f8c7 	bl	800fd34 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005ba6:	8bba      	ldrh	r2, [r7, #28]
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	4413      	add	r3, r2
 8005bac:	3308      	adds	r3, #8
 8005bae:	4a20      	ldr	r2, [pc, #128]	; (8005c30 <mem_malloc+0x1e0>)
 8005bb0:	6812      	ldr	r2, [r2, #0]
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d906      	bls.n	8005bc4 <mem_malloc+0x174>
 8005bb6:	4b1b      	ldr	r3, [pc, #108]	; (8005c24 <mem_malloc+0x1d4>)
 8005bb8:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005bbc:	491e      	ldr	r1, [pc, #120]	; (8005c38 <mem_malloc+0x1e8>)
 8005bbe:	481b      	ldr	r0, [pc, #108]	; (8005c2c <mem_malloc+0x1dc>)
 8005bc0:	f00a f8b8 	bl	800fd34 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f003 0303 	and.w	r3, r3, #3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d006      	beq.n	8005bdc <mem_malloc+0x18c>
 8005bce:	4b15      	ldr	r3, [pc, #84]	; (8005c24 <mem_malloc+0x1d4>)
 8005bd0:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005bd4:	4919      	ldr	r1, [pc, #100]	; (8005c3c <mem_malloc+0x1ec>)
 8005bd6:	4815      	ldr	r0, [pc, #84]	; (8005c2c <mem_malloc+0x1dc>)
 8005bd8:	f00a f8ac 	bl	800fd34 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f003 0303 	and.w	r3, r3, #3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d006      	beq.n	8005bf4 <mem_malloc+0x1a4>
 8005be6:	4b0f      	ldr	r3, [pc, #60]	; (8005c24 <mem_malloc+0x1d4>)
 8005be8:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005bec:	4914      	ldr	r1, [pc, #80]	; (8005c40 <mem_malloc+0x1f0>)
 8005bee:	480f      	ldr	r0, [pc, #60]	; (8005c2c <mem_malloc+0x1dc>)
 8005bf0:	f00a f8a0 	bl	800fd34 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	3308      	adds	r3, #8
 8005bf8:	e00e      	b.n	8005c18 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005bfa:	8bfb      	ldrh	r3, [r7, #30]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7ff fc83 	bl	8005508 <ptr_to_mem>
 8005c02:	4603      	mov	r3, r0
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005c08:	8bfa      	ldrh	r2, [r7, #30]
 8005c0a:	8bbb      	ldrh	r3, [r7, #28]
 8005c0c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005c10:	429a      	cmp	r2, r3
 8005c12:	f4ff af44 	bcc.w	8005a9e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3720      	adds	r7, #32
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	200000b4 	.word	0x200000b4
 8005c24:	08011258 	.word	0x08011258
 8005c28:	08011400 	.word	0x08011400
 8005c2c:	080112a0 	.word	0x080112a0
 8005c30:	200000b0 	.word	0x200000b0
 8005c34:	08011414 	.word	0x08011414
 8005c38:	08011430 	.word	0x08011430
 8005c3c:	08011460 	.word	0x08011460
 8005c40:	08011490 	.word	0x08011490

08005c44 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	2200      	movs	r2, #0
 8005c52:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	3303      	adds	r3, #3
 8005c5a:	f023 0303 	bic.w	r3, r3, #3
 8005c5e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005c60:	2300      	movs	r3, #0
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	e011      	b.n	8005c8a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	4413      	add	r3, r2
 8005c82:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3301      	adds	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	885b      	ldrh	r3, [r3, #2]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4293      	cmp	r3, r2
 8005c94:	dbe7      	blt.n	8005c66 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005c96:	bf00      	nop
 8005c98:	bf00      	nop
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005caa:	2300      	movs	r3, #0
 8005cac:	80fb      	strh	r3, [r7, #6]
 8005cae:	e009      	b.n	8005cc4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005cb0:	88fb      	ldrh	r3, [r7, #6]
 8005cb2:	4a08      	ldr	r2, [pc, #32]	; (8005cd4 <memp_init+0x30>)
 8005cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7ff ffc3 	bl	8005c44 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005cbe:	88fb      	ldrh	r3, [r7, #6]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	80fb      	strh	r3, [r7, #6]
 8005cc4:	88fb      	ldrh	r3, [r7, #6]
 8005cc6:	2b08      	cmp	r3, #8
 8005cc8:	d9f2      	bls.n	8005cb0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005cca:	bf00      	nop
 8005ccc:	bf00      	nop
 8005cce:	3708      	adds	r7, #8
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	08013c60 	.word	0x08013c60

08005cd8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d012      	beq.n	8005d14 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	6812      	ldr	r2, [r2, #0]
 8005cf6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f003 0303 	and.w	r3, r3, #3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d006      	beq.n	8005d10 <do_memp_malloc_pool+0x38>
 8005d02:	4b07      	ldr	r3, [pc, #28]	; (8005d20 <do_memp_malloc_pool+0x48>)
 8005d04:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005d08:	4906      	ldr	r1, [pc, #24]	; (8005d24 <do_memp_malloc_pool+0x4c>)
 8005d0a:	4807      	ldr	r0, [pc, #28]	; (8005d28 <do_memp_malloc_pool+0x50>)
 8005d0c:	f00a f812 	bl	800fd34 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	e000      	b.n	8005d16 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	080114b4 	.word	0x080114b4
 8005d24:	080114e4 	.word	0x080114e4
 8005d28:	08011508 	.word	0x08011508

08005d2c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	4603      	mov	r3, r0
 8005d34:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005d36:	79fb      	ldrb	r3, [r7, #7]
 8005d38:	2b08      	cmp	r3, #8
 8005d3a:	d908      	bls.n	8005d4e <memp_malloc+0x22>
 8005d3c:	4b0a      	ldr	r3, [pc, #40]	; (8005d68 <memp_malloc+0x3c>)
 8005d3e:	f240 1257 	movw	r2, #343	; 0x157
 8005d42:	490a      	ldr	r1, [pc, #40]	; (8005d6c <memp_malloc+0x40>)
 8005d44:	480a      	ldr	r0, [pc, #40]	; (8005d70 <memp_malloc+0x44>)
 8005d46:	f009 fff5 	bl	800fd34 <iprintf>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	e008      	b.n	8005d60 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005d4e:	79fb      	ldrb	r3, [r7, #7]
 8005d50:	4a08      	ldr	r2, [pc, #32]	; (8005d74 <memp_malloc+0x48>)
 8005d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff ffbe 	bl	8005cd8 <do_memp_malloc_pool>
 8005d5c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	080114b4 	.word	0x080114b4
 8005d6c:	08011544 	.word	0x08011544
 8005d70:	08011508 	.word	0x08011508
 8005d74:	08013c60 	.word	0x08013c60

08005d78 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	f003 0303 	and.w	r3, r3, #3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d006      	beq.n	8005d9a <do_memp_free_pool+0x22>
 8005d8c:	4b0a      	ldr	r3, [pc, #40]	; (8005db8 <do_memp_free_pool+0x40>)
 8005d8e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8005d92:	490a      	ldr	r1, [pc, #40]	; (8005dbc <do_memp_free_pool+0x44>)
 8005d94:	480a      	ldr	r0, [pc, #40]	; (8005dc0 <do_memp_free_pool+0x48>)
 8005d96:	f009 ffcd 	bl	800fd34 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005db0:	bf00      	nop
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	080114b4 	.word	0x080114b4
 8005dbc:	08011564 	.word	0x08011564
 8005dc0:	08011508 	.word	0x08011508

08005dc4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	4603      	mov	r3, r0
 8005dcc:	6039      	str	r1, [r7, #0]
 8005dce:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005dd0:	79fb      	ldrb	r3, [r7, #7]
 8005dd2:	2b08      	cmp	r3, #8
 8005dd4:	d907      	bls.n	8005de6 <memp_free+0x22>
 8005dd6:	4b0c      	ldr	r3, [pc, #48]	; (8005e08 <memp_free+0x44>)
 8005dd8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005ddc:	490b      	ldr	r1, [pc, #44]	; (8005e0c <memp_free+0x48>)
 8005dde:	480c      	ldr	r0, [pc, #48]	; (8005e10 <memp_free+0x4c>)
 8005de0:	f009 ffa8 	bl	800fd34 <iprintf>
 8005de4:	e00c      	b.n	8005e00 <memp_free+0x3c>

  if (mem == NULL) {
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d008      	beq.n	8005dfe <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005dec:	79fb      	ldrb	r3, [r7, #7]
 8005dee:	4a09      	ldr	r2, [pc, #36]	; (8005e14 <memp_free+0x50>)
 8005df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005df4:	6839      	ldr	r1, [r7, #0]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7ff ffbe 	bl	8005d78 <do_memp_free_pool>
 8005dfc:	e000      	b.n	8005e00 <memp_free+0x3c>
    return;
 8005dfe:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005e00:	3708      	adds	r7, #8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	080114b4 	.word	0x080114b4
 8005e0c:	08011584 	.word	0x08011584
 8005e10:	08011508 	.word	0x08011508
 8005e14:	08013c60 	.word	0x08013c60

08005e18 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005e1c:	bf00      	nop
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
	...

08005e28 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
 8005e34:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d108      	bne.n	8005e4e <netif_add+0x26>
 8005e3c:	4b57      	ldr	r3, [pc, #348]	; (8005f9c <netif_add+0x174>)
 8005e3e:	f240 1227 	movw	r2, #295	; 0x127
 8005e42:	4957      	ldr	r1, [pc, #348]	; (8005fa0 <netif_add+0x178>)
 8005e44:	4857      	ldr	r0, [pc, #348]	; (8005fa4 <netif_add+0x17c>)
 8005e46:	f009 ff75 	bl	800fd34 <iprintf>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	e0a2      	b.n	8005f94 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d108      	bne.n	8005e66 <netif_add+0x3e>
 8005e54:	4b51      	ldr	r3, [pc, #324]	; (8005f9c <netif_add+0x174>)
 8005e56:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005e5a:	4953      	ldr	r1, [pc, #332]	; (8005fa8 <netif_add+0x180>)
 8005e5c:	4851      	ldr	r0, [pc, #324]	; (8005fa4 <netif_add+0x17c>)
 8005e5e:	f009 ff69 	bl	800fd34 <iprintf>
 8005e62:	2300      	movs	r3, #0
 8005e64:	e096      	b.n	8005f94 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005e6c:	4b4f      	ldr	r3, [pc, #316]	; (8005fac <netif_add+0x184>)
 8005e6e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005e76:	4b4d      	ldr	r3, [pc, #308]	; (8005fac <netif_add+0x184>)
 8005e78:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005e80:	4b4a      	ldr	r3, [pc, #296]	; (8005fac <netif_add+0x184>)
 8005e82:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4a45      	ldr	r2, [pc, #276]	; (8005fb0 <netif_add+0x188>)
 8005e9a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6a3a      	ldr	r2, [r7, #32]
 8005eb4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005eb6:	4b3f      	ldr	r3, [pc, #252]	; (8005fb4 <netif_add+0x18c>)
 8005eb8:	781a      	ldrb	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ec4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	68b9      	ldr	r1, [r7, #8]
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 f913 	bl	80060f8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	4798      	blx	r3
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <netif_add+0xba>
    return NULL;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	e058      	b.n	8005f94 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ee8:	2bff      	cmp	r3, #255	; 0xff
 8005eea:	d103      	bne.n	8005ef4 <netif_add+0xcc>
        netif->num = 0;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005ef8:	4b2f      	ldr	r3, [pc, #188]	; (8005fb8 <netif_add+0x190>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	617b      	str	r3, [r7, #20]
 8005efe:	e02b      	b.n	8005f58 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d106      	bne.n	8005f16 <netif_add+0xee>
 8005f08:	4b24      	ldr	r3, [pc, #144]	; (8005f9c <netif_add+0x174>)
 8005f0a:	f240 128b 	movw	r2, #395	; 0x18b
 8005f0e:	492b      	ldr	r1, [pc, #172]	; (8005fbc <netif_add+0x194>)
 8005f10:	4824      	ldr	r0, [pc, #144]	; (8005fa4 <netif_add+0x17c>)
 8005f12:	f009 ff0f 	bl	800fd34 <iprintf>
        num_netifs++;
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	2bff      	cmp	r3, #255	; 0xff
 8005f20:	dd06      	ble.n	8005f30 <netif_add+0x108>
 8005f22:	4b1e      	ldr	r3, [pc, #120]	; (8005f9c <netif_add+0x174>)
 8005f24:	f240 128d 	movw	r2, #397	; 0x18d
 8005f28:	4925      	ldr	r1, [pc, #148]	; (8005fc0 <netif_add+0x198>)
 8005f2a:	481e      	ldr	r0, [pc, #120]	; (8005fa4 <netif_add+0x17c>)
 8005f2c:	f009 ff02 	bl	800fd34 <iprintf>
        if (netif2->num == netif->num) {
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d108      	bne.n	8005f52 <netif_add+0x12a>
          netif->num++;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f46:	3301      	adds	r3, #1
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8005f50:	e005      	b.n	8005f5e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	617b      	str	r3, [r7, #20]
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1d0      	bne.n	8005f00 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1be      	bne.n	8005ee2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f6a:	2bfe      	cmp	r3, #254	; 0xfe
 8005f6c:	d103      	bne.n	8005f76 <netif_add+0x14e>
    netif_num = 0;
 8005f6e:	4b11      	ldr	r3, [pc, #68]	; (8005fb4 <netif_add+0x18c>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	701a      	strb	r2, [r3, #0]
 8005f74:	e006      	b.n	8005f84 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	4b0c      	ldr	r3, [pc, #48]	; (8005fb4 <netif_add+0x18c>)
 8005f82:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005f84:	4b0c      	ldr	r3, [pc, #48]	; (8005fb8 <netif_add+0x190>)
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005f8c:	4a0a      	ldr	r2, [pc, #40]	; (8005fb8 <netif_add+0x190>)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005f92:	68fb      	ldr	r3, [r7, #12]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3718      	adds	r7, #24
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	080115a0 	.word	0x080115a0
 8005fa0:	08011634 	.word	0x08011634
 8005fa4:	080115f0 	.word	0x080115f0
 8005fa8:	08011650 	.word	0x08011650
 8005fac:	08013cc4 	.word	0x08013cc4
 8005fb0:	0800630b 	.word	0x0800630b
 8005fb4:	200000dc 	.word	0x200000dc
 8005fb8:	20006a1c 	.word	0x20006a1c
 8005fbc:	08011674 	.word	0x08011674
 8005fc0:	08011688 	.word	0x08011688

08005fc4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005fce:	6839      	ldr	r1, [r7, #0]
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f002 fe21 	bl	8008c18 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005fd6:	6839      	ldr	r1, [r7, #0]
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f007 fb59 	bl	800d690 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005fde:	bf00      	nop
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
	...

08005fe8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d106      	bne.n	8006008 <netif_do_set_ipaddr+0x20>
 8005ffa:	4b1d      	ldr	r3, [pc, #116]	; (8006070 <netif_do_set_ipaddr+0x88>)
 8005ffc:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006000:	491c      	ldr	r1, [pc, #112]	; (8006074 <netif_do_set_ipaddr+0x8c>)
 8006002:	481d      	ldr	r0, [pc, #116]	; (8006078 <netif_do_set_ipaddr+0x90>)
 8006004:	f009 fe96 	bl	800fd34 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d106      	bne.n	800601c <netif_do_set_ipaddr+0x34>
 800600e:	4b18      	ldr	r3, [pc, #96]	; (8006070 <netif_do_set_ipaddr+0x88>)
 8006010:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006014:	4917      	ldr	r1, [pc, #92]	; (8006074 <netif_do_set_ipaddr+0x8c>)
 8006016:	4818      	ldr	r0, [pc, #96]	; (8006078 <netif_do_set_ipaddr+0x90>)
 8006018:	f009 fe8c 	bl	800fd34 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	3304      	adds	r3, #4
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	429a      	cmp	r2, r3
 8006028:	d01c      	beq.n	8006064 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3304      	adds	r3, #4
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800603a:	f107 0314 	add.w	r3, r7, #20
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7ff ffbf 	bl	8005fc4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <netif_do_set_ipaddr+0x6a>
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	e000      	b.n	8006054 <netif_do_set_ipaddr+0x6c>
 8006052:	2300      	movs	r3, #0
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006058:	2101      	movs	r1, #1
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 f8d2 	bl	8006204 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006060:	2301      	movs	r3, #1
 8006062:	e000      	b.n	8006066 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3718      	adds	r7, #24
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	080115a0 	.word	0x080115a0
 8006074:	080116b8 	.word	0x080116b8
 8006078:	080115f0 	.word	0x080115f0

0800607c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	3308      	adds	r3, #8
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	429a      	cmp	r2, r3
 8006094:	d00a      	beq.n	80060ac <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d002      	beq.n	80060a2 <netif_do_set_netmask+0x26>
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	e000      	b.n	80060a4 <netif_do_set_netmask+0x28>
 80060a2:	2300      	movs	r3, #0
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80060a8:	2301      	movs	r3, #1
 80060aa:	e000      	b.n	80060ae <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b085      	sub	sp, #20
 80060be:	af00      	add	r7, sp, #0
 80060c0:	60f8      	str	r0, [r7, #12]
 80060c2:	60b9      	str	r1, [r7, #8]
 80060c4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	330c      	adds	r3, #12
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d00a      	beq.n	80060ea <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d002      	beq.n	80060e0 <netif_do_set_gw+0x26>
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	e000      	b.n	80060e2 <netif_do_set_gw+0x28>
 80060e0:	2300      	movs	r3, #0
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80060e6:	2301      	movs	r3, #1
 80060e8:	e000      	b.n	80060ec <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b088      	sub	sp, #32
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8006106:	2300      	movs	r3, #0
 8006108:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800610a:	2300      	movs	r3, #0
 800610c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006114:	4b1c      	ldr	r3, [pc, #112]	; (8006188 <netif_set_addr+0x90>)
 8006116:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800611e:	4b1a      	ldr	r3, [pc, #104]	; (8006188 <netif_set_addr+0x90>)
 8006120:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006128:	4b17      	ldr	r3, [pc, #92]	; (8006188 <netif_set_addr+0x90>)
 800612a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d003      	beq.n	800613a <netif_set_addr+0x42>
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <netif_set_addr+0x46>
 800613a:	2301      	movs	r3, #1
 800613c:	e000      	b.n	8006140 <netif_set_addr+0x48>
 800613e:	2300      	movs	r3, #0
 8006140:	617b      	str	r3, [r7, #20]
  if (remove) {
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d006      	beq.n	8006156 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006148:	f107 0310 	add.w	r3, r7, #16
 800614c:	461a      	mov	r2, r3
 800614e:	68b9      	ldr	r1, [r7, #8]
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f7ff ff49 	bl	8005fe8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8006156:	69fa      	ldr	r2, [r7, #28]
 8006158:	6879      	ldr	r1, [r7, #4]
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f7ff ff8e 	bl	800607c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	6839      	ldr	r1, [r7, #0]
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f7ff ffa8 	bl	80060ba <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d106      	bne.n	800617e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006170:	f107 0310 	add.w	r3, r7, #16
 8006174:	461a      	mov	r2, r3
 8006176:	68b9      	ldr	r1, [r7, #8]
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f7ff ff35 	bl	8005fe8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800617e:	bf00      	nop
 8006180:	3720      	adds	r7, #32
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	08013cc4 	.word	0x08013cc4

0800618c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006194:	4a04      	ldr	r2, [pc, #16]	; (80061a8 <netif_set_default+0x1c>)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800619a:	bf00      	nop
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	20006a20 	.word	0x20006a20

080061ac <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d107      	bne.n	80061ca <netif_set_up+0x1e>
 80061ba:	4b0f      	ldr	r3, [pc, #60]	; (80061f8 <netif_set_up+0x4c>)
 80061bc:	f44f 7254 	mov.w	r2, #848	; 0x350
 80061c0:	490e      	ldr	r1, [pc, #56]	; (80061fc <netif_set_up+0x50>)
 80061c2:	480f      	ldr	r0, [pc, #60]	; (8006200 <netif_set_up+0x54>)
 80061c4:	f009 fdb6 	bl	800fd34 <iprintf>
 80061c8:	e013      	b.n	80061f2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10c      	bne.n	80061f2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80061de:	f043 0301 	orr.w	r3, r3, #1
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80061ea:	2103      	movs	r1, #3
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f809 	bl	8006204 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	080115a0 	.word	0x080115a0
 80061fc:	08011728 	.word	0x08011728
 8006200:	080115f0 	.word	0x080115f0

08006204 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	460b      	mov	r3, r1
 800620e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d106      	bne.n	8006224 <netif_issue_reports+0x20>
 8006216:	4b18      	ldr	r3, [pc, #96]	; (8006278 <netif_issue_reports+0x74>)
 8006218:	f240 326d 	movw	r2, #877	; 0x36d
 800621c:	4917      	ldr	r1, [pc, #92]	; (800627c <netif_issue_reports+0x78>)
 800621e:	4818      	ldr	r0, [pc, #96]	; (8006280 <netif_issue_reports+0x7c>)
 8006220:	f009 fd88 	bl	800fd34 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800622a:	f003 0304 	and.w	r3, r3, #4
 800622e:	2b00      	cmp	r3, #0
 8006230:	d01e      	beq.n	8006270 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006238:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800623c:	2b00      	cmp	r3, #0
 800623e:	d017      	beq.n	8006270 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d013      	beq.n	8006272 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3304      	adds	r3, #4
 800624e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00e      	beq.n	8006272 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800625a:	f003 0308 	and.w	r3, r3, #8
 800625e:	2b00      	cmp	r3, #0
 8006260:	d007      	beq.n	8006272 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	3304      	adds	r3, #4
 8006266:	4619      	mov	r1, r3
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f008 f97b 	bl	800e564 <etharp_request>
 800626e:	e000      	b.n	8006272 <netif_issue_reports+0x6e>
    return;
 8006270:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	080115a0 	.word	0x080115a0
 800627c:	08011744 	.word	0x08011744
 8006280:	080115f0 	.word	0x080115f0

08006284 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d107      	bne.n	80062a2 <netif_set_down+0x1e>
 8006292:	4b12      	ldr	r3, [pc, #72]	; (80062dc <netif_set_down+0x58>)
 8006294:	f240 329b 	movw	r2, #923	; 0x39b
 8006298:	4911      	ldr	r1, [pc, #68]	; (80062e0 <netif_set_down+0x5c>)
 800629a:	4812      	ldr	r0, [pc, #72]	; (80062e4 <netif_set_down+0x60>)
 800629c:	f009 fd4a 	bl	800fd34 <iprintf>
 80062a0:	e019      	b.n	80062d6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d012      	beq.n	80062d6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80062b6:	f023 0301 	bic.w	r3, r3, #1
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80062c8:	f003 0308 	and.w	r3, r3, #8
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d002      	beq.n	80062d6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f007 fd05 	bl	800dce0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80062d6:	3708      	adds	r7, #8
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	080115a0 	.word	0x080115a0
 80062e0:	08011768 	.word	0x08011768
 80062e4:	080115f0 	.word	0x080115f0

080062e8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	61da      	str	r2, [r3, #28]
  }
}
 80062fe:	bf00      	nop
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800630a:	b480      	push	{r7}
 800630c:	b085      	sub	sp, #20
 800630e:	af00      	add	r7, sp, #0
 8006310:	60f8      	str	r0, [r7, #12]
 8006312:	60b9      	str	r1, [r7, #8]
 8006314:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8006316:	f06f 030b 	mvn.w	r3, #11
}
 800631a:	4618      	mov	r0, r3
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
	...

08006328 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	4603      	mov	r3, r0
 8006330:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006332:	79fb      	ldrb	r3, [r7, #7]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d013      	beq.n	8006360 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006338:	4b0d      	ldr	r3, [pc, #52]	; (8006370 <netif_get_by_index+0x48>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	60fb      	str	r3, [r7, #12]
 800633e:	e00c      	b.n	800635a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006346:	3301      	adds	r3, #1
 8006348:	b2db      	uxtb	r3, r3
 800634a:	79fa      	ldrb	r2, [r7, #7]
 800634c:	429a      	cmp	r2, r3
 800634e:	d101      	bne.n	8006354 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	e006      	b.n	8006362 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	60fb      	str	r3, [r7, #12]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1ef      	bne.n	8006340 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	20006a1c 	.word	0x20006a1c

08006374 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800637a:	4b0c      	ldr	r3, [pc, #48]	; (80063ac <pbuf_free_ooseq+0x38>)
 800637c:	2200      	movs	r2, #0
 800637e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006380:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <pbuf_free_ooseq+0x3c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	607b      	str	r3, [r7, #4]
 8006386:	e00a      	b.n	800639e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800638c:	2b00      	cmp	r3, #0
 800638e:	d003      	beq.n	8006398 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f002 fc7f 	bl	8008c94 <tcp_free_ooseq>
      return;
 8006396:	e005      	b.n	80063a4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	607b      	str	r3, [r7, #4]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1f1      	bne.n	8006388 <pbuf_free_ooseq+0x14>
    }
  }
}
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	20006a24 	.word	0x20006a24
 80063b0:	20006a2c 	.word	0x20006a2c

080063b4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80063b8:	4b03      	ldr	r3, [pc, #12]	; (80063c8 <pbuf_pool_is_empty+0x14>)
 80063ba:	2201      	movs	r2, #1
 80063bc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80063be:	bf00      	nop
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	20006a24 	.word	0x20006a24

080063cc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	4611      	mov	r1, r2
 80063d8:	461a      	mov	r2, r3
 80063da:	460b      	mov	r3, r1
 80063dc:	80fb      	strh	r3, [r7, #6]
 80063de:	4613      	mov	r3, r2
 80063e0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	88fa      	ldrh	r2, [r7, #6]
 80063f2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	88ba      	ldrh	r2, [r7, #4]
 80063f8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80063fa:	8b3b      	ldrh	r3, [r7, #24]
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	7f3a      	ldrb	r2, [r7, #28]
 8006406:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2201      	movs	r2, #1
 800640c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	73da      	strb	r2, [r3, #15]
}
 8006414:	bf00      	nop
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b08c      	sub	sp, #48	; 0x30
 8006424:	af02      	add	r7, sp, #8
 8006426:	4603      	mov	r3, r0
 8006428:	71fb      	strb	r3, [r7, #7]
 800642a:	460b      	mov	r3, r1
 800642c:	80bb      	strh	r3, [r7, #4]
 800642e:	4613      	mov	r3, r2
 8006430:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006432:	79fb      	ldrb	r3, [r7, #7]
 8006434:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8006436:	887b      	ldrh	r3, [r7, #2]
 8006438:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800643c:	d07f      	beq.n	800653e <pbuf_alloc+0x11e>
 800643e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006442:	f300 80c8 	bgt.w	80065d6 <pbuf_alloc+0x1b6>
 8006446:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800644a:	d010      	beq.n	800646e <pbuf_alloc+0x4e>
 800644c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006450:	f300 80c1 	bgt.w	80065d6 <pbuf_alloc+0x1b6>
 8006454:	2b01      	cmp	r3, #1
 8006456:	d002      	beq.n	800645e <pbuf_alloc+0x3e>
 8006458:	2b41      	cmp	r3, #65	; 0x41
 800645a:	f040 80bc 	bne.w	80065d6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800645e:	887a      	ldrh	r2, [r7, #2]
 8006460:	88bb      	ldrh	r3, [r7, #4]
 8006462:	4619      	mov	r1, r3
 8006464:	2000      	movs	r0, #0
 8006466:	f000 f8d1 	bl	800660c <pbuf_alloc_reference>
 800646a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800646c:	e0bd      	b.n	80065ea <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800646e:	2300      	movs	r3, #0
 8006470:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8006472:	2300      	movs	r3, #0
 8006474:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8006476:	88bb      	ldrh	r3, [r7, #4]
 8006478:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800647a:	2008      	movs	r0, #8
 800647c:	f7ff fc56 	bl	8005d2c <memp_malloc>
 8006480:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d109      	bne.n	800649c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8006488:	f7ff ff94 	bl	80063b4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	2b00      	cmp	r3, #0
 8006490:	d002      	beq.n	8006498 <pbuf_alloc+0x78>
            pbuf_free(p);
 8006492:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006494:	f000 faa8 	bl	80069e8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8006498:	2300      	movs	r3, #0
 800649a:	e0a7      	b.n	80065ec <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800649c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800649e:	3303      	adds	r3, #3
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	f023 0303 	bic.w	r3, r3, #3
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	8b7a      	ldrh	r2, [r7, #26]
 80064b0:	4293      	cmp	r3, r2
 80064b2:	bf28      	it	cs
 80064b4:	4613      	movcs	r3, r2
 80064b6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80064b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80064ba:	3310      	adds	r3, #16
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	4413      	add	r3, r2
 80064c0:	3303      	adds	r3, #3
 80064c2:	f023 0303 	bic.w	r3, r3, #3
 80064c6:	4618      	mov	r0, r3
 80064c8:	89f9      	ldrh	r1, [r7, #14]
 80064ca:	8b7a      	ldrh	r2, [r7, #26]
 80064cc:	2300      	movs	r3, #0
 80064ce:	9301      	str	r3, [sp, #4]
 80064d0:	887b      	ldrh	r3, [r7, #2]
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	460b      	mov	r3, r1
 80064d6:	4601      	mov	r1, r0
 80064d8:	6938      	ldr	r0, [r7, #16]
 80064da:	f7ff ff77 	bl	80063cc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f003 0303 	and.w	r3, r3, #3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d006      	beq.n	80064f8 <pbuf_alloc+0xd8>
 80064ea:	4b42      	ldr	r3, [pc, #264]	; (80065f4 <pbuf_alloc+0x1d4>)
 80064ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064f0:	4941      	ldr	r1, [pc, #260]	; (80065f8 <pbuf_alloc+0x1d8>)
 80064f2:	4842      	ldr	r0, [pc, #264]	; (80065fc <pbuf_alloc+0x1dc>)
 80064f4:	f009 fc1e 	bl	800fd34 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80064f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80064fa:	3303      	adds	r3, #3
 80064fc:	f023 0303 	bic.w	r3, r3, #3
 8006500:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006504:	d106      	bne.n	8006514 <pbuf_alloc+0xf4>
 8006506:	4b3b      	ldr	r3, [pc, #236]	; (80065f4 <pbuf_alloc+0x1d4>)
 8006508:	f44f 7281 	mov.w	r2, #258	; 0x102
 800650c:	493c      	ldr	r1, [pc, #240]	; (8006600 <pbuf_alloc+0x1e0>)
 800650e:	483b      	ldr	r0, [pc, #236]	; (80065fc <pbuf_alloc+0x1dc>)
 8006510:	f009 fc10 	bl	800fd34 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	2b00      	cmp	r3, #0
 8006518:	d102      	bne.n	8006520 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
 800651e:	e002      	b.n	8006526 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800652a:	8b7a      	ldrh	r2, [r7, #26]
 800652c:	89fb      	ldrh	r3, [r7, #14]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006532:	2300      	movs	r3, #0
 8006534:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8006536:	8b7b      	ldrh	r3, [r7, #26]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d19e      	bne.n	800647a <pbuf_alloc+0x5a>
      break;
 800653c:	e055      	b.n	80065ea <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800653e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006540:	3303      	adds	r3, #3
 8006542:	b29b      	uxth	r3, r3
 8006544:	f023 0303 	bic.w	r3, r3, #3
 8006548:	b29a      	uxth	r2, r3
 800654a:	88bb      	ldrh	r3, [r7, #4]
 800654c:	3303      	adds	r3, #3
 800654e:	b29b      	uxth	r3, r3
 8006550:	f023 0303 	bic.w	r3, r3, #3
 8006554:	b29b      	uxth	r3, r3
 8006556:	4413      	add	r3, r2
 8006558:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800655a:	8b3b      	ldrh	r3, [r7, #24]
 800655c:	3310      	adds	r3, #16
 800655e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006560:	8b3a      	ldrh	r2, [r7, #24]
 8006562:	88bb      	ldrh	r3, [r7, #4]
 8006564:	3303      	adds	r3, #3
 8006566:	f023 0303 	bic.w	r3, r3, #3
 800656a:	429a      	cmp	r2, r3
 800656c:	d306      	bcc.n	800657c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800656e:	8afa      	ldrh	r2, [r7, #22]
 8006570:	88bb      	ldrh	r3, [r7, #4]
 8006572:	3303      	adds	r3, #3
 8006574:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006578:	429a      	cmp	r2, r3
 800657a:	d201      	bcs.n	8006580 <pbuf_alloc+0x160>
        return NULL;
 800657c:	2300      	movs	r3, #0
 800657e:	e035      	b.n	80065ec <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006580:	8afb      	ldrh	r3, [r7, #22]
 8006582:	4618      	mov	r0, r3
 8006584:	f7ff fa64 	bl	8005a50 <mem_malloc>
 8006588:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	2b00      	cmp	r3, #0
 800658e:	d101      	bne.n	8006594 <pbuf_alloc+0x174>
        return NULL;
 8006590:	2300      	movs	r3, #0
 8006592:	e02b      	b.n	80065ec <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006594:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006596:	3310      	adds	r3, #16
 8006598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800659a:	4413      	add	r3, r2
 800659c:	3303      	adds	r3, #3
 800659e:	f023 0303 	bic.w	r3, r3, #3
 80065a2:	4618      	mov	r0, r3
 80065a4:	88b9      	ldrh	r1, [r7, #4]
 80065a6:	88ba      	ldrh	r2, [r7, #4]
 80065a8:	2300      	movs	r3, #0
 80065aa:	9301      	str	r3, [sp, #4]
 80065ac:	887b      	ldrh	r3, [r7, #2]
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	460b      	mov	r3, r1
 80065b2:	4601      	mov	r1, r0
 80065b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065b6:	f7ff ff09 	bl	80063cc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f003 0303 	and.w	r3, r3, #3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d010      	beq.n	80065e8 <pbuf_alloc+0x1c8>
 80065c6:	4b0b      	ldr	r3, [pc, #44]	; (80065f4 <pbuf_alloc+0x1d4>)
 80065c8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80065cc:	490d      	ldr	r1, [pc, #52]	; (8006604 <pbuf_alloc+0x1e4>)
 80065ce:	480b      	ldr	r0, [pc, #44]	; (80065fc <pbuf_alloc+0x1dc>)
 80065d0:	f009 fbb0 	bl	800fd34 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80065d4:	e008      	b.n	80065e8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80065d6:	4b07      	ldr	r3, [pc, #28]	; (80065f4 <pbuf_alloc+0x1d4>)
 80065d8:	f240 1227 	movw	r2, #295	; 0x127
 80065dc:	490a      	ldr	r1, [pc, #40]	; (8006608 <pbuf_alloc+0x1e8>)
 80065de:	4807      	ldr	r0, [pc, #28]	; (80065fc <pbuf_alloc+0x1dc>)
 80065e0:	f009 fba8 	bl	800fd34 <iprintf>
      return NULL;
 80065e4:	2300      	movs	r3, #0
 80065e6:	e001      	b.n	80065ec <pbuf_alloc+0x1cc>
      break;
 80065e8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3728      	adds	r7, #40	; 0x28
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	080117d0 	.word	0x080117d0
 80065f8:	08011800 	.word	0x08011800
 80065fc:	08011830 	.word	0x08011830
 8006600:	08011858 	.word	0x08011858
 8006604:	0801188c 	.word	0x0801188c
 8006608:	080118b8 	.word	0x080118b8

0800660c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af02      	add	r7, sp, #8
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	460b      	mov	r3, r1
 8006616:	807b      	strh	r3, [r7, #2]
 8006618:	4613      	mov	r3, r2
 800661a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800661c:	883b      	ldrh	r3, [r7, #0]
 800661e:	2b41      	cmp	r3, #65	; 0x41
 8006620:	d009      	beq.n	8006636 <pbuf_alloc_reference+0x2a>
 8006622:	883b      	ldrh	r3, [r7, #0]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d006      	beq.n	8006636 <pbuf_alloc_reference+0x2a>
 8006628:	4b0f      	ldr	r3, [pc, #60]	; (8006668 <pbuf_alloc_reference+0x5c>)
 800662a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800662e:	490f      	ldr	r1, [pc, #60]	; (800666c <pbuf_alloc_reference+0x60>)
 8006630:	480f      	ldr	r0, [pc, #60]	; (8006670 <pbuf_alloc_reference+0x64>)
 8006632:	f009 fb7f 	bl	800fd34 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006636:	2007      	movs	r0, #7
 8006638:	f7ff fb78 	bl	8005d2c <memp_malloc>
 800663c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d101      	bne.n	8006648 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006644:	2300      	movs	r3, #0
 8006646:	e00b      	b.n	8006660 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006648:	8879      	ldrh	r1, [r7, #2]
 800664a:	887a      	ldrh	r2, [r7, #2]
 800664c:	2300      	movs	r3, #0
 800664e:	9301      	str	r3, [sp, #4]
 8006650:	883b      	ldrh	r3, [r7, #0]
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	460b      	mov	r3, r1
 8006656:	6879      	ldr	r1, [r7, #4]
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f7ff feb7 	bl	80063cc <pbuf_init_alloced_pbuf>
  return p;
 800665e:	68fb      	ldr	r3, [r7, #12]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	080117d0 	.word	0x080117d0
 800666c:	080118d4 	.word	0x080118d4
 8006670:	08011830 	.word	0x08011830

08006674 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b088      	sub	sp, #32
 8006678:	af02      	add	r7, sp, #8
 800667a:	607b      	str	r3, [r7, #4]
 800667c:	4603      	mov	r3, r0
 800667e:	73fb      	strb	r3, [r7, #15]
 8006680:	460b      	mov	r3, r1
 8006682:	81bb      	strh	r3, [r7, #12]
 8006684:	4613      	mov	r3, r2
 8006686:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006688:	7bfb      	ldrb	r3, [r7, #15]
 800668a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800668c:	8a7b      	ldrh	r3, [r7, #18]
 800668e:	3303      	adds	r3, #3
 8006690:	f023 0203 	bic.w	r2, r3, #3
 8006694:	89bb      	ldrh	r3, [r7, #12]
 8006696:	441a      	add	r2, r3
 8006698:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800669a:	429a      	cmp	r2, r3
 800669c:	d901      	bls.n	80066a2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800669e:	2300      	movs	r3, #0
 80066a0:	e018      	b.n	80066d4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d007      	beq.n	80066b8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80066a8:	8a7b      	ldrh	r3, [r7, #18]
 80066aa:	3303      	adds	r3, #3
 80066ac:	f023 0303 	bic.w	r3, r3, #3
 80066b0:	6a3a      	ldr	r2, [r7, #32]
 80066b2:	4413      	add	r3, r2
 80066b4:	617b      	str	r3, [r7, #20]
 80066b6:	e001      	b.n	80066bc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80066b8:	2300      	movs	r3, #0
 80066ba:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	89b9      	ldrh	r1, [r7, #12]
 80066c0:	89ba      	ldrh	r2, [r7, #12]
 80066c2:	2302      	movs	r3, #2
 80066c4:	9301      	str	r3, [sp, #4]
 80066c6:	897b      	ldrh	r3, [r7, #10]
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	460b      	mov	r3, r1
 80066cc:	6979      	ldr	r1, [r7, #20]
 80066ce:	f7ff fe7d 	bl	80063cc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80066d2:	687b      	ldr	r3, [r7, #4]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3718      	adds	r7, #24
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	460b      	mov	r3, r1
 80066e6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d106      	bne.n	80066fc <pbuf_realloc+0x20>
 80066ee:	4b3a      	ldr	r3, [pc, #232]	; (80067d8 <pbuf_realloc+0xfc>)
 80066f0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80066f4:	4939      	ldr	r1, [pc, #228]	; (80067dc <pbuf_realloc+0x100>)
 80066f6:	483a      	ldr	r0, [pc, #232]	; (80067e0 <pbuf_realloc+0x104>)
 80066f8:	f009 fb1c 	bl	800fd34 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	891b      	ldrh	r3, [r3, #8]
 8006700:	887a      	ldrh	r2, [r7, #2]
 8006702:	429a      	cmp	r2, r3
 8006704:	d263      	bcs.n	80067ce <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	891a      	ldrh	r2, [r3, #8]
 800670a:	887b      	ldrh	r3, [r7, #2]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006710:	887b      	ldrh	r3, [r7, #2]
 8006712:	817b      	strh	r3, [r7, #10]
  q = p;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006718:	e018      	b.n	800674c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	895b      	ldrh	r3, [r3, #10]
 800671e:	897a      	ldrh	r2, [r7, #10]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	891a      	ldrh	r2, [r3, #8]
 8006728:	893b      	ldrh	r3, [r7, #8]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	b29a      	uxth	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d106      	bne.n	800674c <pbuf_realloc+0x70>
 800673e:	4b26      	ldr	r3, [pc, #152]	; (80067d8 <pbuf_realloc+0xfc>)
 8006740:	f240 12af 	movw	r2, #431	; 0x1af
 8006744:	4927      	ldr	r1, [pc, #156]	; (80067e4 <pbuf_realloc+0x108>)
 8006746:	4826      	ldr	r0, [pc, #152]	; (80067e0 <pbuf_realloc+0x104>)
 8006748:	f009 faf4 	bl	800fd34 <iprintf>
  while (rem_len > q->len) {
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	895b      	ldrh	r3, [r3, #10]
 8006750:	897a      	ldrh	r2, [r7, #10]
 8006752:	429a      	cmp	r2, r3
 8006754:	d8e1      	bhi.n	800671a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	7b1b      	ldrb	r3, [r3, #12]
 800675a:	f003 030f 	and.w	r3, r3, #15
 800675e:	2b00      	cmp	r3, #0
 8006760:	d121      	bne.n	80067a6 <pbuf_realloc+0xca>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	895b      	ldrh	r3, [r3, #10]
 8006766:	897a      	ldrh	r2, [r7, #10]
 8006768:	429a      	cmp	r2, r3
 800676a:	d01c      	beq.n	80067a6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	7b5b      	ldrb	r3, [r3, #13]
 8006770:	f003 0302 	and.w	r3, r3, #2
 8006774:	2b00      	cmp	r3, #0
 8006776:	d116      	bne.n	80067a6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	b29a      	uxth	r2, r3
 8006782:	897b      	ldrh	r3, [r7, #10]
 8006784:	4413      	add	r3, r2
 8006786:	b29b      	uxth	r3, r3
 8006788:	4619      	mov	r1, r3
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f7ff f864 	bl	8005858 <mem_trim>
 8006790:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d106      	bne.n	80067a6 <pbuf_realloc+0xca>
 8006798:	4b0f      	ldr	r3, [pc, #60]	; (80067d8 <pbuf_realloc+0xfc>)
 800679a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800679e:	4912      	ldr	r1, [pc, #72]	; (80067e8 <pbuf_realloc+0x10c>)
 80067a0:	480f      	ldr	r0, [pc, #60]	; (80067e0 <pbuf_realloc+0x104>)
 80067a2:	f009 fac7 	bl	800fd34 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	897a      	ldrh	r2, [r7, #10]
 80067aa:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	895a      	ldrh	r2, [r3, #10]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d004      	beq.n	80067c6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 f911 	bl	80069e8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	601a      	str	r2, [r3, #0]
 80067cc:	e000      	b.n	80067d0 <pbuf_realloc+0xf4>
    return;
 80067ce:	bf00      	nop

}
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	080117d0 	.word	0x080117d0
 80067dc:	080118e8 	.word	0x080118e8
 80067e0:	08011830 	.word	0x08011830
 80067e4:	08011900 	.word	0x08011900
 80067e8:	08011918 	.word	0x08011918

080067ec <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	4613      	mov	r3, r2
 80067f8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d106      	bne.n	800680e <pbuf_add_header_impl+0x22>
 8006800:	4b2b      	ldr	r3, [pc, #172]	; (80068b0 <pbuf_add_header_impl+0xc4>)
 8006802:	f240 12df 	movw	r2, #479	; 0x1df
 8006806:	492b      	ldr	r1, [pc, #172]	; (80068b4 <pbuf_add_header_impl+0xc8>)
 8006808:	482b      	ldr	r0, [pc, #172]	; (80068b8 <pbuf_add_header_impl+0xcc>)
 800680a:	f009 fa93 	bl	800fd34 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d003      	beq.n	800681c <pbuf_add_header_impl+0x30>
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800681a:	d301      	bcc.n	8006820 <pbuf_add_header_impl+0x34>
    return 1;
 800681c:	2301      	movs	r3, #1
 800681e:	e043      	b.n	80068a8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <pbuf_add_header_impl+0x3e>
    return 0;
 8006826:	2300      	movs	r3, #0
 8006828:	e03e      	b.n	80068a8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	891a      	ldrh	r2, [r3, #8]
 8006832:	8a7b      	ldrh	r3, [r7, #18]
 8006834:	4413      	add	r3, r2
 8006836:	b29b      	uxth	r3, r3
 8006838:	8a7a      	ldrh	r2, [r7, #18]
 800683a:	429a      	cmp	r2, r3
 800683c:	d901      	bls.n	8006842 <pbuf_add_header_impl+0x56>
    return 1;
 800683e:	2301      	movs	r3, #1
 8006840:	e032      	b.n	80068a8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	7b1b      	ldrb	r3, [r3, #12]
 8006846:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006848:	8a3b      	ldrh	r3, [r7, #16]
 800684a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00c      	beq.n	800686c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	425b      	negs	r3, r3
 800685a:	4413      	add	r3, r2
 800685c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	3310      	adds	r3, #16
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	429a      	cmp	r2, r3
 8006866:	d20d      	bcs.n	8006884 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006868:	2301      	movs	r3, #1
 800686a:	e01d      	b.n	80068a8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800686c:	79fb      	ldrb	r3, [r7, #7]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d006      	beq.n	8006880 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	425b      	negs	r3, r3
 800687a:	4413      	add	r3, r2
 800687c:	617b      	str	r3, [r7, #20]
 800687e:	e001      	b.n	8006884 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006880:	2301      	movs	r3, #1
 8006882:	e011      	b.n	80068a8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	895a      	ldrh	r2, [r3, #10]
 800688e:	8a7b      	ldrh	r3, [r7, #18]
 8006890:	4413      	add	r3, r2
 8006892:	b29a      	uxth	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	891a      	ldrh	r2, [r3, #8]
 800689c:	8a7b      	ldrh	r3, [r7, #18]
 800689e:	4413      	add	r3, r2
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	811a      	strh	r2, [r3, #8]


  return 0;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3718      	adds	r7, #24
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	080117d0 	.word	0x080117d0
 80068b4:	08011934 	.word	0x08011934
 80068b8:	08011830 	.word	0x08011830

080068bc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80068c6:	2200      	movs	r2, #0
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff ff8e 	bl	80067ec <pbuf_add_header_impl>
 80068d0:	4603      	mov	r3, r0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
	...

080068dc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d106      	bne.n	80068fa <pbuf_remove_header+0x1e>
 80068ec:	4b20      	ldr	r3, [pc, #128]	; (8006970 <pbuf_remove_header+0x94>)
 80068ee:	f240 224b 	movw	r2, #587	; 0x24b
 80068f2:	4920      	ldr	r1, [pc, #128]	; (8006974 <pbuf_remove_header+0x98>)
 80068f4:	4820      	ldr	r0, [pc, #128]	; (8006978 <pbuf_remove_header+0x9c>)
 80068f6:	f009 fa1d 	bl	800fd34 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d003      	beq.n	8006908 <pbuf_remove_header+0x2c>
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006906:	d301      	bcc.n	800690c <pbuf_remove_header+0x30>
    return 1;
 8006908:	2301      	movs	r3, #1
 800690a:	e02c      	b.n	8006966 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <pbuf_remove_header+0x3a>
    return 0;
 8006912:	2300      	movs	r3, #0
 8006914:	e027      	b.n	8006966 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	895b      	ldrh	r3, [r3, #10]
 800691e:	89fa      	ldrh	r2, [r7, #14]
 8006920:	429a      	cmp	r2, r3
 8006922:	d908      	bls.n	8006936 <pbuf_remove_header+0x5a>
 8006924:	4b12      	ldr	r3, [pc, #72]	; (8006970 <pbuf_remove_header+0x94>)
 8006926:	f240 2255 	movw	r2, #597	; 0x255
 800692a:	4914      	ldr	r1, [pc, #80]	; (800697c <pbuf_remove_header+0xa0>)
 800692c:	4812      	ldr	r0, [pc, #72]	; (8006978 <pbuf_remove_header+0x9c>)
 800692e:	f009 fa01 	bl	800fd34 <iprintf>
 8006932:	2301      	movs	r3, #1
 8006934:	e017      	b.n	8006966 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	441a      	add	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	895a      	ldrh	r2, [r3, #10]
 800694c:	89fb      	ldrh	r3, [r7, #14]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	b29a      	uxth	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	891a      	ldrh	r2, [r3, #8]
 800695a:	89fb      	ldrh	r3, [r7, #14]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	b29a      	uxth	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	080117d0 	.word	0x080117d0
 8006974:	08011934 	.word	0x08011934
 8006978:	08011830 	.word	0x08011830
 800697c:	08011940 	.word	0x08011940

08006980 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	460b      	mov	r3, r1
 800698a:	807b      	strh	r3, [r7, #2]
 800698c:	4613      	mov	r3, r2
 800698e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006990:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006994:	2b00      	cmp	r3, #0
 8006996:	da08      	bge.n	80069aa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006998:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800699c:	425b      	negs	r3, r3
 800699e:	4619      	mov	r1, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f7ff ff9b 	bl	80068dc <pbuf_remove_header>
 80069a6:	4603      	mov	r3, r0
 80069a8:	e007      	b.n	80069ba <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80069aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80069ae:	787a      	ldrb	r2, [r7, #1]
 80069b0:	4619      	mov	r1, r3
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f7ff ff1a 	bl	80067ec <pbuf_add_header_impl>
 80069b8:	4603      	mov	r3, r0
  }
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b082      	sub	sp, #8
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	460b      	mov	r3, r1
 80069cc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80069ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80069d2:	2201      	movs	r2, #1
 80069d4:	4619      	mov	r1, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7ff ffd2 	bl	8006980 <pbuf_header_impl>
 80069dc:	4603      	mov	r3, r0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
	...

080069e8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10b      	bne.n	8006a0e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d106      	bne.n	8006a0a <pbuf_free+0x22>
 80069fc:	4b38      	ldr	r3, [pc, #224]	; (8006ae0 <pbuf_free+0xf8>)
 80069fe:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006a02:	4938      	ldr	r1, [pc, #224]	; (8006ae4 <pbuf_free+0xfc>)
 8006a04:	4838      	ldr	r0, [pc, #224]	; (8006ae8 <pbuf_free+0x100>)
 8006a06:	f009 f995 	bl	800fd34 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	e063      	b.n	8006ad6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006a12:	e05c      	b.n	8006ace <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	7b9b      	ldrb	r3, [r3, #14]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d106      	bne.n	8006a2a <pbuf_free+0x42>
 8006a1c:	4b30      	ldr	r3, [pc, #192]	; (8006ae0 <pbuf_free+0xf8>)
 8006a1e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006a22:	4932      	ldr	r1, [pc, #200]	; (8006aec <pbuf_free+0x104>)
 8006a24:	4830      	ldr	r0, [pc, #192]	; (8006ae8 <pbuf_free+0x100>)
 8006a26:	f009 f985 	bl	800fd34 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	7b9b      	ldrb	r3, [r3, #14]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	739a      	strb	r2, [r3, #14]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	7b9b      	ldrb	r3, [r3, #14]
 8006a3a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006a3c:	7dbb      	ldrb	r3, [r7, #22]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d143      	bne.n	8006aca <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	7b1b      	ldrb	r3, [r3, #12]
 8006a4c:	f003 030f 	and.w	r3, r3, #15
 8006a50:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	7b5b      	ldrb	r3, [r3, #13]
 8006a56:	f003 0302 	and.w	r3, r3, #2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d011      	beq.n	8006a82 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d106      	bne.n	8006a78 <pbuf_free+0x90>
 8006a6a:	4b1d      	ldr	r3, [pc, #116]	; (8006ae0 <pbuf_free+0xf8>)
 8006a6c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006a70:	491f      	ldr	r1, [pc, #124]	; (8006af0 <pbuf_free+0x108>)
 8006a72:	481d      	ldr	r0, [pc, #116]	; (8006ae8 <pbuf_free+0x100>)
 8006a74:	f009 f95e 	bl	800fd34 <iprintf>
        pc->custom_free_function(p);
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	4798      	blx	r3
 8006a80:	e01d      	b.n	8006abe <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d104      	bne.n	8006a92 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006a88:	6879      	ldr	r1, [r7, #4]
 8006a8a:	2008      	movs	r0, #8
 8006a8c:	f7ff f99a 	bl	8005dc4 <memp_free>
 8006a90:	e015      	b.n	8006abe <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006a92:	7bfb      	ldrb	r3, [r7, #15]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d104      	bne.n	8006aa2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006a98:	6879      	ldr	r1, [r7, #4]
 8006a9a:	2007      	movs	r0, #7
 8006a9c:	f7ff f992 	bl	8005dc4 <memp_free>
 8006aa0:	e00d      	b.n	8006abe <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d103      	bne.n	8006ab0 <pbuf_free+0xc8>
          mem_free(p);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f7fe fe6b 	bl	8005784 <mem_free>
 8006aae:	e006      	b.n	8006abe <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006ab0:	4b0b      	ldr	r3, [pc, #44]	; (8006ae0 <pbuf_free+0xf8>)
 8006ab2:	f240 320f 	movw	r2, #783	; 0x30f
 8006ab6:	490f      	ldr	r1, [pc, #60]	; (8006af4 <pbuf_free+0x10c>)
 8006ab8:	480b      	ldr	r0, [pc, #44]	; (8006ae8 <pbuf_free+0x100>)
 8006aba:	f009 f93b 	bl	800fd34 <iprintf>
        }
      }
      count++;
 8006abe:	7dfb      	ldrb	r3, [r7, #23]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	607b      	str	r3, [r7, #4]
 8006ac8:	e001      	b.n	8006ace <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006aca:	2300      	movs	r3, #0
 8006acc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d19f      	bne.n	8006a14 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	080117d0 	.word	0x080117d0
 8006ae4:	08011934 	.word	0x08011934
 8006ae8:	08011830 	.word	0x08011830
 8006aec:	08011960 	.word	0x08011960
 8006af0:	08011978 	.word	0x08011978
 8006af4:	0801199c 	.word	0x0801199c

08006af8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006b00:	2300      	movs	r3, #0
 8006b02:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006b04:	e005      	b.n	8006b12 <pbuf_clen+0x1a>
    ++len;
 8006b06:	89fb      	ldrh	r3, [r7, #14]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1f6      	bne.n	8006b06 <pbuf_clen+0xe>
  }
  return len;
 8006b18:	89fb      	ldrh	r3, [r7, #14]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
	...

08006b28 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d010      	beq.n	8006b58 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	7b9b      	ldrb	r3, [r3, #14]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	b2da      	uxtb	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	7b9b      	ldrb	r3, [r3, #14]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d106      	bne.n	8006b58 <pbuf_ref+0x30>
 8006b4a:	4b05      	ldr	r3, [pc, #20]	; (8006b60 <pbuf_ref+0x38>)
 8006b4c:	f240 3242 	movw	r2, #834	; 0x342
 8006b50:	4904      	ldr	r1, [pc, #16]	; (8006b64 <pbuf_ref+0x3c>)
 8006b52:	4805      	ldr	r0, [pc, #20]	; (8006b68 <pbuf_ref+0x40>)
 8006b54:	f009 f8ee 	bl	800fd34 <iprintf>
  }
}
 8006b58:	bf00      	nop
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	080117d0 	.word	0x080117d0
 8006b64:	080119b0 	.word	0x080119b0
 8006b68:	08011830 	.word	0x08011830

08006b6c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d002      	beq.n	8006b82 <pbuf_cat+0x16>
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d107      	bne.n	8006b92 <pbuf_cat+0x26>
 8006b82:	4b20      	ldr	r3, [pc, #128]	; (8006c04 <pbuf_cat+0x98>)
 8006b84:	f240 3259 	movw	r2, #857	; 0x359
 8006b88:	491f      	ldr	r1, [pc, #124]	; (8006c08 <pbuf_cat+0x9c>)
 8006b8a:	4820      	ldr	r0, [pc, #128]	; (8006c0c <pbuf_cat+0xa0>)
 8006b8c:	f009 f8d2 	bl	800fd34 <iprintf>
 8006b90:	e034      	b.n	8006bfc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	60fb      	str	r3, [r7, #12]
 8006b96:	e00a      	b.n	8006bae <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	891a      	ldrh	r2, [r3, #8]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	891b      	ldrh	r3, [r3, #8]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	60fb      	str	r3, [r7, #12]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1f0      	bne.n	8006b98 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	891a      	ldrh	r2, [r3, #8]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	895b      	ldrh	r3, [r3, #10]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d006      	beq.n	8006bd0 <pbuf_cat+0x64>
 8006bc2:	4b10      	ldr	r3, [pc, #64]	; (8006c04 <pbuf_cat+0x98>)
 8006bc4:	f240 3262 	movw	r2, #866	; 0x362
 8006bc8:	4911      	ldr	r1, [pc, #68]	; (8006c10 <pbuf_cat+0xa4>)
 8006bca:	4810      	ldr	r0, [pc, #64]	; (8006c0c <pbuf_cat+0xa0>)
 8006bcc:	f009 f8b2 	bl	800fd34 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d006      	beq.n	8006be6 <pbuf_cat+0x7a>
 8006bd8:	4b0a      	ldr	r3, [pc, #40]	; (8006c04 <pbuf_cat+0x98>)
 8006bda:	f240 3263 	movw	r2, #867	; 0x363
 8006bde:	490d      	ldr	r1, [pc, #52]	; (8006c14 <pbuf_cat+0xa8>)
 8006be0:	480a      	ldr	r0, [pc, #40]	; (8006c0c <pbuf_cat+0xa0>)
 8006be2:	f009 f8a7 	bl	800fd34 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	891a      	ldrh	r2, [r3, #8]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	891b      	ldrh	r3, [r3, #8]
 8006bee:	4413      	add	r3, r2
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	080117d0 	.word	0x080117d0
 8006c08:	080119c4 	.word	0x080119c4
 8006c0c:	08011830 	.word	0x08011830
 8006c10:	080119fc 	.word	0x080119fc
 8006c14:	08011a2c 	.word	0x08011a2c

08006c18 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f7ff ffa1 	bl	8006b6c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8006c2a:	6838      	ldr	r0, [r7, #0]
 8006c2c:	f7ff ff7c 	bl	8006b28 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006c30:	bf00      	nop
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006c42:	2300      	movs	r3, #0
 8006c44:	617b      	str	r3, [r7, #20]
 8006c46:	2300      	movs	r3, #0
 8006c48:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d008      	beq.n	8006c62 <pbuf_copy+0x2a>
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d005      	beq.n	8006c62 <pbuf_copy+0x2a>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	891a      	ldrh	r2, [r3, #8]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	891b      	ldrh	r3, [r3, #8]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d209      	bcs.n	8006c76 <pbuf_copy+0x3e>
 8006c62:	4b57      	ldr	r3, [pc, #348]	; (8006dc0 <pbuf_copy+0x188>)
 8006c64:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006c68:	4956      	ldr	r1, [pc, #344]	; (8006dc4 <pbuf_copy+0x18c>)
 8006c6a:	4857      	ldr	r0, [pc, #348]	; (8006dc8 <pbuf_copy+0x190>)
 8006c6c:	f009 f862 	bl	800fd34 <iprintf>
 8006c70:	f06f 030f 	mvn.w	r3, #15
 8006c74:	e09f      	b.n	8006db6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	895b      	ldrh	r3, [r3, #10]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	1ad2      	subs	r2, r2, r3
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	895b      	ldrh	r3, [r3, #10]
 8006c84:	4619      	mov	r1, r3
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	1acb      	subs	r3, r1, r3
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d306      	bcc.n	8006c9c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	895b      	ldrh	r3, [r3, #10]
 8006c92:	461a      	mov	r2, r3
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	60fb      	str	r3, [r7, #12]
 8006c9a:	e005      	b.n	8006ca8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	895b      	ldrh	r3, [r3, #10]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	18d0      	adds	r0, r2, r3
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	4619      	mov	r1, r3
 8006cbc:	f009 f80a 	bl	800fcd4 <memcpy>
    offset_to += len;
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	4413      	add	r3, r2
 8006cce:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	895b      	ldrh	r3, [r3, #10]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d906      	bls.n	8006cea <pbuf_copy+0xb2>
 8006cdc:	4b38      	ldr	r3, [pc, #224]	; (8006dc0 <pbuf_copy+0x188>)
 8006cde:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006ce2:	493a      	ldr	r1, [pc, #232]	; (8006dcc <pbuf_copy+0x194>)
 8006ce4:	4838      	ldr	r0, [pc, #224]	; (8006dc8 <pbuf_copy+0x190>)
 8006ce6:	f009 f825 	bl	800fd34 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	895b      	ldrh	r3, [r3, #10]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d906      	bls.n	8006d04 <pbuf_copy+0xcc>
 8006cf6:	4b32      	ldr	r3, [pc, #200]	; (8006dc0 <pbuf_copy+0x188>)
 8006cf8:	f240 32da 	movw	r2, #986	; 0x3da
 8006cfc:	4934      	ldr	r1, [pc, #208]	; (8006dd0 <pbuf_copy+0x198>)
 8006cfe:	4832      	ldr	r0, [pc, #200]	; (8006dc8 <pbuf_copy+0x190>)
 8006d00:	f009 f818 	bl	800fd34 <iprintf>
    if (offset_from >= p_from->len) {
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	895b      	ldrh	r3, [r3, #10]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d304      	bcc.n	8006d1a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006d10:	2300      	movs	r3, #0
 8006d12:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	895b      	ldrh	r3, [r3, #10]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d114      	bne.n	8006d50 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006d26:	2300      	movs	r3, #0
 8006d28:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10c      	bne.n	8006d50 <pbuf_copy+0x118>
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d009      	beq.n	8006d50 <pbuf_copy+0x118>
 8006d3c:	4b20      	ldr	r3, [pc, #128]	; (8006dc0 <pbuf_copy+0x188>)
 8006d3e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006d42:	4924      	ldr	r1, [pc, #144]	; (8006dd4 <pbuf_copy+0x19c>)
 8006d44:	4820      	ldr	r0, [pc, #128]	; (8006dc8 <pbuf_copy+0x190>)
 8006d46:	f008 fff5 	bl	800fd34 <iprintf>
 8006d4a:	f06f 030f 	mvn.w	r3, #15
 8006d4e:	e032      	b.n	8006db6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d013      	beq.n	8006d7e <pbuf_copy+0x146>
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	895a      	ldrh	r2, [r3, #10]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	891b      	ldrh	r3, [r3, #8]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d10d      	bne.n	8006d7e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d009      	beq.n	8006d7e <pbuf_copy+0x146>
 8006d6a:	4b15      	ldr	r3, [pc, #84]	; (8006dc0 <pbuf_copy+0x188>)
 8006d6c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006d70:	4919      	ldr	r1, [pc, #100]	; (8006dd8 <pbuf_copy+0x1a0>)
 8006d72:	4815      	ldr	r0, [pc, #84]	; (8006dc8 <pbuf_copy+0x190>)
 8006d74:	f008 ffde 	bl	800fd34 <iprintf>
 8006d78:	f06f 0305 	mvn.w	r3, #5
 8006d7c:	e01b      	b.n	8006db6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d013      	beq.n	8006dac <pbuf_copy+0x174>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	895a      	ldrh	r2, [r3, #10]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	891b      	ldrh	r3, [r3, #8]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d10d      	bne.n	8006dac <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d009      	beq.n	8006dac <pbuf_copy+0x174>
 8006d98:	4b09      	ldr	r3, [pc, #36]	; (8006dc0 <pbuf_copy+0x188>)
 8006d9a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8006d9e:	490e      	ldr	r1, [pc, #56]	; (8006dd8 <pbuf_copy+0x1a0>)
 8006da0:	4809      	ldr	r0, [pc, #36]	; (8006dc8 <pbuf_copy+0x190>)
 8006da2:	f008 ffc7 	bl	800fd34 <iprintf>
 8006da6:	f06f 0305 	mvn.w	r3, #5
 8006daa:	e004      	b.n	8006db6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f47f af61 	bne.w	8006c76 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3718      	adds	r7, #24
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	080117d0 	.word	0x080117d0
 8006dc4:	08011a78 	.word	0x08011a78
 8006dc8:	08011830 	.word	0x08011830
 8006dcc:	08011aa8 	.word	0x08011aa8
 8006dd0:	08011ac0 	.word	0x08011ac0
 8006dd4:	08011adc 	.word	0x08011adc
 8006dd8:	08011aec 	.word	0x08011aec

08006ddc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b088      	sub	sp, #32
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	4611      	mov	r1, r2
 8006de8:	461a      	mov	r2, r3
 8006dea:	460b      	mov	r3, r1
 8006dec:	80fb      	strh	r3, [r7, #6]
 8006dee:	4613      	mov	r3, r2
 8006df0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006df2:	2300      	movs	r3, #0
 8006df4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006df6:	2300      	movs	r3, #0
 8006df8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d108      	bne.n	8006e12 <pbuf_copy_partial+0x36>
 8006e00:	4b2b      	ldr	r3, [pc, #172]	; (8006eb0 <pbuf_copy_partial+0xd4>)
 8006e02:	f240 420a 	movw	r2, #1034	; 0x40a
 8006e06:	492b      	ldr	r1, [pc, #172]	; (8006eb4 <pbuf_copy_partial+0xd8>)
 8006e08:	482b      	ldr	r0, [pc, #172]	; (8006eb8 <pbuf_copy_partial+0xdc>)
 8006e0a:	f008 ff93 	bl	800fd34 <iprintf>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	e04a      	b.n	8006ea8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d108      	bne.n	8006e2a <pbuf_copy_partial+0x4e>
 8006e18:	4b25      	ldr	r3, [pc, #148]	; (8006eb0 <pbuf_copy_partial+0xd4>)
 8006e1a:	f240 420b 	movw	r2, #1035	; 0x40b
 8006e1e:	4927      	ldr	r1, [pc, #156]	; (8006ebc <pbuf_copy_partial+0xe0>)
 8006e20:	4825      	ldr	r0, [pc, #148]	; (8006eb8 <pbuf_copy_partial+0xdc>)
 8006e22:	f008 ff87 	bl	800fd34 <iprintf>
 8006e26:	2300      	movs	r3, #0
 8006e28:	e03e      	b.n	8006ea8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	61fb      	str	r3, [r7, #28]
 8006e2e:	e034      	b.n	8006e9a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006e30:	88bb      	ldrh	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00a      	beq.n	8006e4c <pbuf_copy_partial+0x70>
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	895b      	ldrh	r3, [r3, #10]
 8006e3a:	88ba      	ldrh	r2, [r7, #4]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d305      	bcc.n	8006e4c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	895b      	ldrh	r3, [r3, #10]
 8006e44:	88ba      	ldrh	r2, [r7, #4]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	80bb      	strh	r3, [r7, #4]
 8006e4a:	e023      	b.n	8006e94 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	895a      	ldrh	r2, [r3, #10]
 8006e50:	88bb      	ldrh	r3, [r7, #4]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006e56:	8b3a      	ldrh	r2, [r7, #24]
 8006e58:	88fb      	ldrh	r3, [r7, #6]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d901      	bls.n	8006e62 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006e5e:	88fb      	ldrh	r3, [r7, #6]
 8006e60:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006e62:	8b7b      	ldrh	r3, [r7, #26]
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	18d0      	adds	r0, r2, r3
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	88bb      	ldrh	r3, [r7, #4]
 8006e6e:	4413      	add	r3, r2
 8006e70:	8b3a      	ldrh	r2, [r7, #24]
 8006e72:	4619      	mov	r1, r3
 8006e74:	f008 ff2e 	bl	800fcd4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006e78:	8afa      	ldrh	r2, [r7, #22]
 8006e7a:	8b3b      	ldrh	r3, [r7, #24]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006e80:	8b7a      	ldrh	r2, [r7, #26]
 8006e82:	8b3b      	ldrh	r3, [r7, #24]
 8006e84:	4413      	add	r3, r2
 8006e86:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006e88:	88fa      	ldrh	r2, [r7, #6]
 8006e8a:	8b3b      	ldrh	r3, [r7, #24]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006e90:	2300      	movs	r3, #0
 8006e92:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	61fb      	str	r3, [r7, #28]
 8006e9a:	88fb      	ldrh	r3, [r7, #6]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <pbuf_copy_partial+0xca>
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1c4      	bne.n	8006e30 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006ea6:	8afb      	ldrh	r3, [r7, #22]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3720      	adds	r7, #32
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	080117d0 	.word	0x080117d0
 8006eb4:	08011b18 	.word	0x08011b18
 8006eb8:	08011830 	.word	0x08011830
 8006ebc:	08011b38 	.word	0x08011b38

08006ec0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b088      	sub	sp, #32
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8006ece:	88fb      	ldrh	r3, [r7, #6]
 8006ed0:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d109      	bne.n	8006ef0 <pbuf_take+0x30>
 8006edc:	4b3a      	ldr	r3, [pc, #232]	; (8006fc8 <pbuf_take+0x108>)
 8006ede:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8006ee2:	493a      	ldr	r1, [pc, #232]	; (8006fcc <pbuf_take+0x10c>)
 8006ee4:	483a      	ldr	r0, [pc, #232]	; (8006fd0 <pbuf_take+0x110>)
 8006ee6:	f008 ff25 	bl	800fd34 <iprintf>
 8006eea:	f06f 030f 	mvn.w	r3, #15
 8006eee:	e067      	b.n	8006fc0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d109      	bne.n	8006f0a <pbuf_take+0x4a>
 8006ef6:	4b34      	ldr	r3, [pc, #208]	; (8006fc8 <pbuf_take+0x108>)
 8006ef8:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8006efc:	4935      	ldr	r1, [pc, #212]	; (8006fd4 <pbuf_take+0x114>)
 8006efe:	4834      	ldr	r0, [pc, #208]	; (8006fd0 <pbuf_take+0x110>)
 8006f00:	f008 ff18 	bl	800fd34 <iprintf>
 8006f04:	f06f 030f 	mvn.w	r3, #15
 8006f08:	e05a      	b.n	8006fc0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	891b      	ldrh	r3, [r3, #8]
 8006f0e:	88fa      	ldrh	r2, [r7, #6]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d909      	bls.n	8006f28 <pbuf_take+0x68>
 8006f14:	4b2c      	ldr	r3, [pc, #176]	; (8006fc8 <pbuf_take+0x108>)
 8006f16:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8006f1a:	492f      	ldr	r1, [pc, #188]	; (8006fd8 <pbuf_take+0x118>)
 8006f1c:	482c      	ldr	r0, [pc, #176]	; (8006fd0 <pbuf_take+0x110>)
 8006f1e:	f008 ff09 	bl	800fd34 <iprintf>
 8006f22:	f04f 33ff 	mov.w	r3, #4294967295
 8006f26:	e04b      	b.n	8006fc0 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d007      	beq.n	8006f3e <pbuf_take+0x7e>
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d004      	beq.n	8006f3e <pbuf_take+0x7e>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	891b      	ldrh	r3, [r3, #8]
 8006f38:	88fa      	ldrh	r2, [r7, #6]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d902      	bls.n	8006f44 <pbuf_take+0x84>
    return ERR_ARG;
 8006f3e:	f06f 030f 	mvn.w	r3, #15
 8006f42:	e03d      	b.n	8006fc0 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	61fb      	str	r3, [r7, #28]
 8006f48:	e028      	b.n	8006f9c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d106      	bne.n	8006f5e <pbuf_take+0x9e>
 8006f50:	4b1d      	ldr	r3, [pc, #116]	; (8006fc8 <pbuf_take+0x108>)
 8006f52:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8006f56:	4921      	ldr	r1, [pc, #132]	; (8006fdc <pbuf_take+0x11c>)
 8006f58:	481d      	ldr	r0, [pc, #116]	; (8006fd0 <pbuf_take+0x110>)
 8006f5a:	f008 feeb 	bl	800fd34 <iprintf>
    buf_copy_len = total_copy_len;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	895b      	ldrh	r3, [r3, #10]
 8006f66:	461a      	mov	r2, r3
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d902      	bls.n	8006f74 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	895b      	ldrh	r3, [r3, #10]
 8006f72:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	6858      	ldr	r0, [r3, #4]
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	4619      	mov	r1, r3
 8006f82:	f008 fea7 	bl	800fcd4 <memcpy>
    total_copy_len -= buf_copy_len;
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	4413      	add	r3, r2
 8006f94:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	61fb      	str	r3, [r7, #28]
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1d3      	bne.n	8006f4a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d103      	bne.n	8006fb0 <pbuf_take+0xf0>
 8006fa8:	88fb      	ldrh	r3, [r7, #6]
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d006      	beq.n	8006fbe <pbuf_take+0xfe>
 8006fb0:	4b05      	ldr	r3, [pc, #20]	; (8006fc8 <pbuf_take+0x108>)
 8006fb2:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8006fb6:	490a      	ldr	r1, [pc, #40]	; (8006fe0 <pbuf_take+0x120>)
 8006fb8:	4805      	ldr	r0, [pc, #20]	; (8006fd0 <pbuf_take+0x110>)
 8006fba:	f008 febb 	bl	800fd34 <iprintf>
  return ERR_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3720      	adds	r7, #32
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	080117d0 	.word	0x080117d0
 8006fcc:	08011ba8 	.word	0x08011ba8
 8006fd0:	08011830 	.word	0x08011830
 8006fd4:	08011bc0 	.word	0x08011bc0
 8006fd8:	08011bdc 	.word	0x08011bdc
 8006fdc:	08011bfc 	.word	0x08011bfc
 8006fe0:	08011c14 	.word	0x08011c14

08006fe4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	4603      	mov	r3, r0
 8006fec:	603a      	str	r2, [r7, #0]
 8006fee:	71fb      	strb	r3, [r7, #7]
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	8919      	ldrh	r1, [r3, #8]
 8006ff8:	88ba      	ldrh	r2, [r7, #4]
 8006ffa:	79fb      	ldrb	r3, [r7, #7]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7ff fa0f 	bl	8006420 <pbuf_alloc>
 8007002:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <pbuf_clone+0x2a>
    return NULL;
 800700a:	2300      	movs	r3, #0
 800700c:	e011      	b.n	8007032 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800700e:	6839      	ldr	r1, [r7, #0]
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f7ff fe11 	bl	8006c38 <pbuf_copy>
 8007016:	4603      	mov	r3, r0
 8007018:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800701a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d006      	beq.n	8007030 <pbuf_clone+0x4c>
 8007022:	4b06      	ldr	r3, [pc, #24]	; (800703c <pbuf_clone+0x58>)
 8007024:	f240 5224 	movw	r2, #1316	; 0x524
 8007028:	4905      	ldr	r1, [pc, #20]	; (8007040 <pbuf_clone+0x5c>)
 800702a:	4806      	ldr	r0, [pc, #24]	; (8007044 <pbuf_clone+0x60>)
 800702c:	f008 fe82 	bl	800fd34 <iprintf>
  return q;
 8007030:	68fb      	ldr	r3, [r7, #12]
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	080117d0 	.word	0x080117d0
 8007040:	08011c44 	.word	0x08011c44
 8007044:	08011830 	.word	0x08011830

08007048 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800704c:	f008 fe8a 	bl	800fd64 <rand>
 8007050:	4603      	mov	r3, r0
 8007052:	b29b      	uxth	r3, r3
 8007054:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007058:	b29b      	uxth	r3, r3
 800705a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800705e:	b29a      	uxth	r2, r3
 8007060:	4b01      	ldr	r3, [pc, #4]	; (8007068 <tcp_init+0x20>)
 8007062:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007064:	bf00      	nop
 8007066:	bd80      	pop	{r7, pc}
 8007068:	20000016 	.word	0x20000016

0800706c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	7d1b      	ldrb	r3, [r3, #20]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d105      	bne.n	8007088 <tcp_free+0x1c>
 800707c:	4b06      	ldr	r3, [pc, #24]	; (8007098 <tcp_free+0x2c>)
 800707e:	22d4      	movs	r2, #212	; 0xd4
 8007080:	4906      	ldr	r1, [pc, #24]	; (800709c <tcp_free+0x30>)
 8007082:	4807      	ldr	r0, [pc, #28]	; (80070a0 <tcp_free+0x34>)
 8007084:	f008 fe56 	bl	800fd34 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007088:	6879      	ldr	r1, [r7, #4]
 800708a:	2001      	movs	r0, #1
 800708c:	f7fe fe9a 	bl	8005dc4 <memp_free>
}
 8007090:	bf00      	nop
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	08011cd0 	.word	0x08011cd0
 800709c:	08011d00 	.word	0x08011d00
 80070a0:	08011d14 	.word	0x08011d14

080070a4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	7d1b      	ldrb	r3, [r3, #20]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d105      	bne.n	80070c0 <tcp_free_listen+0x1c>
 80070b4:	4b06      	ldr	r3, [pc, #24]	; (80070d0 <tcp_free_listen+0x2c>)
 80070b6:	22df      	movs	r2, #223	; 0xdf
 80070b8:	4906      	ldr	r1, [pc, #24]	; (80070d4 <tcp_free_listen+0x30>)
 80070ba:	4807      	ldr	r0, [pc, #28]	; (80070d8 <tcp_free_listen+0x34>)
 80070bc:	f008 fe3a 	bl	800fd34 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80070c0:	6879      	ldr	r1, [r7, #4]
 80070c2:	2002      	movs	r0, #2
 80070c4:	f7fe fe7e 	bl	8005dc4 <memp_free>
}
 80070c8:	bf00      	nop
 80070ca:	3708      	adds	r7, #8
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	08011cd0 	.word	0x08011cd0
 80070d4:	08011d3c 	.word	0x08011d3c
 80070d8:	08011d14 	.word	0x08011d14

080070dc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80070e0:	f001 f85c 	bl	800819c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80070e4:	4b07      	ldr	r3, [pc, #28]	; (8007104 <tcp_tmr+0x28>)
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	3301      	adds	r3, #1
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	4b05      	ldr	r3, [pc, #20]	; (8007104 <tcp_tmr+0x28>)
 80070ee:	701a      	strb	r2, [r3, #0]
 80070f0:	4b04      	ldr	r3, [pc, #16]	; (8007104 <tcp_tmr+0x28>)
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80070fc:	f000 fd0e 	bl	8007b1c <tcp_slowtmr>
  }
}
 8007100:	bf00      	nop
 8007102:	bd80      	pop	{r7, pc}
 8007104:	200000dd 	.word	0x200000dd

08007108 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d105      	bne.n	8007124 <tcp_remove_listener+0x1c>
 8007118:	4b0d      	ldr	r3, [pc, #52]	; (8007150 <tcp_remove_listener+0x48>)
 800711a:	22ff      	movs	r2, #255	; 0xff
 800711c:	490d      	ldr	r1, [pc, #52]	; (8007154 <tcp_remove_listener+0x4c>)
 800711e:	480e      	ldr	r0, [pc, #56]	; (8007158 <tcp_remove_listener+0x50>)
 8007120:	f008 fe08 	bl	800fd34 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	60fb      	str	r3, [r7, #12]
 8007128:	e00a      	b.n	8007140 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	429a      	cmp	r2, r3
 8007132:	d102      	bne.n	800713a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1f1      	bne.n	800712a <tcp_remove_listener+0x22>
    }
  }
}
 8007146:	bf00      	nop
 8007148:	bf00      	nop
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	08011cd0 	.word	0x08011cd0
 8007154:	08011d58 	.word	0x08011d58
 8007158:	08011d14 	.word	0x08011d14

0800715c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d106      	bne.n	8007178 <tcp_listen_closed+0x1c>
 800716a:	4b14      	ldr	r3, [pc, #80]	; (80071bc <tcp_listen_closed+0x60>)
 800716c:	f240 1211 	movw	r2, #273	; 0x111
 8007170:	4913      	ldr	r1, [pc, #76]	; (80071c0 <tcp_listen_closed+0x64>)
 8007172:	4814      	ldr	r0, [pc, #80]	; (80071c4 <tcp_listen_closed+0x68>)
 8007174:	f008 fdde 	bl	800fd34 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	7d1b      	ldrb	r3, [r3, #20]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d006      	beq.n	800718e <tcp_listen_closed+0x32>
 8007180:	4b0e      	ldr	r3, [pc, #56]	; (80071bc <tcp_listen_closed+0x60>)
 8007182:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007186:	4910      	ldr	r1, [pc, #64]	; (80071c8 <tcp_listen_closed+0x6c>)
 8007188:	480e      	ldr	r0, [pc, #56]	; (80071c4 <tcp_listen_closed+0x68>)
 800718a:	f008 fdd3 	bl	800fd34 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800718e:	2301      	movs	r3, #1
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	e00b      	b.n	80071ac <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007194:	4a0d      	ldr	r2, [pc, #52]	; (80071cc <tcp_listen_closed+0x70>)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	6879      	ldr	r1, [r7, #4]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7ff ffb1 	bl	8007108 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3301      	adds	r3, #1
 80071aa:	60fb      	str	r3, [r7, #12]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d9f0      	bls.n	8007194 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80071b2:	bf00      	nop
 80071b4:	bf00      	nop
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	08011cd0 	.word	0x08011cd0
 80071c0:	08011d80 	.word	0x08011d80
 80071c4:	08011d14 	.word	0x08011d14
 80071c8:	08011d8c 	.word	0x08011d8c
 80071cc:	08013c9c 	.word	0x08013c9c

080071d0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80071d0:	b5b0      	push	{r4, r5, r7, lr}
 80071d2:	b088      	sub	sp, #32
 80071d4:	af04      	add	r7, sp, #16
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	460b      	mov	r3, r1
 80071da:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d106      	bne.n	80071f0 <tcp_close_shutdown+0x20>
 80071e2:	4b63      	ldr	r3, [pc, #396]	; (8007370 <tcp_close_shutdown+0x1a0>)
 80071e4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80071e8:	4962      	ldr	r1, [pc, #392]	; (8007374 <tcp_close_shutdown+0x1a4>)
 80071ea:	4863      	ldr	r0, [pc, #396]	; (8007378 <tcp_close_shutdown+0x1a8>)
 80071ec:	f008 fda2 	bl	800fd34 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80071f0:	78fb      	ldrb	r3, [r7, #3]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d066      	beq.n	80072c4 <tcp_close_shutdown+0xf4>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	7d1b      	ldrb	r3, [r3, #20]
 80071fa:	2b04      	cmp	r3, #4
 80071fc:	d003      	beq.n	8007206 <tcp_close_shutdown+0x36>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	7d1b      	ldrb	r3, [r3, #20]
 8007202:	2b07      	cmp	r3, #7
 8007204:	d15e      	bne.n	80072c4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800720a:	2b00      	cmp	r3, #0
 800720c:	d104      	bne.n	8007218 <tcp_close_shutdown+0x48>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007212:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007216:	d055      	beq.n	80072c4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	8b5b      	ldrh	r3, [r3, #26]
 800721c:	f003 0310 	and.w	r3, r3, #16
 8007220:	2b00      	cmp	r3, #0
 8007222:	d106      	bne.n	8007232 <tcp_close_shutdown+0x62>
 8007224:	4b52      	ldr	r3, [pc, #328]	; (8007370 <tcp_close_shutdown+0x1a0>)
 8007226:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800722a:	4954      	ldr	r1, [pc, #336]	; (800737c <tcp_close_shutdown+0x1ac>)
 800722c:	4852      	ldr	r0, [pc, #328]	; (8007378 <tcp_close_shutdown+0x1a8>)
 800722e:	f008 fd81 	bl	800fd34 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800723a:	687d      	ldr	r5, [r7, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	3304      	adds	r3, #4
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	8ad2      	ldrh	r2, [r2, #22]
 8007244:	6879      	ldr	r1, [r7, #4]
 8007246:	8b09      	ldrh	r1, [r1, #24]
 8007248:	9102      	str	r1, [sp, #8]
 800724a:	9201      	str	r2, [sp, #4]
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	462b      	mov	r3, r5
 8007250:	4622      	mov	r2, r4
 8007252:	4601      	mov	r1, r0
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f005 fd85 	bl	800cd64 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f001 fb66 	bl	800892c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007260:	4b47      	ldr	r3, [pc, #284]	; (8007380 <tcp_close_shutdown+0x1b0>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	429a      	cmp	r2, r3
 8007268:	d105      	bne.n	8007276 <tcp_close_shutdown+0xa6>
 800726a:	4b45      	ldr	r3, [pc, #276]	; (8007380 <tcp_close_shutdown+0x1b0>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	4a43      	ldr	r2, [pc, #268]	; (8007380 <tcp_close_shutdown+0x1b0>)
 8007272:	6013      	str	r3, [r2, #0]
 8007274:	e013      	b.n	800729e <tcp_close_shutdown+0xce>
 8007276:	4b42      	ldr	r3, [pc, #264]	; (8007380 <tcp_close_shutdown+0x1b0>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	60fb      	str	r3, [r7, #12]
 800727c:	e00c      	b.n	8007298 <tcp_close_shutdown+0xc8>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	429a      	cmp	r2, r3
 8007286:	d104      	bne.n	8007292 <tcp_close_shutdown+0xc2>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68da      	ldr	r2, [r3, #12]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	60da      	str	r2, [r3, #12]
 8007290:	e005      	b.n	800729e <tcp_close_shutdown+0xce>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	60fb      	str	r3, [r7, #12]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1ef      	bne.n	800727e <tcp_close_shutdown+0xae>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	60da      	str	r2, [r3, #12]
 80072a4:	4b37      	ldr	r3, [pc, #220]	; (8007384 <tcp_close_shutdown+0x1b4>)
 80072a6:	2201      	movs	r2, #1
 80072a8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80072aa:	4b37      	ldr	r3, [pc, #220]	; (8007388 <tcp_close_shutdown+0x1b8>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d102      	bne.n	80072ba <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80072b4:	f003 fffa 	bl	800b2ac <tcp_trigger_input_pcb_close>
 80072b8:	e002      	b.n	80072c0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7ff fed6 	bl	800706c <tcp_free>
      }
      return ERR_OK;
 80072c0:	2300      	movs	r3, #0
 80072c2:	e050      	b.n	8007366 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	7d1b      	ldrb	r3, [r3, #20]
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d03b      	beq.n	8007344 <tcp_close_shutdown+0x174>
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	dc44      	bgt.n	800735a <tcp_close_shutdown+0x18a>
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d002      	beq.n	80072da <tcp_close_shutdown+0x10a>
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d02a      	beq.n	800732e <tcp_close_shutdown+0x15e>
 80072d8:	e03f      	b.n	800735a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	8adb      	ldrh	r3, [r3, #22]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d021      	beq.n	8007326 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80072e2:	4b2a      	ldr	r3, [pc, #168]	; (800738c <tcp_close_shutdown+0x1bc>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d105      	bne.n	80072f8 <tcp_close_shutdown+0x128>
 80072ec:	4b27      	ldr	r3, [pc, #156]	; (800738c <tcp_close_shutdown+0x1bc>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	4a26      	ldr	r2, [pc, #152]	; (800738c <tcp_close_shutdown+0x1bc>)
 80072f4:	6013      	str	r3, [r2, #0]
 80072f6:	e013      	b.n	8007320 <tcp_close_shutdown+0x150>
 80072f8:	4b24      	ldr	r3, [pc, #144]	; (800738c <tcp_close_shutdown+0x1bc>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	60bb      	str	r3, [r7, #8]
 80072fe:	e00c      	b.n	800731a <tcp_close_shutdown+0x14a>
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	429a      	cmp	r2, r3
 8007308:	d104      	bne.n	8007314 <tcp_close_shutdown+0x144>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68da      	ldr	r2, [r3, #12]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	60da      	str	r2, [r3, #12]
 8007312:	e005      	b.n	8007320 <tcp_close_shutdown+0x150>
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	60bb      	str	r3, [r7, #8]
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1ef      	bne.n	8007300 <tcp_close_shutdown+0x130>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7ff fea0 	bl	800706c <tcp_free>
      break;
 800732c:	e01a      	b.n	8007364 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7ff ff14 	bl	800715c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007334:	6879      	ldr	r1, [r7, #4]
 8007336:	4816      	ldr	r0, [pc, #88]	; (8007390 <tcp_close_shutdown+0x1c0>)
 8007338:	f001 fb48 	bl	80089cc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7ff feb1 	bl	80070a4 <tcp_free_listen>
      break;
 8007342:	e00f      	b.n	8007364 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007344:	6879      	ldr	r1, [r7, #4]
 8007346:	480e      	ldr	r0, [pc, #56]	; (8007380 <tcp_close_shutdown+0x1b0>)
 8007348:	f001 fb40 	bl	80089cc <tcp_pcb_remove>
 800734c:	4b0d      	ldr	r3, [pc, #52]	; (8007384 <tcp_close_shutdown+0x1b4>)
 800734e:	2201      	movs	r2, #1
 8007350:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7ff fe8a 	bl	800706c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007358:	e004      	b.n	8007364 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f81a 	bl	8007394 <tcp_close_shutdown_fin>
 8007360:	4603      	mov	r3, r0
 8007362:	e000      	b.n	8007366 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bdb0      	pop	{r4, r5, r7, pc}
 800736e:	bf00      	nop
 8007370:	08011cd0 	.word	0x08011cd0
 8007374:	08011da4 	.word	0x08011da4
 8007378:	08011d14 	.word	0x08011d14
 800737c:	08011dc4 	.word	0x08011dc4
 8007380:	20006a2c 	.word	0x20006a2c
 8007384:	20006a28 	.word	0x20006a28
 8007388:	20006a40 	.word	0x20006a40
 800738c:	20006a38 	.word	0x20006a38
 8007390:	20006a34 	.word	0x20006a34

08007394 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d106      	bne.n	80073b0 <tcp_close_shutdown_fin+0x1c>
 80073a2:	4b2e      	ldr	r3, [pc, #184]	; (800745c <tcp_close_shutdown_fin+0xc8>)
 80073a4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80073a8:	492d      	ldr	r1, [pc, #180]	; (8007460 <tcp_close_shutdown_fin+0xcc>)
 80073aa:	482e      	ldr	r0, [pc, #184]	; (8007464 <tcp_close_shutdown_fin+0xd0>)
 80073ac:	f008 fcc2 	bl	800fd34 <iprintf>

  switch (pcb->state) {
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	7d1b      	ldrb	r3, [r3, #20]
 80073b4:	2b07      	cmp	r3, #7
 80073b6:	d020      	beq.n	80073fa <tcp_close_shutdown_fin+0x66>
 80073b8:	2b07      	cmp	r3, #7
 80073ba:	dc2b      	bgt.n	8007414 <tcp_close_shutdown_fin+0x80>
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d002      	beq.n	80073c6 <tcp_close_shutdown_fin+0x32>
 80073c0:	2b04      	cmp	r3, #4
 80073c2:	d00d      	beq.n	80073e0 <tcp_close_shutdown_fin+0x4c>
 80073c4:	e026      	b.n	8007414 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f004 fdda 	bl	800bf80 <tcp_send_fin>
 80073cc:	4603      	mov	r3, r0
 80073ce:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80073d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d11f      	bne.n	8007418 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2205      	movs	r2, #5
 80073dc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80073de:	e01b      	b.n	8007418 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f004 fdcd 	bl	800bf80 <tcp_send_fin>
 80073e6:	4603      	mov	r3, r0
 80073e8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80073ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d114      	bne.n	800741c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2205      	movs	r2, #5
 80073f6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80073f8:	e010      	b.n	800741c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f004 fdc0 	bl	800bf80 <tcp_send_fin>
 8007400:	4603      	mov	r3, r0
 8007402:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d109      	bne.n	8007420 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2209      	movs	r2, #9
 8007410:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007412:	e005      	b.n	8007420 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007414:	2300      	movs	r3, #0
 8007416:	e01c      	b.n	8007452 <tcp_close_shutdown_fin+0xbe>
      break;
 8007418:	bf00      	nop
 800741a:	e002      	b.n	8007422 <tcp_close_shutdown_fin+0x8e>
      break;
 800741c:	bf00      	nop
 800741e:	e000      	b.n	8007422 <tcp_close_shutdown_fin+0x8e>
      break;
 8007420:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d103      	bne.n	8007432 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f004 fee6 	bl	800c1fc <tcp_output>
 8007430:	e00d      	b.n	800744e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8007432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800743a:	d108      	bne.n	800744e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	8b5b      	ldrh	r3, [r3, #26]
 8007440:	f043 0308 	orr.w	r3, r3, #8
 8007444:	b29a      	uxth	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	e001      	b.n	8007452 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800744e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	08011cd0 	.word	0x08011cd0
 8007460:	08011d80 	.word	0x08011d80
 8007464:	08011d14 	.word	0x08011d14

08007468 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d109      	bne.n	800748a <tcp_close+0x22>
 8007476:	4b0f      	ldr	r3, [pc, #60]	; (80074b4 <tcp_close+0x4c>)
 8007478:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800747c:	490e      	ldr	r1, [pc, #56]	; (80074b8 <tcp_close+0x50>)
 800747e:	480f      	ldr	r0, [pc, #60]	; (80074bc <tcp_close+0x54>)
 8007480:	f008 fc58 	bl	800fd34 <iprintf>
 8007484:	f06f 030f 	mvn.w	r3, #15
 8007488:	e00f      	b.n	80074aa <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	7d1b      	ldrb	r3, [r3, #20]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d006      	beq.n	80074a0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	8b5b      	ldrh	r3, [r3, #26]
 8007496:	f043 0310 	orr.w	r3, r3, #16
 800749a:	b29a      	uxth	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80074a0:	2101      	movs	r1, #1
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f7ff fe94 	bl	80071d0 <tcp_close_shutdown>
 80074a8:	4603      	mov	r3, r0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	08011cd0 	.word	0x08011cd0
 80074b8:	08011de0 	.word	0x08011de0
 80074bc:	08011d14 	.word	0x08011d14

080074c0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b08e      	sub	sp, #56	; 0x38
 80074c4:	af04      	add	r7, sp, #16
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d107      	bne.n	80074e0 <tcp_abandon+0x20>
 80074d0:	4b52      	ldr	r3, [pc, #328]	; (800761c <tcp_abandon+0x15c>)
 80074d2:	f240 223d 	movw	r2, #573	; 0x23d
 80074d6:	4952      	ldr	r1, [pc, #328]	; (8007620 <tcp_abandon+0x160>)
 80074d8:	4852      	ldr	r0, [pc, #328]	; (8007624 <tcp_abandon+0x164>)
 80074da:	f008 fc2b 	bl	800fd34 <iprintf>
 80074de:	e099      	b.n	8007614 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	7d1b      	ldrb	r3, [r3, #20]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d106      	bne.n	80074f6 <tcp_abandon+0x36>
 80074e8:	4b4c      	ldr	r3, [pc, #304]	; (800761c <tcp_abandon+0x15c>)
 80074ea:	f44f 7210 	mov.w	r2, #576	; 0x240
 80074ee:	494e      	ldr	r1, [pc, #312]	; (8007628 <tcp_abandon+0x168>)
 80074f0:	484c      	ldr	r0, [pc, #304]	; (8007624 <tcp_abandon+0x164>)
 80074f2:	f008 fc1f 	bl	800fd34 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	7d1b      	ldrb	r3, [r3, #20]
 80074fa:	2b0a      	cmp	r3, #10
 80074fc:	d107      	bne.n	800750e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80074fe:	6879      	ldr	r1, [r7, #4]
 8007500:	484a      	ldr	r0, [pc, #296]	; (800762c <tcp_abandon+0x16c>)
 8007502:	f001 fa63 	bl	80089cc <tcp_pcb_remove>
    tcp_free(pcb);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7ff fdb0 	bl	800706c <tcp_free>
 800750c:	e082      	b.n	8007614 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800750e:	2300      	movs	r3, #0
 8007510:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8007512:	2300      	movs	r3, #0
 8007514:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800751a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007520:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007528:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	7d1b      	ldrb	r3, [r3, #20]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d126      	bne.n	8007586 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	8adb      	ldrh	r3, [r3, #22]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d02e      	beq.n	800759e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007540:	4b3b      	ldr	r3, [pc, #236]	; (8007630 <tcp_abandon+0x170>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	429a      	cmp	r2, r3
 8007548:	d105      	bne.n	8007556 <tcp_abandon+0x96>
 800754a:	4b39      	ldr	r3, [pc, #228]	; (8007630 <tcp_abandon+0x170>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	4a37      	ldr	r2, [pc, #220]	; (8007630 <tcp_abandon+0x170>)
 8007552:	6013      	str	r3, [r2, #0]
 8007554:	e013      	b.n	800757e <tcp_abandon+0xbe>
 8007556:	4b36      	ldr	r3, [pc, #216]	; (8007630 <tcp_abandon+0x170>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	61fb      	str	r3, [r7, #28]
 800755c:	e00c      	b.n	8007578 <tcp_abandon+0xb8>
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	429a      	cmp	r2, r3
 8007566:	d104      	bne.n	8007572 <tcp_abandon+0xb2>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68da      	ldr	r2, [r3, #12]
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	60da      	str	r2, [r3, #12]
 8007570:	e005      	b.n	800757e <tcp_abandon+0xbe>
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	61fb      	str	r3, [r7, #28]
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1ef      	bne.n	800755e <tcp_abandon+0x9e>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	60da      	str	r2, [r3, #12]
 8007584:	e00b      	b.n	800759e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	8adb      	ldrh	r3, [r3, #22]
 800758e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007590:	6879      	ldr	r1, [r7, #4]
 8007592:	4828      	ldr	r0, [pc, #160]	; (8007634 <tcp_abandon+0x174>)
 8007594:	f001 fa1a 	bl	80089cc <tcp_pcb_remove>
 8007598:	4b27      	ldr	r3, [pc, #156]	; (8007638 <tcp_abandon+0x178>)
 800759a:	2201      	movs	r2, #1
 800759c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d004      	beq.n	80075b0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 fed6 	bl	800835c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d004      	beq.n	80075c2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 fecd 	bl	800835c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d004      	beq.n	80075d4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 fec4 	bl	800835c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00e      	beq.n	80075f8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80075da:	6879      	ldr	r1, [r7, #4]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	3304      	adds	r3, #4
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	8b12      	ldrh	r2, [r2, #24]
 80075e4:	9202      	str	r2, [sp, #8]
 80075e6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80075e8:	9201      	str	r2, [sp, #4]
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	460b      	mov	r3, r1
 80075ee:	697a      	ldr	r2, [r7, #20]
 80075f0:	69b9      	ldr	r1, [r7, #24]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f005 fbb6 	bl	800cd64 <tcp_rst>
    }
    last_state = pcb->state;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	7d1b      	ldrb	r3, [r3, #20]
 80075fc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7ff fd34 	bl	800706c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d004      	beq.n	8007614 <tcp_abandon+0x154>
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	f06f 010c 	mvn.w	r1, #12
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	4798      	blx	r3
  }
}
 8007614:	3728      	adds	r7, #40	; 0x28
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	08011cd0 	.word	0x08011cd0
 8007620:	08011e14 	.word	0x08011e14
 8007624:	08011d14 	.word	0x08011d14
 8007628:	08011e30 	.word	0x08011e30
 800762c:	20006a3c 	.word	0x20006a3c
 8007630:	20006a38 	.word	0x20006a38
 8007634:	20006a2c 	.word	0x20006a2c
 8007638:	20006a28 	.word	0x20006a28

0800763c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007644:	2101      	movs	r1, #1
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7ff ff3a 	bl	80074c0 <tcp_abandon>
}
 800764c:	bf00      	nop
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b088      	sub	sp, #32
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	4613      	mov	r3, r2
 8007660:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8007662:	2304      	movs	r3, #4
 8007664:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d101      	bne.n	8007670 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800766c:	4b3e      	ldr	r3, [pc, #248]	; (8007768 <tcp_bind+0x114>)
 800766e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d109      	bne.n	800768a <tcp_bind+0x36>
 8007676:	4b3d      	ldr	r3, [pc, #244]	; (800776c <tcp_bind+0x118>)
 8007678:	f240 22a9 	movw	r2, #681	; 0x2a9
 800767c:	493c      	ldr	r1, [pc, #240]	; (8007770 <tcp_bind+0x11c>)
 800767e:	483d      	ldr	r0, [pc, #244]	; (8007774 <tcp_bind+0x120>)
 8007680:	f008 fb58 	bl	800fd34 <iprintf>
 8007684:	f06f 030f 	mvn.w	r3, #15
 8007688:	e06a      	b.n	8007760 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	7d1b      	ldrb	r3, [r3, #20]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d009      	beq.n	80076a6 <tcp_bind+0x52>
 8007692:	4b36      	ldr	r3, [pc, #216]	; (800776c <tcp_bind+0x118>)
 8007694:	f240 22ab 	movw	r2, #683	; 0x2ab
 8007698:	4937      	ldr	r1, [pc, #220]	; (8007778 <tcp_bind+0x124>)
 800769a:	4836      	ldr	r0, [pc, #216]	; (8007774 <tcp_bind+0x120>)
 800769c:	f008 fb4a 	bl	800fd34 <iprintf>
 80076a0:	f06f 0305 	mvn.w	r3, #5
 80076a4:	e05c      	b.n	8007760 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80076a6:	88fb      	ldrh	r3, [r7, #6]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d109      	bne.n	80076c0 <tcp_bind+0x6c>
    port = tcp_new_port();
 80076ac:	f000 f9f0 	bl	8007a90 <tcp_new_port>
 80076b0:	4603      	mov	r3, r0
 80076b2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80076b4:	88fb      	ldrh	r3, [r7, #6]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d135      	bne.n	8007726 <tcp_bind+0xd2>
      return ERR_BUF;
 80076ba:	f06f 0301 	mvn.w	r3, #1
 80076be:	e04f      	b.n	8007760 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80076c0:	2300      	movs	r3, #0
 80076c2:	61fb      	str	r3, [r7, #28]
 80076c4:	e02b      	b.n	800771e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80076c6:	4a2d      	ldr	r2, [pc, #180]	; (800777c <tcp_bind+0x128>)
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	61bb      	str	r3, [r7, #24]
 80076d2:	e01e      	b.n	8007712 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	8adb      	ldrh	r3, [r3, #22]
 80076d8:	88fa      	ldrh	r2, [r7, #6]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d116      	bne.n	800770c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80076de:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d010      	beq.n	8007706 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00c      	beq.n	8007706 <tcp_bind+0xb2>
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d009      	beq.n	8007706 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d005      	beq.n	8007706 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007702:	429a      	cmp	r2, r3
 8007704:	d102      	bne.n	800770c <tcp_bind+0xb8>
              return ERR_USE;
 8007706:	f06f 0307 	mvn.w	r3, #7
 800770a:	e029      	b.n	8007760 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	61bb      	str	r3, [r7, #24]
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1dd      	bne.n	80076d4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	3301      	adds	r3, #1
 800771c:	61fb      	str	r3, [r7, #28]
 800771e:	69fa      	ldr	r2, [r7, #28]
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	429a      	cmp	r2, r3
 8007724:	dbcf      	blt.n	80076c6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00c      	beq.n	8007746 <tcp_bind+0xf2>
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d008      	beq.n	8007746 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d002      	beq.n	8007740 <tcp_bind+0xec>
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	e000      	b.n	8007742 <tcp_bind+0xee>
 8007740:	2300      	movs	r3, #0
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	88fa      	ldrh	r2, [r7, #6]
 800774a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800774c:	4b0c      	ldr	r3, [pc, #48]	; (8007780 <tcp_bind+0x12c>)
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	60da      	str	r2, [r3, #12]
 8007754:	4a0a      	ldr	r2, [pc, #40]	; (8007780 <tcp_bind+0x12c>)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6013      	str	r3, [r2, #0]
 800775a:	f005 fcc5 	bl	800d0e8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3720      	adds	r7, #32
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	08013cc4 	.word	0x08013cc4
 800776c:	08011cd0 	.word	0x08011cd0
 8007770:	08011e64 	.word	0x08011e64
 8007774:	08011d14 	.word	0x08011d14
 8007778:	08011e7c 	.word	0x08011e7c
 800777c:	08013c9c 	.word	0x08013c9c
 8007780:	20006a38 	.word	0x20006a38

08007784 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	4613      	mov	r3, r2
 8007790:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d106      	bne.n	80077a6 <tcp_accept_null+0x22>
 8007798:	4b07      	ldr	r3, [pc, #28]	; (80077b8 <tcp_accept_null+0x34>)
 800779a:	f240 320f 	movw	r2, #783	; 0x30f
 800779e:	4907      	ldr	r1, [pc, #28]	; (80077bc <tcp_accept_null+0x38>)
 80077a0:	4807      	ldr	r0, [pc, #28]	; (80077c0 <tcp_accept_null+0x3c>)
 80077a2:	f008 fac7 	bl	800fd34 <iprintf>

  tcp_abort(pcb);
 80077a6:	68b8      	ldr	r0, [r7, #8]
 80077a8:	f7ff ff48 	bl	800763c <tcp_abort>

  return ERR_ABRT;
 80077ac:	f06f 030c 	mvn.w	r3, #12
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	08011cd0 	.word	0x08011cd0
 80077bc:	08011ea4 	.word	0x08011ea4
 80077c0:	08011d14 	.word	0x08011d14

080077c4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	460b      	mov	r3, r1
 80077ce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80077d0:	78fb      	ldrb	r3, [r7, #3]
 80077d2:	2200      	movs	r2, #0
 80077d4:	4619      	mov	r1, r3
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f806 	bl	80077e8 <tcp_listen_with_backlog_and_err>
 80077dc:	4603      	mov	r3, r0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
	...

080077e8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b088      	sub	sp, #32
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	460b      	mov	r3, r1
 80077f2:	607a      	str	r2, [r7, #4]
 80077f4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80077f6:	2300      	movs	r3, #0
 80077f8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d109      	bne.n	8007814 <tcp_listen_with_backlog_and_err+0x2c>
 8007800:	4b47      	ldr	r3, [pc, #284]	; (8007920 <tcp_listen_with_backlog_and_err+0x138>)
 8007802:	f240 3259 	movw	r2, #857	; 0x359
 8007806:	4947      	ldr	r1, [pc, #284]	; (8007924 <tcp_listen_with_backlog_and_err+0x13c>)
 8007808:	4847      	ldr	r0, [pc, #284]	; (8007928 <tcp_listen_with_backlog_and_err+0x140>)
 800780a:	f008 fa93 	bl	800fd34 <iprintf>
 800780e:	23f0      	movs	r3, #240	; 0xf0
 8007810:	76fb      	strb	r3, [r7, #27]
 8007812:	e079      	b.n	8007908 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	7d1b      	ldrb	r3, [r3, #20]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d009      	beq.n	8007830 <tcp_listen_with_backlog_and_err+0x48>
 800781c:	4b40      	ldr	r3, [pc, #256]	; (8007920 <tcp_listen_with_backlog_and_err+0x138>)
 800781e:	f240 325a 	movw	r2, #858	; 0x35a
 8007822:	4942      	ldr	r1, [pc, #264]	; (800792c <tcp_listen_with_backlog_and_err+0x144>)
 8007824:	4840      	ldr	r0, [pc, #256]	; (8007928 <tcp_listen_with_backlog_and_err+0x140>)
 8007826:	f008 fa85 	bl	800fd34 <iprintf>
 800782a:	23f1      	movs	r3, #241	; 0xf1
 800782c:	76fb      	strb	r3, [r7, #27]
 800782e:	e06b      	b.n	8007908 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	7d1b      	ldrb	r3, [r3, #20]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d104      	bne.n	8007842 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800783c:	23f7      	movs	r3, #247	; 0xf7
 800783e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007840:	e062      	b.n	8007908 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8007842:	2002      	movs	r0, #2
 8007844:	f7fe fa72 	bl	8005d2c <memp_malloc>
 8007848:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d102      	bne.n	8007856 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8007850:	23ff      	movs	r3, #255	; 0xff
 8007852:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007854:	e058      	b.n	8007908 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	691a      	ldr	r2, [r3, #16]
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	8ada      	ldrh	r2, [r3, #22]
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	2201      	movs	r2, #1
 800786a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	7d5a      	ldrb	r2, [r3, #21]
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	7a5a      	ldrb	r2, [r3, #9]
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	2200      	movs	r2, #0
 8007880:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	7ada      	ldrb	r2, [r3, #11]
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	7a9a      	ldrb	r2, [r3, #10]
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	8adb      	ldrh	r3, [r3, #22]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d021      	beq.n	80078e6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80078a2:	4b23      	ldr	r3, [pc, #140]	; (8007930 <tcp_listen_with_backlog_and_err+0x148>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d105      	bne.n	80078b8 <tcp_listen_with_backlog_and_err+0xd0>
 80078ac:	4b20      	ldr	r3, [pc, #128]	; (8007930 <tcp_listen_with_backlog_and_err+0x148>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	4a1f      	ldr	r2, [pc, #124]	; (8007930 <tcp_listen_with_backlog_and_err+0x148>)
 80078b4:	6013      	str	r3, [r2, #0]
 80078b6:	e013      	b.n	80078e0 <tcp_listen_with_backlog_and_err+0xf8>
 80078b8:	4b1d      	ldr	r3, [pc, #116]	; (8007930 <tcp_listen_with_backlog_and_err+0x148>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	617b      	str	r3, [r7, #20]
 80078be:	e00c      	b.n	80078da <tcp_listen_with_backlog_and_err+0xf2>
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d104      	bne.n	80078d4 <tcp_listen_with_backlog_and_err+0xec>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	68da      	ldr	r2, [r3, #12]
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	60da      	str	r2, [r3, #12]
 80078d2:	e005      	b.n	80078e0 <tcp_listen_with_backlog_and_err+0xf8>
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	617b      	str	r3, [r7, #20]
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1ef      	bne.n	80078c0 <tcp_listen_with_backlog_and_err+0xd8>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f7ff fbc0 	bl	800706c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	4a11      	ldr	r2, [pc, #68]	; (8007934 <tcp_listen_with_backlog_and_err+0x14c>)
 80078f0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80078f2:	4b11      	ldr	r3, [pc, #68]	; (8007938 <tcp_listen_with_backlog_and_err+0x150>)
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	60da      	str	r2, [r3, #12]
 80078fa:	4a0f      	ldr	r2, [pc, #60]	; (8007938 <tcp_listen_with_backlog_and_err+0x150>)
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	6013      	str	r3, [r2, #0]
 8007900:	f005 fbf2 	bl	800d0e8 <tcp_timer_needed>
  res = ERR_OK;
 8007904:	2300      	movs	r3, #0
 8007906:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d002      	beq.n	8007914 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	7efa      	ldrb	r2, [r7, #27]
 8007912:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8007914:	69fb      	ldr	r3, [r7, #28]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3720      	adds	r7, #32
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	08011cd0 	.word	0x08011cd0
 8007924:	08011ec4 	.word	0x08011ec4
 8007928:	08011d14 	.word	0x08011d14
 800792c:	08011ef4 	.word	0x08011ef4
 8007930:	20006a38 	.word	0x20006a38
 8007934:	08007785 	.word	0x08007785
 8007938:	20006a34 	.word	0x20006a34

0800793c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d106      	bne.n	8007958 <tcp_update_rcv_ann_wnd+0x1c>
 800794a:	4b25      	ldr	r3, [pc, #148]	; (80079e0 <tcp_update_rcv_ann_wnd+0xa4>)
 800794c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007950:	4924      	ldr	r1, [pc, #144]	; (80079e4 <tcp_update_rcv_ann_wnd+0xa8>)
 8007952:	4825      	ldr	r0, [pc, #148]	; (80079e8 <tcp_update_rcv_ann_wnd+0xac>)
 8007954:	f008 f9ee 	bl	800fd34 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007960:	4413      	add	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800796c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007970:	bf28      	it	cs
 8007972:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8007976:	b292      	uxth	r2, r2
 8007978:	4413      	add	r3, r2
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	2b00      	cmp	r3, #0
 8007980:	db08      	blt.n	8007994 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	e020      	b.n	80079d6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	dd03      	ble.n	80079aa <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80079a8:	e014      	b.n	80079d4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079bc:	d306      	bcc.n	80079cc <tcp_update_rcv_ann_wnd+0x90>
 80079be:	4b08      	ldr	r3, [pc, #32]	; (80079e0 <tcp_update_rcv_ann_wnd+0xa4>)
 80079c0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80079c4:	4909      	ldr	r1, [pc, #36]	; (80079ec <tcp_update_rcv_ann_wnd+0xb0>)
 80079c6:	4808      	ldr	r0, [pc, #32]	; (80079e8 <tcp_update_rcv_ann_wnd+0xac>)
 80079c8:	f008 f9b4 	bl	800fd34 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80079d4:	2300      	movs	r3, #0
  }
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	08011cd0 	.word	0x08011cd0
 80079e4:	08011f2c 	.word	0x08011f2c
 80079e8:	08011d14 	.word	0x08011d14
 80079ec:	08011f50 	.word	0x08011f50

080079f0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	460b      	mov	r3, r1
 80079fa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d107      	bne.n	8007a12 <tcp_recved+0x22>
 8007a02:	4b1f      	ldr	r3, [pc, #124]	; (8007a80 <tcp_recved+0x90>)
 8007a04:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007a08:	491e      	ldr	r1, [pc, #120]	; (8007a84 <tcp_recved+0x94>)
 8007a0a:	481f      	ldr	r0, [pc, #124]	; (8007a88 <tcp_recved+0x98>)
 8007a0c:	f008 f992 	bl	800fd34 <iprintf>
 8007a10:	e032      	b.n	8007a78 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	7d1b      	ldrb	r3, [r3, #20]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d106      	bne.n	8007a28 <tcp_recved+0x38>
 8007a1a:	4b19      	ldr	r3, [pc, #100]	; (8007a80 <tcp_recved+0x90>)
 8007a1c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8007a20:	491a      	ldr	r1, [pc, #104]	; (8007a8c <tcp_recved+0x9c>)
 8007a22:	4819      	ldr	r0, [pc, #100]	; (8007a88 <tcp_recved+0x98>)
 8007a24:	f008 f986 	bl	800fd34 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007a2c:	887b      	ldrh	r3, [r7, #2]
 8007a2e:	4413      	add	r3, r2
 8007a30:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007a32:	89fb      	ldrh	r3, [r7, #14]
 8007a34:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007a38:	d804      	bhi.n	8007a44 <tcp_recved+0x54>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a3e:	89fa      	ldrh	r2, [r7, #14]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d204      	bcs.n	8007a4e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007a4a:	851a      	strh	r2, [r3, #40]	; 0x28
 8007a4c:	e002      	b.n	8007a54 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	89fa      	ldrh	r2, [r7, #14]
 8007a52:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f7ff ff71 	bl	800793c <tcp_update_rcv_ann_wnd>
 8007a5a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007a62:	d309      	bcc.n	8007a78 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	8b5b      	ldrh	r3, [r3, #26]
 8007a68:	f043 0302 	orr.w	r3, r3, #2
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f004 fbc2 	bl	800c1fc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	08011cd0 	.word	0x08011cd0
 8007a84:	08011f6c 	.word	0x08011f6c
 8007a88:	08011d14 	.word	0x08011d14
 8007a8c:	08011f84 	.word	0x08011f84

08007a90 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8007a96:	2300      	movs	r3, #0
 8007a98:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8007a9a:	4b1e      	ldr	r3, [pc, #120]	; (8007b14 <tcp_new_port+0x84>)
 8007a9c:	881b      	ldrh	r3, [r3, #0]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	4b1c      	ldr	r3, [pc, #112]	; (8007b14 <tcp_new_port+0x84>)
 8007aa4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8007aa6:	4b1b      	ldr	r3, [pc, #108]	; (8007b14 <tcp_new_port+0x84>)
 8007aa8:	881b      	ldrh	r3, [r3, #0]
 8007aaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d103      	bne.n	8007aba <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8007ab2:	4b18      	ldr	r3, [pc, #96]	; (8007b14 <tcp_new_port+0x84>)
 8007ab4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8007ab8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007aba:	2300      	movs	r3, #0
 8007abc:	71fb      	strb	r3, [r7, #7]
 8007abe:	e01e      	b.n	8007afe <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007ac0:	79fb      	ldrb	r3, [r7, #7]
 8007ac2:	4a15      	ldr	r2, [pc, #84]	; (8007b18 <tcp_new_port+0x88>)
 8007ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	603b      	str	r3, [r7, #0]
 8007acc:	e011      	b.n	8007af2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	8ada      	ldrh	r2, [r3, #22]
 8007ad2:	4b10      	ldr	r3, [pc, #64]	; (8007b14 <tcp_new_port+0x84>)
 8007ad4:	881b      	ldrh	r3, [r3, #0]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d108      	bne.n	8007aec <tcp_new_port+0x5c>
        n++;
 8007ada:	88bb      	ldrh	r3, [r7, #4]
 8007adc:	3301      	adds	r3, #1
 8007ade:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8007ae0:	88bb      	ldrh	r3, [r7, #4]
 8007ae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ae6:	d3d8      	bcc.n	8007a9a <tcp_new_port+0xa>
          return 0;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	e00d      	b.n	8007b08 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	603b      	str	r3, [r7, #0]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1ea      	bne.n	8007ace <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007af8:	79fb      	ldrb	r3, [r7, #7]
 8007afa:	3301      	adds	r3, #1
 8007afc:	71fb      	strb	r3, [r7, #7]
 8007afe:	79fb      	ldrb	r3, [r7, #7]
 8007b00:	2b03      	cmp	r3, #3
 8007b02:	d9dd      	bls.n	8007ac0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8007b04:	4b03      	ldr	r3, [pc, #12]	; (8007b14 <tcp_new_port+0x84>)
 8007b06:	881b      	ldrh	r3, [r3, #0]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr
 8007b14:	20000016 	.word	0x20000016
 8007b18:	08013c9c 	.word	0x08013c9c

08007b1c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007b1c:	b5b0      	push	{r4, r5, r7, lr}
 8007b1e:	b090      	sub	sp, #64	; 0x40
 8007b20:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007b28:	4b94      	ldr	r3, [pc, #592]	; (8007d7c <tcp_slowtmr+0x260>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	4a93      	ldr	r2, [pc, #588]	; (8007d7c <tcp_slowtmr+0x260>)
 8007b30:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007b32:	4b93      	ldr	r3, [pc, #588]	; (8007d80 <tcp_slowtmr+0x264>)
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	3301      	adds	r3, #1
 8007b38:	b2da      	uxtb	r2, r3
 8007b3a:	4b91      	ldr	r3, [pc, #580]	; (8007d80 <tcp_slowtmr+0x264>)
 8007b3c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8007b42:	4b90      	ldr	r3, [pc, #576]	; (8007d84 <tcp_slowtmr+0x268>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007b48:	e29f      	b.n	800808a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4c:	7d1b      	ldrb	r3, [r3, #20]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d106      	bne.n	8007b60 <tcp_slowtmr+0x44>
 8007b52:	4b8d      	ldr	r3, [pc, #564]	; (8007d88 <tcp_slowtmr+0x26c>)
 8007b54:	f240 42be 	movw	r2, #1214	; 0x4be
 8007b58:	498c      	ldr	r1, [pc, #560]	; (8007d8c <tcp_slowtmr+0x270>)
 8007b5a:	488d      	ldr	r0, [pc, #564]	; (8007d90 <tcp_slowtmr+0x274>)
 8007b5c:	f008 f8ea 	bl	800fd34 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b62:	7d1b      	ldrb	r3, [r3, #20]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d106      	bne.n	8007b76 <tcp_slowtmr+0x5a>
 8007b68:	4b87      	ldr	r3, [pc, #540]	; (8007d88 <tcp_slowtmr+0x26c>)
 8007b6a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007b6e:	4989      	ldr	r1, [pc, #548]	; (8007d94 <tcp_slowtmr+0x278>)
 8007b70:	4887      	ldr	r0, [pc, #540]	; (8007d90 <tcp_slowtmr+0x274>)
 8007b72:	f008 f8df 	bl	800fd34 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b78:	7d1b      	ldrb	r3, [r3, #20]
 8007b7a:	2b0a      	cmp	r3, #10
 8007b7c:	d106      	bne.n	8007b8c <tcp_slowtmr+0x70>
 8007b7e:	4b82      	ldr	r3, [pc, #520]	; (8007d88 <tcp_slowtmr+0x26c>)
 8007b80:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007b84:	4984      	ldr	r1, [pc, #528]	; (8007d98 <tcp_slowtmr+0x27c>)
 8007b86:	4882      	ldr	r0, [pc, #520]	; (8007d90 <tcp_slowtmr+0x274>)
 8007b88:	f008 f8d4 	bl	800fd34 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8e:	7f9a      	ldrb	r2, [r3, #30]
 8007b90:	4b7b      	ldr	r3, [pc, #492]	; (8007d80 <tcp_slowtmr+0x264>)
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d105      	bne.n	8007ba4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8007ba2:	e272      	b.n	800808a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007ba4:	4b76      	ldr	r3, [pc, #472]	; (8007d80 <tcp_slowtmr+0x264>)
 8007ba6:	781a      	ldrb	r2, [r3, #0]
 8007ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007baa:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007bac:	2300      	movs	r3, #0
 8007bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bba:	7d1b      	ldrb	r3, [r3, #20]
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d10a      	bne.n	8007bd6 <tcp_slowtmr+0xba>
 8007bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007bc6:	2b05      	cmp	r3, #5
 8007bc8:	d905      	bls.n	8007bd6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8007bca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bce:	3301      	adds	r3, #1
 8007bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007bd4:	e11e      	b.n	8007e14 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007bdc:	2b0b      	cmp	r3, #11
 8007bde:	d905      	bls.n	8007bec <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8007be0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007be4:	3301      	adds	r3, #1
 8007be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007bea:	e113      	b.n	8007e14 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d075      	beq.n	8007ce2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d006      	beq.n	8007c0c <tcp_slowtmr+0xf0>
 8007bfe:	4b62      	ldr	r3, [pc, #392]	; (8007d88 <tcp_slowtmr+0x26c>)
 8007c00:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007c04:	4965      	ldr	r1, [pc, #404]	; (8007d9c <tcp_slowtmr+0x280>)
 8007c06:	4862      	ldr	r0, [pc, #392]	; (8007d90 <tcp_slowtmr+0x274>)
 8007c08:	f008 f894 	bl	800fd34 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d106      	bne.n	8007c22 <tcp_slowtmr+0x106>
 8007c14:	4b5c      	ldr	r3, [pc, #368]	; (8007d88 <tcp_slowtmr+0x26c>)
 8007c16:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007c1a:	4961      	ldr	r1, [pc, #388]	; (8007da0 <tcp_slowtmr+0x284>)
 8007c1c:	485c      	ldr	r0, [pc, #368]	; (8007d90 <tcp_slowtmr+0x274>)
 8007c1e:	f008 f889 	bl	800fd34 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c24:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8007c28:	2b0b      	cmp	r3, #11
 8007c2a:	d905      	bls.n	8007c38 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8007c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c30:	3301      	adds	r3, #1
 8007c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007c36:	e0ed      	b.n	8007e14 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	4a58      	ldr	r2, [pc, #352]	; (8007da4 <tcp_slowtmr+0x288>)
 8007c42:	5cd3      	ldrb	r3, [r2, r3]
 8007c44:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8007c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c48:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007c4c:	7c7a      	ldrb	r2, [r7, #17]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d907      	bls.n	8007c62 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8007c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c54:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007c58:	3301      	adds	r3, #1
 8007c5a:	b2da      	uxtb	r2, r3
 8007c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c64:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007c68:	7c7a      	ldrb	r2, [r7, #17]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	f200 80d2 	bhi.w	8007e14 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007c70:	2301      	movs	r3, #1
 8007c72:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d108      	bne.n	8007c90 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007c7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c80:	f005 f964 	bl	800cf4c <tcp_zero_window_probe>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d014      	beq.n	8007cb4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	623b      	str	r3, [r7, #32]
 8007c8e:	e011      	b.n	8007cb4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007c96:	4619      	mov	r1, r3
 8007c98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c9a:	f004 f829 	bl	800bcf0 <tcp_split_unsent_seg>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d107      	bne.n	8007cb4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007ca4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ca6:	f004 faa9 	bl	800c1fc <tcp_output>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d101      	bne.n	8007cb4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f000 80ac 	beq.w	8007e14 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007cca:	2b06      	cmp	r3, #6
 8007ccc:	f200 80a2 	bhi.w	8007e14 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	b2da      	uxtb	r2, r3
 8007cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cdc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007ce0:	e098      	b.n	8007e14 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	db0f      	blt.n	8007d0c <tcp_slowtmr+0x1f0>
 8007cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007cf2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d008      	beq.n	8007d0c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8007cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	3301      	adds	r3, #1
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	b21a      	sxth	r2, r3
 8007d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d14:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	db7b      	blt.n	8007e14 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007d1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d1e:	f004 fd5f 	bl	800c7e0 <tcp_rexmit_rto_prepare>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d007      	beq.n	8007d38 <tcp_slowtmr+0x21c>
 8007d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d171      	bne.n	8007e14 <tcp_slowtmr+0x2f8>
 8007d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d06d      	beq.n	8007e14 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3a:	7d1b      	ldrb	r3, [r3, #20]
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d03a      	beq.n	8007db6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d46:	2b0c      	cmp	r3, #12
 8007d48:	bf28      	it	cs
 8007d4a:	230c      	movcs	r3, #12
 8007d4c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007d54:	10db      	asrs	r3, r3, #3
 8007d56:	b21b      	sxth	r3, r3
 8007d58:	461a      	mov	r2, r3
 8007d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d5c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007d60:	4413      	add	r3, r2
 8007d62:	7efa      	ldrb	r2, [r7, #27]
 8007d64:	4910      	ldr	r1, [pc, #64]	; (8007da8 <tcp_slowtmr+0x28c>)
 8007d66:	5c8a      	ldrb	r2, [r1, r2]
 8007d68:	4093      	lsls	r3, r2
 8007d6a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007d72:	4293      	cmp	r3, r2
 8007d74:	dc1a      	bgt.n	8007dac <tcp_slowtmr+0x290>
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	b21a      	sxth	r2, r3
 8007d7a:	e019      	b.n	8007db0 <tcp_slowtmr+0x294>
 8007d7c:	20006a30 	.word	0x20006a30
 8007d80:	200000de 	.word	0x200000de
 8007d84:	20006a2c 	.word	0x20006a2c
 8007d88:	08011cd0 	.word	0x08011cd0
 8007d8c:	08012014 	.word	0x08012014
 8007d90:	08011d14 	.word	0x08011d14
 8007d94:	08012040 	.word	0x08012040
 8007d98:	0801206c 	.word	0x0801206c
 8007d9c:	0801209c 	.word	0x0801209c
 8007da0:	080120d0 	.word	0x080120d0
 8007da4:	08013c94 	.word	0x08013c94
 8007da8:	08013c84 	.word	0x08013c84
 8007dac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db8:	2200      	movs	r2, #0
 8007dba:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	bf28      	it	cs
 8007dcc:	4613      	movcs	r3, r2
 8007dce:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007dd0:	8a7b      	ldrh	r3, [r7, #18]
 8007dd2:	085b      	lsrs	r3, r3, #1
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dde:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007de6:	005b      	lsls	r3, r3, #1
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d206      	bcs.n	8007dfc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007df2:	005b      	lsls	r3, r3, #1
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfe:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007e0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e10:	f004 fd56 	bl	800c8c0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e16:	7d1b      	ldrb	r3, [r3, #20]
 8007e18:	2b06      	cmp	r3, #6
 8007e1a:	d111      	bne.n	8007e40 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1e:	8b5b      	ldrh	r3, [r3, #26]
 8007e20:	f003 0310 	and.w	r3, r3, #16
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00b      	beq.n	8007e40 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007e28:	4b9d      	ldr	r3, [pc, #628]	; (80080a0 <tcp_slowtmr+0x584>)
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2e:	6a1b      	ldr	r3, [r3, #32]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	2b28      	cmp	r3, #40	; 0x28
 8007e34:	d904      	bls.n	8007e40 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007e36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e42:	7a5b      	ldrb	r3, [r3, #9]
 8007e44:	f003 0308 	and.w	r3, r3, #8
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d04c      	beq.n	8007ee6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8007e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007e50:	2b04      	cmp	r3, #4
 8007e52:	d003      	beq.n	8007e5c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e56:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007e58:	2b07      	cmp	r3, #7
 8007e5a:	d144      	bne.n	8007ee6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007e5c:	4b90      	ldr	r3, [pc, #576]	; (80080a0 <tcp_slowtmr+0x584>)
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e62:	6a1b      	ldr	r3, [r3, #32]
 8007e64:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e6c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8007e70:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8007e74:	498b      	ldr	r1, [pc, #556]	; (80080a4 <tcp_slowtmr+0x588>)
 8007e76:	fba1 1303 	umull	r1, r3, r1, r3
 8007e7a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d90a      	bls.n	8007e96 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007e80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e84:	3301      	adds	r3, #1
 8007e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007e8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e8e:	3301      	adds	r3, #1
 8007e90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007e94:	e027      	b.n	8007ee6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007e96:	4b82      	ldr	r3, [pc, #520]	; (80080a0 <tcp_slowtmr+0x584>)
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9c:	6a1b      	ldr	r3, [r3, #32]
 8007e9e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007eac:	4618      	mov	r0, r3
 8007eae:	4b7e      	ldr	r3, [pc, #504]	; (80080a8 <tcp_slowtmr+0x58c>)
 8007eb0:	fb03 f300 	mul.w	r3, r3, r0
 8007eb4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007eb6:	497b      	ldr	r1, [pc, #492]	; (80080a4 <tcp_slowtmr+0x588>)
 8007eb8:	fba1 1303 	umull	r1, r3, r1, r3
 8007ebc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d911      	bls.n	8007ee6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8007ec2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ec4:	f005 f802 	bl	800cecc <tcp_keepalive>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007ece:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d107      	bne.n	8007ee6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8007ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007edc:	3301      	adds	r3, #1
 8007ede:	b2da      	uxtb	r2, r3
 8007ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d011      	beq.n	8007f12 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007eee:	4b6c      	ldr	r3, [pc, #432]	; (80080a0 <tcp_slowtmr+0x584>)
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef4:	6a1b      	ldr	r3, [r3, #32]
 8007ef6:	1ad2      	subs	r2, r2, r3
 8007ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007efe:	4619      	mov	r1, r3
 8007f00:	460b      	mov	r3, r1
 8007f02:	005b      	lsls	r3, r3, #1
 8007f04:	440b      	add	r3, r1
 8007f06:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d302      	bcc.n	8007f12 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007f0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f0e:	f000 fec1 	bl	8008c94 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f14:	7d1b      	ldrb	r3, [r3, #20]
 8007f16:	2b03      	cmp	r3, #3
 8007f18:	d10b      	bne.n	8007f32 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007f1a:	4b61      	ldr	r3, [pc, #388]	; (80080a0 <tcp_slowtmr+0x584>)
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f20:	6a1b      	ldr	r3, [r3, #32]
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	2b28      	cmp	r3, #40	; 0x28
 8007f26:	d904      	bls.n	8007f32 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f34:	7d1b      	ldrb	r3, [r3, #20]
 8007f36:	2b09      	cmp	r3, #9
 8007f38:	d10b      	bne.n	8007f52 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007f3a:	4b59      	ldr	r3, [pc, #356]	; (80080a0 <tcp_slowtmr+0x584>)
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f40:	6a1b      	ldr	r3, [r3, #32]
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	2bf0      	cmp	r3, #240	; 0xf0
 8007f46:	d904      	bls.n	8007f52 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8007f48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007f52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d060      	beq.n	800801c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f60:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007f62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f64:	f000 fce2 	bl	800892c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d010      	beq.n	8007f90 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007f6e:	4b4f      	ldr	r3, [pc, #316]	; (80080ac <tcp_slowtmr+0x590>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d106      	bne.n	8007f86 <tcp_slowtmr+0x46a>
 8007f78:	4b4d      	ldr	r3, [pc, #308]	; (80080b0 <tcp_slowtmr+0x594>)
 8007f7a:	f240 526d 	movw	r2, #1389	; 0x56d
 8007f7e:	494d      	ldr	r1, [pc, #308]	; (80080b4 <tcp_slowtmr+0x598>)
 8007f80:	484d      	ldr	r0, [pc, #308]	; (80080b8 <tcp_slowtmr+0x59c>)
 8007f82:	f007 fed7 	bl	800fd34 <iprintf>
        prev->next = pcb->next;
 8007f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f88:	68da      	ldr	r2, [r3, #12]
 8007f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8c:	60da      	str	r2, [r3, #12]
 8007f8e:	e00f      	b.n	8007fb0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007f90:	4b46      	ldr	r3, [pc, #280]	; (80080ac <tcp_slowtmr+0x590>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d006      	beq.n	8007fa8 <tcp_slowtmr+0x48c>
 8007f9a:	4b45      	ldr	r3, [pc, #276]	; (80080b0 <tcp_slowtmr+0x594>)
 8007f9c:	f240 5271 	movw	r2, #1393	; 0x571
 8007fa0:	4946      	ldr	r1, [pc, #280]	; (80080bc <tcp_slowtmr+0x5a0>)
 8007fa2:	4845      	ldr	r0, [pc, #276]	; (80080b8 <tcp_slowtmr+0x59c>)
 8007fa4:	f007 fec6 	bl	800fd34 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	4a3f      	ldr	r2, [pc, #252]	; (80080ac <tcp_slowtmr+0x590>)
 8007fae:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007fb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d013      	beq.n	8007fe0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fba:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fbe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007fc0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fc8:	8ad2      	ldrh	r2, [r2, #22]
 8007fca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fcc:	8b09      	ldrh	r1, [r1, #24]
 8007fce:	9102      	str	r1, [sp, #8]
 8007fd0:	9201      	str	r2, [sp, #4]
 8007fd2:	9300      	str	r3, [sp, #0]
 8007fd4:	462b      	mov	r3, r5
 8007fd6:	4622      	mov	r2, r4
 8007fd8:	4601      	mov	r1, r0
 8007fda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fdc:	f004 fec2 	bl	800cd64 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe8:	7d1b      	ldrb	r3, [r3, #20]
 8007fea:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fee:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007ff6:	6838      	ldr	r0, [r7, #0]
 8007ff8:	f7ff f838 	bl	800706c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007ffc:	4b30      	ldr	r3, [pc, #192]	; (80080c0 <tcp_slowtmr+0x5a4>)
 8007ffe:	2200      	movs	r2, #0
 8008000:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d004      	beq.n	8008012 <tcp_slowtmr+0x4f6>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f06f 010c 	mvn.w	r1, #12
 800800e:	68b8      	ldr	r0, [r7, #8]
 8008010:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008012:	4b2b      	ldr	r3, [pc, #172]	; (80080c0 <tcp_slowtmr+0x5a4>)
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d037      	beq.n	800808a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800801a:	e590      	b.n	8007b3e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800801c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008028:	7f1b      	ldrb	r3, [r3, #28]
 800802a:	3301      	adds	r3, #1
 800802c:	b2da      	uxtb	r2, r3
 800802e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008030:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008034:	7f1a      	ldrb	r2, [r3, #28]
 8008036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008038:	7f5b      	ldrb	r3, [r3, #29]
 800803a:	429a      	cmp	r2, r3
 800803c:	d325      	bcc.n	800808a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800803e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008040:	2200      	movs	r2, #0
 8008042:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8008044:	4b1e      	ldr	r3, [pc, #120]	; (80080c0 <tcp_slowtmr+0x5a4>)
 8008046:	2200      	movs	r2, #0
 8008048:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800804a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00b      	beq.n	800806c <tcp_slowtmr+0x550>
 8008054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800805a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800805c:	6912      	ldr	r2, [r2, #16]
 800805e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008060:	4610      	mov	r0, r2
 8008062:	4798      	blx	r3
 8008064:	4603      	mov	r3, r0
 8008066:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800806a:	e002      	b.n	8008072 <tcp_slowtmr+0x556>
 800806c:	2300      	movs	r3, #0
 800806e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8008072:	4b13      	ldr	r3, [pc, #76]	; (80080c0 <tcp_slowtmr+0x5a4>)
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d000      	beq.n	800807c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800807a:	e560      	b.n	8007b3e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800807c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008080:	2b00      	cmp	r3, #0
 8008082:	d102      	bne.n	800808a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8008084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008086:	f004 f8b9 	bl	800c1fc <tcp_output>
  while (pcb != NULL) {
 800808a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808c:	2b00      	cmp	r3, #0
 800808e:	f47f ad5c 	bne.w	8007b4a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008092:	2300      	movs	r3, #0
 8008094:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8008096:	4b0b      	ldr	r3, [pc, #44]	; (80080c4 <tcp_slowtmr+0x5a8>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800809c:	e067      	b.n	800816e <tcp_slowtmr+0x652>
 800809e:	bf00      	nop
 80080a0:	20006a30 	.word	0x20006a30
 80080a4:	10624dd3 	.word	0x10624dd3
 80080a8:	000124f8 	.word	0x000124f8
 80080ac:	20006a2c 	.word	0x20006a2c
 80080b0:	08011cd0 	.word	0x08011cd0
 80080b4:	08012108 	.word	0x08012108
 80080b8:	08011d14 	.word	0x08011d14
 80080bc:	08012134 	.word	0x08012134
 80080c0:	20006a28 	.word	0x20006a28
 80080c4:	20006a3c 	.word	0x20006a3c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80080c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ca:	7d1b      	ldrb	r3, [r3, #20]
 80080cc:	2b0a      	cmp	r3, #10
 80080ce:	d006      	beq.n	80080de <tcp_slowtmr+0x5c2>
 80080d0:	4b2b      	ldr	r3, [pc, #172]	; (8008180 <tcp_slowtmr+0x664>)
 80080d2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80080d6:	492b      	ldr	r1, [pc, #172]	; (8008184 <tcp_slowtmr+0x668>)
 80080d8:	482b      	ldr	r0, [pc, #172]	; (8008188 <tcp_slowtmr+0x66c>)
 80080da:	f007 fe2b 	bl	800fd34 <iprintf>
    pcb_remove = 0;
 80080de:	2300      	movs	r3, #0
 80080e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80080e4:	4b29      	ldr	r3, [pc, #164]	; (800818c <tcp_slowtmr+0x670>)
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ea:	6a1b      	ldr	r3, [r3, #32]
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	2bf0      	cmp	r3, #240	; 0xf0
 80080f0:	d904      	bls.n	80080fc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80080f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080f6:	3301      	adds	r3, #1
 80080f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80080fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008100:	2b00      	cmp	r3, #0
 8008102:	d02f      	beq.n	8008164 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008104:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008106:	f000 fc11 	bl	800892c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800810a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810c:	2b00      	cmp	r3, #0
 800810e:	d010      	beq.n	8008132 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008110:	4b1f      	ldr	r3, [pc, #124]	; (8008190 <tcp_slowtmr+0x674>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008116:	429a      	cmp	r2, r3
 8008118:	d106      	bne.n	8008128 <tcp_slowtmr+0x60c>
 800811a:	4b19      	ldr	r3, [pc, #100]	; (8008180 <tcp_slowtmr+0x664>)
 800811c:	f240 52af 	movw	r2, #1455	; 0x5af
 8008120:	491c      	ldr	r1, [pc, #112]	; (8008194 <tcp_slowtmr+0x678>)
 8008122:	4819      	ldr	r0, [pc, #100]	; (8008188 <tcp_slowtmr+0x66c>)
 8008124:	f007 fe06 	bl	800fd34 <iprintf>
        prev->next = pcb->next;
 8008128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812a:	68da      	ldr	r2, [r3, #12]
 800812c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812e:	60da      	str	r2, [r3, #12]
 8008130:	e00f      	b.n	8008152 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008132:	4b17      	ldr	r3, [pc, #92]	; (8008190 <tcp_slowtmr+0x674>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008138:	429a      	cmp	r2, r3
 800813a:	d006      	beq.n	800814a <tcp_slowtmr+0x62e>
 800813c:	4b10      	ldr	r3, [pc, #64]	; (8008180 <tcp_slowtmr+0x664>)
 800813e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8008142:	4915      	ldr	r1, [pc, #84]	; (8008198 <tcp_slowtmr+0x67c>)
 8008144:	4810      	ldr	r0, [pc, #64]	; (8008188 <tcp_slowtmr+0x66c>)
 8008146:	f007 fdf5 	bl	800fd34 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800814a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	4a10      	ldr	r2, [pc, #64]	; (8008190 <tcp_slowtmr+0x674>)
 8008150:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008154:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800815c:	69f8      	ldr	r0, [r7, #28]
 800815e:	f7fe ff85 	bl	800706c <tcp_free>
 8008162:	e004      	b.n	800816e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8008164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008166:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800816e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1a9      	bne.n	80080c8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8008174:	bf00      	nop
 8008176:	bf00      	nop
 8008178:	3730      	adds	r7, #48	; 0x30
 800817a:	46bd      	mov	sp, r7
 800817c:	bdb0      	pop	{r4, r5, r7, pc}
 800817e:	bf00      	nop
 8008180:	08011cd0 	.word	0x08011cd0
 8008184:	08012160 	.word	0x08012160
 8008188:	08011d14 	.word	0x08011d14
 800818c:	20006a30 	.word	0x20006a30
 8008190:	20006a3c 	.word	0x20006a3c
 8008194:	08012190 	.word	0x08012190
 8008198:	080121b8 	.word	0x080121b8

0800819c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80081a2:	4b2d      	ldr	r3, [pc, #180]	; (8008258 <tcp_fasttmr+0xbc>)
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	3301      	adds	r3, #1
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	4b2b      	ldr	r3, [pc, #172]	; (8008258 <tcp_fasttmr+0xbc>)
 80081ac:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80081ae:	4b2b      	ldr	r3, [pc, #172]	; (800825c <tcp_fasttmr+0xc0>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80081b4:	e048      	b.n	8008248 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	7f9a      	ldrb	r2, [r3, #30]
 80081ba:	4b27      	ldr	r3, [pc, #156]	; (8008258 <tcp_fasttmr+0xbc>)
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d03f      	beq.n	8008242 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80081c2:	4b25      	ldr	r3, [pc, #148]	; (8008258 <tcp_fasttmr+0xbc>)
 80081c4:	781a      	ldrb	r2, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	8b5b      	ldrh	r3, [r3, #26]
 80081ce:	f003 0301 	and.w	r3, r3, #1
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d010      	beq.n	80081f8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	8b5b      	ldrh	r3, [r3, #26]
 80081da:	f043 0302 	orr.w	r3, r3, #2
 80081de:	b29a      	uxth	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f004 f809 	bl	800c1fc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	8b5b      	ldrh	r3, [r3, #26]
 80081ee:	f023 0303 	bic.w	r3, r3, #3
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	8b5b      	ldrh	r3, [r3, #26]
 80081fc:	f003 0308 	and.w	r3, r3, #8
 8008200:	2b00      	cmp	r3, #0
 8008202:	d009      	beq.n	8008218 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	8b5b      	ldrh	r3, [r3, #26]
 8008208:	f023 0308 	bic.w	r3, r3, #8
 800820c:	b29a      	uxth	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7ff f8be 	bl	8007394 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00a      	beq.n	800823c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008226:	4b0e      	ldr	r3, [pc, #56]	; (8008260 <tcp_fasttmr+0xc4>)
 8008228:	2200      	movs	r2, #0
 800822a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 f819 	bl	8008264 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008232:	4b0b      	ldr	r3, [pc, #44]	; (8008260 <tcp_fasttmr+0xc4>)
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d000      	beq.n	800823c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800823a:	e7b8      	b.n	80081ae <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	607b      	str	r3, [r7, #4]
 8008240:	e002      	b.n	8008248 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1b3      	bne.n	80081b6 <tcp_fasttmr+0x1a>
    }
  }
}
 800824e:	bf00      	nop
 8008250:	bf00      	nop
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	200000de 	.word	0x200000de
 800825c:	20006a2c 	.word	0x20006a2c
 8008260:	20006a28 	.word	0x20006a28

08008264 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008264:	b590      	push	{r4, r7, lr}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d109      	bne.n	8008286 <tcp_process_refused_data+0x22>
 8008272:	4b37      	ldr	r3, [pc, #220]	; (8008350 <tcp_process_refused_data+0xec>)
 8008274:	f240 6209 	movw	r2, #1545	; 0x609
 8008278:	4936      	ldr	r1, [pc, #216]	; (8008354 <tcp_process_refused_data+0xf0>)
 800827a:	4837      	ldr	r0, [pc, #220]	; (8008358 <tcp_process_refused_data+0xf4>)
 800827c:	f007 fd5a 	bl	800fd34 <iprintf>
 8008280:	f06f 030f 	mvn.w	r3, #15
 8008284:	e060      	b.n	8008348 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800828a:	7b5b      	ldrb	r3, [r3, #13]
 800828c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008292:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00b      	beq.n	80082bc <tcp_process_refused_data+0x58>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6918      	ldr	r0, [r3, #16]
 80082ae:	2300      	movs	r3, #0
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	6879      	ldr	r1, [r7, #4]
 80082b4:	47a0      	blx	r4
 80082b6:	4603      	mov	r3, r0
 80082b8:	73fb      	strb	r3, [r7, #15]
 80082ba:	e007      	b.n	80082cc <tcp_process_refused_data+0x68>
 80082bc:	2300      	movs	r3, #0
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	6879      	ldr	r1, [r7, #4]
 80082c2:	2000      	movs	r0, #0
 80082c4:	f000 f8c2 	bl	800844c <tcp_recv_null>
 80082c8:	4603      	mov	r3, r0
 80082ca:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80082cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d12a      	bne.n	800832a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	f003 0320 	and.w	r3, r3, #32
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d033      	beq.n	8008346 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80082e6:	d005      	beq.n	80082f4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082ec:	3301      	adds	r3, #1
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00b      	beq.n	8008316 <tcp_process_refused_data+0xb2>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6918      	ldr	r0, [r3, #16]
 8008308:	2300      	movs	r3, #0
 800830a:	2200      	movs	r2, #0
 800830c:	6879      	ldr	r1, [r7, #4]
 800830e:	47a0      	blx	r4
 8008310:	4603      	mov	r3, r0
 8008312:	73fb      	strb	r3, [r7, #15]
 8008314:	e001      	b.n	800831a <tcp_process_refused_data+0xb6>
 8008316:	2300      	movs	r3, #0
 8008318:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800831a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800831e:	f113 0f0d 	cmn.w	r3, #13
 8008322:	d110      	bne.n	8008346 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008324:	f06f 030c 	mvn.w	r3, #12
 8008328:	e00e      	b.n	8008348 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800832a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800832e:	f113 0f0d 	cmn.w	r3, #13
 8008332:	d102      	bne.n	800833a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008334:	f06f 030c 	mvn.w	r3, #12
 8008338:	e006      	b.n	8008348 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8008340:	f06f 0304 	mvn.w	r3, #4
 8008344:	e000      	b.n	8008348 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	bd90      	pop	{r4, r7, pc}
 8008350:	08011cd0 	.word	0x08011cd0
 8008354:	080121e0 	.word	0x080121e0
 8008358:	08011d14 	.word	0x08011d14

0800835c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8008364:	e007      	b.n	8008376 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 f80a 	bl	8008386 <tcp_seg_free>
    seg = next;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1f4      	bne.n	8008366 <tcp_segs_free+0xa>
  }
}
 800837c:	bf00      	nop
 800837e:	bf00      	nop
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b082      	sub	sp, #8
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00c      	beq.n	80083ae <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d004      	beq.n	80083a6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7fe fb21 	bl	80069e8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80083a6:	6879      	ldr	r1, [r7, #4]
 80083a8:	2003      	movs	r0, #3
 80083aa:	f7fd fd0b 	bl	8005dc4 <memp_free>
  }
}
 80083ae:	bf00      	nop
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
	...

080083b8 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	460b      	mov	r3, r1
 80083c2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d107      	bne.n	80083da <tcp_setprio+0x22>
 80083ca:	4b07      	ldr	r3, [pc, #28]	; (80083e8 <tcp_setprio+0x30>)
 80083cc:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 80083d0:	4906      	ldr	r1, [pc, #24]	; (80083ec <tcp_setprio+0x34>)
 80083d2:	4807      	ldr	r0, [pc, #28]	; (80083f0 <tcp_setprio+0x38>)
 80083d4:	f007 fcae 	bl	800fd34 <iprintf>
 80083d8:	e002      	b.n	80083e0 <tcp_setprio+0x28>

  pcb->prio = prio;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	78fa      	ldrb	r2, [r7, #3]
 80083de:	755a      	strb	r2, [r3, #21]
}
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	08011cd0 	.word	0x08011cd0
 80083ec:	08012208 	.word	0x08012208
 80083f0:	08011d14 	.word	0x08011d14

080083f4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d106      	bne.n	8008410 <tcp_seg_copy+0x1c>
 8008402:	4b0f      	ldr	r3, [pc, #60]	; (8008440 <tcp_seg_copy+0x4c>)
 8008404:	f240 6282 	movw	r2, #1666	; 0x682
 8008408:	490e      	ldr	r1, [pc, #56]	; (8008444 <tcp_seg_copy+0x50>)
 800840a:	480f      	ldr	r0, [pc, #60]	; (8008448 <tcp_seg_copy+0x54>)
 800840c:	f007 fc92 	bl	800fd34 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008410:	2003      	movs	r0, #3
 8008412:	f7fd fc8b 	bl	8005d2c <memp_malloc>
 8008416:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d101      	bne.n	8008422 <tcp_seg_copy+0x2e>
    return NULL;
 800841e:	2300      	movs	r3, #0
 8008420:	e00a      	b.n	8008438 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008422:	2210      	movs	r2, #16
 8008424:	6879      	ldr	r1, [r7, #4]
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f007 fc54 	bl	800fcd4 <memcpy>
  pbuf_ref(cseg->p);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	4618      	mov	r0, r3
 8008432:	f7fe fb79 	bl	8006b28 <pbuf_ref>
  return cseg;
 8008436:	68fb      	ldr	r3, [r7, #12]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	08011cd0 	.word	0x08011cd0
 8008444:	08012224 	.word	0x08012224
 8008448:	08011d14 	.word	0x08011d14

0800844c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
 8008458:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d109      	bne.n	8008474 <tcp_recv_null+0x28>
 8008460:	4b12      	ldr	r3, [pc, #72]	; (80084ac <tcp_recv_null+0x60>)
 8008462:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8008466:	4912      	ldr	r1, [pc, #72]	; (80084b0 <tcp_recv_null+0x64>)
 8008468:	4812      	ldr	r0, [pc, #72]	; (80084b4 <tcp_recv_null+0x68>)
 800846a:	f007 fc63 	bl	800fd34 <iprintf>
 800846e:	f06f 030f 	mvn.w	r3, #15
 8008472:	e016      	b.n	80084a2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d009      	beq.n	800848e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	891b      	ldrh	r3, [r3, #8]
 800847e:	4619      	mov	r1, r3
 8008480:	68b8      	ldr	r0, [r7, #8]
 8008482:	f7ff fab5 	bl	80079f0 <tcp_recved>
    pbuf_free(p);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f7fe faae 	bl	80069e8 <pbuf_free>
 800848c:	e008      	b.n	80084a0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800848e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d104      	bne.n	80084a0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8008496:	68b8      	ldr	r0, [r7, #8]
 8008498:	f7fe ffe6 	bl	8007468 <tcp_close>
 800849c:	4603      	mov	r3, r0
 800849e:	e000      	b.n	80084a2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	08011cd0 	.word	0x08011cd0
 80084b0:	08012240 	.word	0x08012240
 80084b4:	08011d14 	.word	0x08011d14

080084b8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	4603      	mov	r3, r0
 80084c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80084c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	db01      	blt.n	80084ce <tcp_kill_prio+0x16>
 80084ca:	79fb      	ldrb	r3, [r7, #7]
 80084cc:	e000      	b.n	80084d0 <tcp_kill_prio+0x18>
 80084ce:	237f      	movs	r3, #127	; 0x7f
 80084d0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80084d2:	7afb      	ldrb	r3, [r7, #11]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d034      	beq.n	8008542 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80084d8:	7afb      	ldrb	r3, [r7, #11]
 80084da:	3b01      	subs	r3, #1
 80084dc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80084de:	2300      	movs	r3, #0
 80084e0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80084e2:	2300      	movs	r3, #0
 80084e4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80084e6:	4b19      	ldr	r3, [pc, #100]	; (800854c <tcp_kill_prio+0x94>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	617b      	str	r3, [r7, #20]
 80084ec:	e01f      	b.n	800852e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	7d5b      	ldrb	r3, [r3, #21]
 80084f2:	7afa      	ldrb	r2, [r7, #11]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d80c      	bhi.n	8008512 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80084fc:	7afa      	ldrb	r2, [r7, #11]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d112      	bne.n	8008528 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008502:	4b13      	ldr	r3, [pc, #76]	; (8008550 <tcp_kill_prio+0x98>)
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	6a1b      	ldr	r3, [r3, #32]
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	429a      	cmp	r2, r3
 8008510:	d80a      	bhi.n	8008528 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8008512:	4b0f      	ldr	r3, [pc, #60]	; (8008550 <tcp_kill_prio+0x98>)
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	6a1b      	ldr	r3, [r3, #32]
 800851a:	1ad3      	subs	r3, r2, r3
 800851c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	7d5b      	ldrb	r3, [r3, #21]
 8008526:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	617b      	str	r3, [r7, #20]
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1dc      	bne.n	80084ee <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d004      	beq.n	8008544 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800853a:	6938      	ldr	r0, [r7, #16]
 800853c:	f7ff f87e 	bl	800763c <tcp_abort>
 8008540:	e000      	b.n	8008544 <tcp_kill_prio+0x8c>
    return;
 8008542:	bf00      	nop
  }
}
 8008544:	3718      	adds	r7, #24
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	20006a2c 	.word	0x20006a2c
 8008550:	20006a30 	.word	0x20006a30

08008554 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af00      	add	r7, sp, #0
 800855a:	4603      	mov	r3, r0
 800855c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800855e:	79fb      	ldrb	r3, [r7, #7]
 8008560:	2b08      	cmp	r3, #8
 8008562:	d009      	beq.n	8008578 <tcp_kill_state+0x24>
 8008564:	79fb      	ldrb	r3, [r7, #7]
 8008566:	2b09      	cmp	r3, #9
 8008568:	d006      	beq.n	8008578 <tcp_kill_state+0x24>
 800856a:	4b1a      	ldr	r3, [pc, #104]	; (80085d4 <tcp_kill_state+0x80>)
 800856c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8008570:	4919      	ldr	r1, [pc, #100]	; (80085d8 <tcp_kill_state+0x84>)
 8008572:	481a      	ldr	r0, [pc, #104]	; (80085dc <tcp_kill_state+0x88>)
 8008574:	f007 fbde 	bl	800fd34 <iprintf>

  inactivity = 0;
 8008578:	2300      	movs	r3, #0
 800857a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800857c:	2300      	movs	r3, #0
 800857e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008580:	4b17      	ldr	r3, [pc, #92]	; (80085e0 <tcp_kill_state+0x8c>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	617b      	str	r3, [r7, #20]
 8008586:	e017      	b.n	80085b8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	7d1b      	ldrb	r3, [r3, #20]
 800858c:	79fa      	ldrb	r2, [r7, #7]
 800858e:	429a      	cmp	r2, r3
 8008590:	d10f      	bne.n	80085b2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008592:	4b14      	ldr	r3, [pc, #80]	; (80085e4 <tcp_kill_state+0x90>)
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d807      	bhi.n	80085b2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80085a2:	4b10      	ldr	r3, [pc, #64]	; (80085e4 <tcp_kill_state+0x90>)
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	6a1b      	ldr	r3, [r3, #32]
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	617b      	str	r3, [r7, #20]
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1e4      	bne.n	8008588 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d003      	beq.n	80085cc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80085c4:	2100      	movs	r1, #0
 80085c6:	6938      	ldr	r0, [r7, #16]
 80085c8:	f7fe ff7a 	bl	80074c0 <tcp_abandon>
  }
}
 80085cc:	bf00      	nop
 80085ce:	3718      	adds	r7, #24
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	08011cd0 	.word	0x08011cd0
 80085d8:	0801225c 	.word	0x0801225c
 80085dc:	08011d14 	.word	0x08011d14
 80085e0:	20006a2c 	.word	0x20006a2c
 80085e4:	20006a30 	.word	0x20006a30

080085e8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80085ee:	2300      	movs	r3, #0
 80085f0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80085f2:	2300      	movs	r3, #0
 80085f4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80085f6:	4b12      	ldr	r3, [pc, #72]	; (8008640 <tcp_kill_timewait+0x58>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	60fb      	str	r3, [r7, #12]
 80085fc:	e012      	b.n	8008624 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80085fe:	4b11      	ldr	r3, [pc, #68]	; (8008644 <tcp_kill_timewait+0x5c>)
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	429a      	cmp	r2, r3
 800860c:	d807      	bhi.n	800861e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800860e:	4b0d      	ldr	r3, [pc, #52]	; (8008644 <tcp_kill_timewait+0x5c>)
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	1ad3      	subs	r3, r2, r3
 8008618:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	60fb      	str	r3, [r7, #12]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1e9      	bne.n	80085fe <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d002      	beq.n	8008636 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008630:	68b8      	ldr	r0, [r7, #8]
 8008632:	f7ff f803 	bl	800763c <tcp_abort>
  }
}
 8008636:	bf00      	nop
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	20006a3c 	.word	0x20006a3c
 8008644:	20006a30 	.word	0x20006a30

08008648 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800864e:	4b10      	ldr	r3, [pc, #64]	; (8008690 <tcp_handle_closepend+0x48>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008654:	e014      	b.n	8008680 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	8b5b      	ldrh	r3, [r3, #26]
 8008660:	f003 0308 	and.w	r3, r3, #8
 8008664:	2b00      	cmp	r3, #0
 8008666:	d009      	beq.n	800867c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	8b5b      	ldrh	r3, [r3, #26]
 800866c:	f023 0308 	bic.w	r3, r3, #8
 8008670:	b29a      	uxth	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f7fe fe8c 	bl	8007394 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1e7      	bne.n	8008656 <tcp_handle_closepend+0xe>
  }
}
 8008686:	bf00      	nop
 8008688:	bf00      	nop
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	20006a2c 	.word	0x20006a2c

08008694 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	4603      	mov	r3, r0
 800869c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800869e:	2001      	movs	r0, #1
 80086a0:	f7fd fb44 	bl	8005d2c <memp_malloc>
 80086a4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d126      	bne.n	80086fa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80086ac:	f7ff ffcc 	bl	8008648 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80086b0:	f7ff ff9a 	bl	80085e8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80086b4:	2001      	movs	r0, #1
 80086b6:	f7fd fb39 	bl	8005d2c <memp_malloc>
 80086ba:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d11b      	bne.n	80086fa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80086c2:	2009      	movs	r0, #9
 80086c4:	f7ff ff46 	bl	8008554 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80086c8:	2001      	movs	r0, #1
 80086ca:	f7fd fb2f 	bl	8005d2c <memp_malloc>
 80086ce:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d111      	bne.n	80086fa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80086d6:	2008      	movs	r0, #8
 80086d8:	f7ff ff3c 	bl	8008554 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80086dc:	2001      	movs	r0, #1
 80086de:	f7fd fb25 	bl	8005d2c <memp_malloc>
 80086e2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d107      	bne.n	80086fa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80086ea:	79fb      	ldrb	r3, [r7, #7]
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7ff fee3 	bl	80084b8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80086f2:	2001      	movs	r0, #1
 80086f4:	f7fd fb1a 	bl	8005d2c <memp_malloc>
 80086f8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d03f      	beq.n	8008780 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008700:	229c      	movs	r2, #156	; 0x9c
 8008702:	2100      	movs	r1, #0
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	f007 fb0d 	bl	800fd24 <memset>
    pcb->prio = prio;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	79fa      	ldrb	r2, [r7, #7]
 800870e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008716:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008720:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	22ff      	movs	r2, #255	; 0xff
 800872e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008736:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2206      	movs	r2, #6
 800873c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2206      	movs	r2, #6
 8008744:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800874c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2201      	movs	r2, #1
 8008752:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8008756:	4b0d      	ldr	r3, [pc, #52]	; (800878c <tcp_alloc+0xf8>)
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800875e:	4b0c      	ldr	r3, [pc, #48]	; (8008790 <tcp_alloc+0xfc>)
 8008760:	781a      	ldrb	r2, [r3, #0]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800876c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	4a08      	ldr	r2, [pc, #32]	; (8008794 <tcp_alloc+0x100>)
 8008774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	4a07      	ldr	r2, [pc, #28]	; (8008798 <tcp_alloc+0x104>)
 800877c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008780:	68fb      	ldr	r3, [r7, #12]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	20006a30 	.word	0x20006a30
 8008790:	200000de 	.word	0x200000de
 8008794:	0800844d 	.word	0x0800844d
 8008798:	006ddd00 	.word	0x006ddd00

0800879c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 80087a0:	2040      	movs	r0, #64	; 0x40
 80087a2:	f7ff ff77 	bl	8008694 <tcp_alloc>
 80087a6:	4603      	mov	r3, r0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	bd80      	pop	{r7, pc}

080087ac <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d002      	beq.n	80087c2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	683a      	ldr	r2, [r7, #0]
 80087c0:	611a      	str	r2, [r3, #16]
  }
}
 80087c2:	bf00      	nop
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
	...

080087d0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00e      	beq.n	80087fe <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	7d1b      	ldrb	r3, [r3, #20]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d106      	bne.n	80087f6 <tcp_recv+0x26>
 80087e8:	4b07      	ldr	r3, [pc, #28]	; (8008808 <tcp_recv+0x38>)
 80087ea:	f240 72df 	movw	r2, #2015	; 0x7df
 80087ee:	4907      	ldr	r1, [pc, #28]	; (800880c <tcp_recv+0x3c>)
 80087f0:	4807      	ldr	r0, [pc, #28]	; (8008810 <tcp_recv+0x40>)
 80087f2:	f007 fa9f 	bl	800fd34 <iprintf>
    pcb->recv = recv;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	683a      	ldr	r2, [r7, #0]
 80087fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80087fe:	bf00      	nop
 8008800:	3708      	adds	r7, #8
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	08011cd0 	.word	0x08011cd0
 800880c:	0801226c 	.word	0x0801226c
 8008810:	08011d14 	.word	0x08011d14

08008814 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00e      	beq.n	8008842 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	7d1b      	ldrb	r3, [r3, #20]
 8008828:	2b01      	cmp	r3, #1
 800882a:	d106      	bne.n	800883a <tcp_sent+0x26>
 800882c:	4b07      	ldr	r3, [pc, #28]	; (800884c <tcp_sent+0x38>)
 800882e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8008832:	4907      	ldr	r1, [pc, #28]	; (8008850 <tcp_sent+0x3c>)
 8008834:	4807      	ldr	r0, [pc, #28]	; (8008854 <tcp_sent+0x40>)
 8008836:	f007 fa7d 	bl	800fd34 <iprintf>
    pcb->sent = sent;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	683a      	ldr	r2, [r7, #0]
 800883e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8008842:	bf00      	nop
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	08011cd0 	.word	0x08011cd0
 8008850:	08012294 	.word	0x08012294
 8008854:	08011d14 	.word	0x08011d14

08008858 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d00e      	beq.n	8008886 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	7d1b      	ldrb	r3, [r3, #20]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d106      	bne.n	800887e <tcp_err+0x26>
 8008870:	4b07      	ldr	r3, [pc, #28]	; (8008890 <tcp_err+0x38>)
 8008872:	f640 020d 	movw	r2, #2061	; 0x80d
 8008876:	4907      	ldr	r1, [pc, #28]	; (8008894 <tcp_err+0x3c>)
 8008878:	4807      	ldr	r0, [pc, #28]	; (8008898 <tcp_err+0x40>)
 800887a:	f007 fa5b 	bl	800fd34 <iprintf>
    pcb->errf = err;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	683a      	ldr	r2, [r7, #0]
 8008882:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8008886:	bf00      	nop
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	08011cd0 	.word	0x08011cd0
 8008894:	080122bc 	.word	0x080122bc
 8008898:	08011d14 	.word	0x08011d14

0800889c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d008      	beq.n	80088be <tcp_accept+0x22>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	7d1b      	ldrb	r3, [r3, #20]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d104      	bne.n	80088be <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	619a      	str	r2, [r3, #24]
  }
}
 80088be:	bf00      	nop
 80088c0:	3714      	adds	r7, #20
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
	...

080088cc <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	4613      	mov	r3, r2
 80088d8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d107      	bne.n	80088f0 <tcp_poll+0x24>
 80088e0:	4b0e      	ldr	r3, [pc, #56]	; (800891c <tcp_poll+0x50>)
 80088e2:	f640 023d 	movw	r2, #2109	; 0x83d
 80088e6:	490e      	ldr	r1, [pc, #56]	; (8008920 <tcp_poll+0x54>)
 80088e8:	480e      	ldr	r0, [pc, #56]	; (8008924 <tcp_poll+0x58>)
 80088ea:	f007 fa23 	bl	800fd34 <iprintf>
 80088ee:	e011      	b.n	8008914 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	7d1b      	ldrb	r3, [r3, #20]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d106      	bne.n	8008906 <tcp_poll+0x3a>
 80088f8:	4b08      	ldr	r3, [pc, #32]	; (800891c <tcp_poll+0x50>)
 80088fa:	f640 023e 	movw	r2, #2110	; 0x83e
 80088fe:	490a      	ldr	r1, [pc, #40]	; (8008928 <tcp_poll+0x5c>)
 8008900:	4808      	ldr	r0, [pc, #32]	; (8008924 <tcp_poll+0x58>)
 8008902:	f007 fa17 	bl	800fd34 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	79fa      	ldrb	r2, [r7, #7]
 8008912:	775a      	strb	r2, [r3, #29]
}
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	08011cd0 	.word	0x08011cd0
 8008920:	080122e4 	.word	0x080122e4
 8008924:	08011d14 	.word	0x08011d14
 8008928:	080122fc 	.word	0x080122fc

0800892c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d107      	bne.n	800894a <tcp_pcb_purge+0x1e>
 800893a:	4b21      	ldr	r3, [pc, #132]	; (80089c0 <tcp_pcb_purge+0x94>)
 800893c:	f640 0251 	movw	r2, #2129	; 0x851
 8008940:	4920      	ldr	r1, [pc, #128]	; (80089c4 <tcp_pcb_purge+0x98>)
 8008942:	4821      	ldr	r0, [pc, #132]	; (80089c8 <tcp_pcb_purge+0x9c>)
 8008944:	f007 f9f6 	bl	800fd34 <iprintf>
 8008948:	e037      	b.n	80089ba <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	7d1b      	ldrb	r3, [r3, #20]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d033      	beq.n	80089ba <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008956:	2b0a      	cmp	r3, #10
 8008958:	d02f      	beq.n	80089ba <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800895e:	2b01      	cmp	r3, #1
 8008960:	d02b      	beq.n	80089ba <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008966:	2b00      	cmp	r3, #0
 8008968:	d007      	beq.n	800897a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800896e:	4618      	mov	r0, r3
 8008970:	f7fe f83a 	bl	80069e8 <pbuf_free>
      pcb->refused_data = NULL;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800897e:	2b00      	cmp	r3, #0
 8008980:	d002      	beq.n	8008988 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f986 	bl	8008c94 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800898e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008994:	4618      	mov	r0, r3
 8008996:	f7ff fce1 	bl	800835c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800899e:	4618      	mov	r0, r3
 80089a0:	f7ff fcdc 	bl	800835c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	66da      	str	r2, [r3, #108]	; 0x6c
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	08011cd0 	.word	0x08011cd0
 80089c4:	0801231c 	.word	0x0801231c
 80089c8:	08011d14 	.word	0x08011d14

080089cc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d106      	bne.n	80089ea <tcp_pcb_remove+0x1e>
 80089dc:	4b3e      	ldr	r3, [pc, #248]	; (8008ad8 <tcp_pcb_remove+0x10c>)
 80089de:	f640 0283 	movw	r2, #2179	; 0x883
 80089e2:	493e      	ldr	r1, [pc, #248]	; (8008adc <tcp_pcb_remove+0x110>)
 80089e4:	483e      	ldr	r0, [pc, #248]	; (8008ae0 <tcp_pcb_remove+0x114>)
 80089e6:	f007 f9a5 	bl	800fd34 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d106      	bne.n	80089fe <tcp_pcb_remove+0x32>
 80089f0:	4b39      	ldr	r3, [pc, #228]	; (8008ad8 <tcp_pcb_remove+0x10c>)
 80089f2:	f640 0284 	movw	r2, #2180	; 0x884
 80089f6:	493b      	ldr	r1, [pc, #236]	; (8008ae4 <tcp_pcb_remove+0x118>)
 80089f8:	4839      	ldr	r0, [pc, #228]	; (8008ae0 <tcp_pcb_remove+0x114>)
 80089fa:	f007 f99b 	bl	800fd34 <iprintf>

  TCP_RMV(pcblist, pcb);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	683a      	ldr	r2, [r7, #0]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d105      	bne.n	8008a14 <tcp_pcb_remove+0x48>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68da      	ldr	r2, [r3, #12]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	601a      	str	r2, [r3, #0]
 8008a12:	e013      	b.n	8008a3c <tcp_pcb_remove+0x70>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	60fb      	str	r3, [r7, #12]
 8008a1a:	e00c      	b.n	8008a36 <tcp_pcb_remove+0x6a>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	683a      	ldr	r2, [r7, #0]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d104      	bne.n	8008a30 <tcp_pcb_remove+0x64>
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	68da      	ldr	r2, [r3, #12]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	60da      	str	r2, [r3, #12]
 8008a2e:	e005      	b.n	8008a3c <tcp_pcb_remove+0x70>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	60fb      	str	r3, [r7, #12]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1ef      	bne.n	8008a1c <tcp_pcb_remove+0x50>
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008a42:	6838      	ldr	r0, [r7, #0]
 8008a44:	f7ff ff72 	bl	800892c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	7d1b      	ldrb	r3, [r3, #20]
 8008a4c:	2b0a      	cmp	r3, #10
 8008a4e:	d013      	beq.n	8008a78 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d00f      	beq.n	8008a78 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	8b5b      	ldrh	r3, [r3, #26]
 8008a5c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d009      	beq.n	8008a78 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	8b5b      	ldrh	r3, [r3, #26]
 8008a68:	f043 0302 	orr.w	r3, r3, #2
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008a72:	6838      	ldr	r0, [r7, #0]
 8008a74:	f003 fbc2 	bl	800c1fc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	7d1b      	ldrb	r3, [r3, #20]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d020      	beq.n	8008ac2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d006      	beq.n	8008a96 <tcp_pcb_remove+0xca>
 8008a88:	4b13      	ldr	r3, [pc, #76]	; (8008ad8 <tcp_pcb_remove+0x10c>)
 8008a8a:	f640 0293 	movw	r2, #2195	; 0x893
 8008a8e:	4916      	ldr	r1, [pc, #88]	; (8008ae8 <tcp_pcb_remove+0x11c>)
 8008a90:	4813      	ldr	r0, [pc, #76]	; (8008ae0 <tcp_pcb_remove+0x114>)
 8008a92:	f007 f94f 	bl	800fd34 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d006      	beq.n	8008aac <tcp_pcb_remove+0xe0>
 8008a9e:	4b0e      	ldr	r3, [pc, #56]	; (8008ad8 <tcp_pcb_remove+0x10c>)
 8008aa0:	f640 0294 	movw	r2, #2196	; 0x894
 8008aa4:	4911      	ldr	r1, [pc, #68]	; (8008aec <tcp_pcb_remove+0x120>)
 8008aa6:	480e      	ldr	r0, [pc, #56]	; (8008ae0 <tcp_pcb_remove+0x114>)
 8008aa8:	f007 f944 	bl	800fd34 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d006      	beq.n	8008ac2 <tcp_pcb_remove+0xf6>
 8008ab4:	4b08      	ldr	r3, [pc, #32]	; (8008ad8 <tcp_pcb_remove+0x10c>)
 8008ab6:	f640 0296 	movw	r2, #2198	; 0x896
 8008aba:	490d      	ldr	r1, [pc, #52]	; (8008af0 <tcp_pcb_remove+0x124>)
 8008abc:	4808      	ldr	r0, [pc, #32]	; (8008ae0 <tcp_pcb_remove+0x114>)
 8008abe:	f007 f939 	bl	800fd34 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	2200      	movs	r2, #0
 8008acc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008ace:	bf00      	nop
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	08011cd0 	.word	0x08011cd0
 8008adc:	08012338 	.word	0x08012338
 8008ae0:	08011d14 	.word	0x08011d14
 8008ae4:	08012354 	.word	0x08012354
 8008ae8:	08012374 	.word	0x08012374
 8008aec:	0801238c 	.word	0x0801238c
 8008af0:	080123a8 	.word	0x080123a8

08008af4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d106      	bne.n	8008b10 <tcp_next_iss+0x1c>
 8008b02:	4b0a      	ldr	r3, [pc, #40]	; (8008b2c <tcp_next_iss+0x38>)
 8008b04:	f640 02af 	movw	r2, #2223	; 0x8af
 8008b08:	4909      	ldr	r1, [pc, #36]	; (8008b30 <tcp_next_iss+0x3c>)
 8008b0a:	480a      	ldr	r0, [pc, #40]	; (8008b34 <tcp_next_iss+0x40>)
 8008b0c:	f007 f912 	bl	800fd34 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008b10:	4b09      	ldr	r3, [pc, #36]	; (8008b38 <tcp_next_iss+0x44>)
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	4b09      	ldr	r3, [pc, #36]	; (8008b3c <tcp_next_iss+0x48>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4413      	add	r3, r2
 8008b1a:	4a07      	ldr	r2, [pc, #28]	; (8008b38 <tcp_next_iss+0x44>)
 8008b1c:	6013      	str	r3, [r2, #0]
  return iss;
 8008b1e:	4b06      	ldr	r3, [pc, #24]	; (8008b38 <tcp_next_iss+0x44>)
 8008b20:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	08011cd0 	.word	0x08011cd0
 8008b30:	080123c0 	.word	0x080123c0
 8008b34:	08011d14 	.word	0x08011d14
 8008b38:	20000018 	.word	0x20000018
 8008b3c:	20006a30 	.word	0x20006a30

08008b40 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b086      	sub	sp, #24
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	4603      	mov	r3, r0
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
 8008b4c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d106      	bne.n	8008b62 <tcp_eff_send_mss_netif+0x22>
 8008b54:	4b14      	ldr	r3, [pc, #80]	; (8008ba8 <tcp_eff_send_mss_netif+0x68>)
 8008b56:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8008b5a:	4914      	ldr	r1, [pc, #80]	; (8008bac <tcp_eff_send_mss_netif+0x6c>)
 8008b5c:	4814      	ldr	r0, [pc, #80]	; (8008bb0 <tcp_eff_send_mss_netif+0x70>)
 8008b5e:	f007 f8e9 	bl	800fd34 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d101      	bne.n	8008b6c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008b68:	89fb      	ldrh	r3, [r7, #14]
 8008b6a:	e019      	b.n	8008ba0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008b70:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008b72:	8afb      	ldrh	r3, [r7, #22]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d012      	beq.n	8008b9e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008b78:	2328      	movs	r3, #40	; 0x28
 8008b7a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008b7c:	8afa      	ldrh	r2, [r7, #22]
 8008b7e:	8abb      	ldrh	r3, [r7, #20]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d904      	bls.n	8008b8e <tcp_eff_send_mss_netif+0x4e>
 8008b84:	8afa      	ldrh	r2, [r7, #22]
 8008b86:	8abb      	ldrh	r3, [r7, #20]
 8008b88:	1ad3      	subs	r3, r2, r3
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	e000      	b.n	8008b90 <tcp_eff_send_mss_netif+0x50>
 8008b8e:	2300      	movs	r3, #0
 8008b90:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008b92:	8a7a      	ldrh	r2, [r7, #18]
 8008b94:	89fb      	ldrh	r3, [r7, #14]
 8008b96:	4293      	cmp	r3, r2
 8008b98:	bf28      	it	cs
 8008b9a:	4613      	movcs	r3, r2
 8008b9c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008b9e:	89fb      	ldrh	r3, [r7, #14]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3718      	adds	r7, #24
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	08011cd0 	.word	0x08011cd0
 8008bac:	080123dc 	.word	0x080123dc
 8008bb0:	08011d14 	.word	0x08011d14

08008bb4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d119      	bne.n	8008bfc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008bc8:	4b10      	ldr	r3, [pc, #64]	; (8008c0c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8008bca:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8008bce:	4910      	ldr	r1, [pc, #64]	; (8008c10 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008bd0:	4810      	ldr	r0, [pc, #64]	; (8008c14 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008bd2:	f007 f8af 	bl	800fd34 <iprintf>

  while (pcb != NULL) {
 8008bd6:	e011      	b.n	8008bfc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d108      	bne.n	8008bf6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f7fe fd26 	bl	800763c <tcp_abort>
      pcb = next;
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	60fb      	str	r3, [r7, #12]
 8008bf4:	e002      	b.n	8008bfc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1ea      	bne.n	8008bd8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008c02:	bf00      	nop
 8008c04:	bf00      	nop
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	08011cd0 	.word	0x08011cd0
 8008c10:	08012404 	.word	0x08012404
 8008c14:	08011d14 	.word	0x08011d14

08008c18 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d02a      	beq.n	8008c7e <tcp_netif_ip_addr_changed+0x66>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d026      	beq.n	8008c7e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008c30:	4b15      	ldr	r3, [pc, #84]	; (8008c88 <tcp_netif_ip_addr_changed+0x70>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f7ff ffbc 	bl	8008bb4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008c3c:	4b13      	ldr	r3, [pc, #76]	; (8008c8c <tcp_netif_ip_addr_changed+0x74>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4619      	mov	r1, r3
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f7ff ffb6 	bl	8008bb4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d017      	beq.n	8008c7e <tcp_netif_ip_addr_changed+0x66>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d013      	beq.n	8008c7e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008c56:	4b0e      	ldr	r3, [pc, #56]	; (8008c90 <tcp_netif_ip_addr_changed+0x78>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	60fb      	str	r3, [r7, #12]
 8008c5c:	e00c      	b.n	8008c78 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d103      	bne.n	8008c72 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	60fb      	str	r3, [r7, #12]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1ef      	bne.n	8008c5e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008c7e:	bf00      	nop
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	20006a2c 	.word	0x20006a2c
 8008c8c:	20006a38 	.word	0x20006a38
 8008c90:	20006a34 	.word	0x20006a34

08008c94 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d007      	beq.n	8008cb4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7ff fb57 	bl	800835c <tcp_segs_free>
    pcb->ooseq = NULL;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008cb4:	bf00      	nop
 8008cb6:	3708      	adds	r7, #8
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008cbc:	b590      	push	{r4, r7, lr}
 8008cbe:	b08d      	sub	sp, #52	; 0x34
 8008cc0:	af04      	add	r7, sp, #16
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d105      	bne.n	8008cd8 <tcp_input+0x1c>
 8008ccc:	4b9b      	ldr	r3, [pc, #620]	; (8008f3c <tcp_input+0x280>)
 8008cce:	2283      	movs	r2, #131	; 0x83
 8008cd0:	499b      	ldr	r1, [pc, #620]	; (8008f40 <tcp_input+0x284>)
 8008cd2:	489c      	ldr	r0, [pc, #624]	; (8008f44 <tcp_input+0x288>)
 8008cd4:	f007 f82e 	bl	800fd34 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	4a9a      	ldr	r2, [pc, #616]	; (8008f48 <tcp_input+0x28c>)
 8008cde:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	895b      	ldrh	r3, [r3, #10]
 8008ce4:	2b13      	cmp	r3, #19
 8008ce6:	f240 83c4 	bls.w	8009472 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008cea:	4b98      	ldr	r3, [pc, #608]	; (8008f4c <tcp_input+0x290>)
 8008cec:	695b      	ldr	r3, [r3, #20]
 8008cee:	4a97      	ldr	r2, [pc, #604]	; (8008f4c <tcp_input+0x290>)
 8008cf0:	6812      	ldr	r2, [r2, #0]
 8008cf2:	4611      	mov	r1, r2
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f006 f86b 	bl	800edd0 <ip4_addr_isbroadcast_u32>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f040 83ba 	bne.w	8009476 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008d02:	4b92      	ldr	r3, [pc, #584]	; (8008f4c <tcp_input+0x290>)
 8008d04:	695b      	ldr	r3, [r3, #20]
 8008d06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008d0a:	2be0      	cmp	r3, #224	; 0xe0
 8008d0c:	f000 83b3 	beq.w	8009476 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008d10:	4b8d      	ldr	r3, [pc, #564]	; (8008f48 <tcp_input+0x28c>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	899b      	ldrh	r3, [r3, #12]
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7fc fbb1 	bl	8005480 <lwip_htons>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	0b1b      	lsrs	r3, r3, #12
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008d2a:	7cbb      	ldrb	r3, [r7, #18]
 8008d2c:	2b13      	cmp	r3, #19
 8008d2e:	f240 83a4 	bls.w	800947a <tcp_input+0x7be>
 8008d32:	7cbb      	ldrb	r3, [r7, #18]
 8008d34:	b29a      	uxth	r2, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	891b      	ldrh	r3, [r3, #8]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	f200 839d 	bhi.w	800947a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008d40:	7cbb      	ldrb	r3, [r7, #18]
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	3b14      	subs	r3, #20
 8008d46:	b29a      	uxth	r2, r3
 8008d48:	4b81      	ldr	r3, [pc, #516]	; (8008f50 <tcp_input+0x294>)
 8008d4a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008d4c:	4b81      	ldr	r3, [pc, #516]	; (8008f54 <tcp_input+0x298>)
 8008d4e:	2200      	movs	r2, #0
 8008d50:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	895a      	ldrh	r2, [r3, #10]
 8008d56:	7cbb      	ldrb	r3, [r7, #18]
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d309      	bcc.n	8008d72 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008d5e:	4b7c      	ldr	r3, [pc, #496]	; (8008f50 <tcp_input+0x294>)
 8008d60:	881a      	ldrh	r2, [r3, #0]
 8008d62:	4b7d      	ldr	r3, [pc, #500]	; (8008f58 <tcp_input+0x29c>)
 8008d64:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008d66:	7cbb      	ldrb	r3, [r7, #18]
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f7fd fdb6 	bl	80068dc <pbuf_remove_header>
 8008d70:	e04e      	b.n	8008e10 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d105      	bne.n	8008d86 <tcp_input+0xca>
 8008d7a:	4b70      	ldr	r3, [pc, #448]	; (8008f3c <tcp_input+0x280>)
 8008d7c:	22c2      	movs	r2, #194	; 0xc2
 8008d7e:	4977      	ldr	r1, [pc, #476]	; (8008f5c <tcp_input+0x2a0>)
 8008d80:	4870      	ldr	r0, [pc, #448]	; (8008f44 <tcp_input+0x288>)
 8008d82:	f006 ffd7 	bl	800fd34 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008d86:	2114      	movs	r1, #20
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f7fd fda7 	bl	80068dc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	895a      	ldrh	r2, [r3, #10]
 8008d92:	4b71      	ldr	r3, [pc, #452]	; (8008f58 <tcp_input+0x29c>)
 8008d94:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008d96:	4b6e      	ldr	r3, [pc, #440]	; (8008f50 <tcp_input+0x294>)
 8008d98:	881a      	ldrh	r2, [r3, #0]
 8008d9a:	4b6f      	ldr	r3, [pc, #444]	; (8008f58 <tcp_input+0x29c>)
 8008d9c:	881b      	ldrh	r3, [r3, #0]
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008da2:	4b6d      	ldr	r3, [pc, #436]	; (8008f58 <tcp_input+0x29c>)
 8008da4:	881b      	ldrh	r3, [r3, #0]
 8008da6:	4619      	mov	r1, r3
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f7fd fd97 	bl	80068dc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	895b      	ldrh	r3, [r3, #10]
 8008db4:	8a3a      	ldrh	r2, [r7, #16]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	f200 8361 	bhi.w	800947e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	4a64      	ldr	r2, [pc, #400]	; (8008f54 <tcp_input+0x298>)
 8008dc4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	8a3a      	ldrh	r2, [r7, #16]
 8008dcc:	4611      	mov	r1, r2
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fd fd84 	bl	80068dc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	891a      	ldrh	r2, [r3, #8]
 8008dd8:	8a3b      	ldrh	r3, [r7, #16]
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	b29a      	uxth	r2, r3
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	895b      	ldrh	r3, [r3, #10]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d005      	beq.n	8008df6 <tcp_input+0x13a>
 8008dea:	4b54      	ldr	r3, [pc, #336]	; (8008f3c <tcp_input+0x280>)
 8008dec:	22df      	movs	r2, #223	; 0xdf
 8008dee:	495c      	ldr	r1, [pc, #368]	; (8008f60 <tcp_input+0x2a4>)
 8008df0:	4854      	ldr	r0, [pc, #336]	; (8008f44 <tcp_input+0x288>)
 8008df2:	f006 ff9f 	bl	800fd34 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	891a      	ldrh	r2, [r3, #8]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	891b      	ldrh	r3, [r3, #8]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d005      	beq.n	8008e10 <tcp_input+0x154>
 8008e04:	4b4d      	ldr	r3, [pc, #308]	; (8008f3c <tcp_input+0x280>)
 8008e06:	22e0      	movs	r2, #224	; 0xe0
 8008e08:	4956      	ldr	r1, [pc, #344]	; (8008f64 <tcp_input+0x2a8>)
 8008e0a:	484e      	ldr	r0, [pc, #312]	; (8008f44 <tcp_input+0x288>)
 8008e0c:	f006 ff92 	bl	800fd34 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008e10:	4b4d      	ldr	r3, [pc, #308]	; (8008f48 <tcp_input+0x28c>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	881b      	ldrh	r3, [r3, #0]
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	4a4b      	ldr	r2, [pc, #300]	; (8008f48 <tcp_input+0x28c>)
 8008e1a:	6814      	ldr	r4, [r2, #0]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7fc fb2f 	bl	8005480 <lwip_htons>
 8008e22:	4603      	mov	r3, r0
 8008e24:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008e26:	4b48      	ldr	r3, [pc, #288]	; (8008f48 <tcp_input+0x28c>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	885b      	ldrh	r3, [r3, #2]
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	4a46      	ldr	r2, [pc, #280]	; (8008f48 <tcp_input+0x28c>)
 8008e30:	6814      	ldr	r4, [r2, #0]
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7fc fb24 	bl	8005480 <lwip_htons>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008e3c:	4b42      	ldr	r3, [pc, #264]	; (8008f48 <tcp_input+0x28c>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	4a41      	ldr	r2, [pc, #260]	; (8008f48 <tcp_input+0x28c>)
 8008e44:	6814      	ldr	r4, [r2, #0]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7fc fb2f 	bl	80054aa <lwip_htonl>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	6063      	str	r3, [r4, #4]
 8008e50:	6863      	ldr	r3, [r4, #4]
 8008e52:	4a45      	ldr	r2, [pc, #276]	; (8008f68 <tcp_input+0x2ac>)
 8008e54:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008e56:	4b3c      	ldr	r3, [pc, #240]	; (8008f48 <tcp_input+0x28c>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	4a3a      	ldr	r2, [pc, #232]	; (8008f48 <tcp_input+0x28c>)
 8008e5e:	6814      	ldr	r4, [r2, #0]
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7fc fb22 	bl	80054aa <lwip_htonl>
 8008e66:	4603      	mov	r3, r0
 8008e68:	60a3      	str	r3, [r4, #8]
 8008e6a:	68a3      	ldr	r3, [r4, #8]
 8008e6c:	4a3f      	ldr	r2, [pc, #252]	; (8008f6c <tcp_input+0x2b0>)
 8008e6e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008e70:	4b35      	ldr	r3, [pc, #212]	; (8008f48 <tcp_input+0x28c>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	89db      	ldrh	r3, [r3, #14]
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	4a33      	ldr	r2, [pc, #204]	; (8008f48 <tcp_input+0x28c>)
 8008e7a:	6814      	ldr	r4, [r2, #0]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7fc faff 	bl	8005480 <lwip_htons>
 8008e82:	4603      	mov	r3, r0
 8008e84:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008e86:	4b30      	ldr	r3, [pc, #192]	; (8008f48 <tcp_input+0x28c>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	899b      	ldrh	r3, [r3, #12]
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7fc faf6 	bl	8005480 <lwip_htons>
 8008e94:	4603      	mov	r3, r0
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e9c:	b2da      	uxtb	r2, r3
 8008e9e:	4b34      	ldr	r3, [pc, #208]	; (8008f70 <tcp_input+0x2b4>)
 8008ea0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	891a      	ldrh	r2, [r3, #8]
 8008ea6:	4b33      	ldr	r3, [pc, #204]	; (8008f74 <tcp_input+0x2b8>)
 8008ea8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008eaa:	4b31      	ldr	r3, [pc, #196]	; (8008f70 <tcp_input+0x2b4>)
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	f003 0303 	and.w	r3, r3, #3
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00c      	beq.n	8008ed0 <tcp_input+0x214>
    tcplen++;
 8008eb6:	4b2f      	ldr	r3, [pc, #188]	; (8008f74 <tcp_input+0x2b8>)
 8008eb8:	881b      	ldrh	r3, [r3, #0]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	4b2d      	ldr	r3, [pc, #180]	; (8008f74 <tcp_input+0x2b8>)
 8008ec0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	891a      	ldrh	r2, [r3, #8]
 8008ec6:	4b2b      	ldr	r3, [pc, #172]	; (8008f74 <tcp_input+0x2b8>)
 8008ec8:	881b      	ldrh	r3, [r3, #0]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	f200 82d9 	bhi.w	8009482 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ed4:	4b28      	ldr	r3, [pc, #160]	; (8008f78 <tcp_input+0x2bc>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	61fb      	str	r3, [r7, #28]
 8008eda:	e09d      	b.n	8009018 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	7d1b      	ldrb	r3, [r3, #20]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d105      	bne.n	8008ef0 <tcp_input+0x234>
 8008ee4:	4b15      	ldr	r3, [pc, #84]	; (8008f3c <tcp_input+0x280>)
 8008ee6:	22fb      	movs	r2, #251	; 0xfb
 8008ee8:	4924      	ldr	r1, [pc, #144]	; (8008f7c <tcp_input+0x2c0>)
 8008eea:	4816      	ldr	r0, [pc, #88]	; (8008f44 <tcp_input+0x288>)
 8008eec:	f006 ff22 	bl	800fd34 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	7d1b      	ldrb	r3, [r3, #20]
 8008ef4:	2b0a      	cmp	r3, #10
 8008ef6:	d105      	bne.n	8008f04 <tcp_input+0x248>
 8008ef8:	4b10      	ldr	r3, [pc, #64]	; (8008f3c <tcp_input+0x280>)
 8008efa:	22fc      	movs	r2, #252	; 0xfc
 8008efc:	4920      	ldr	r1, [pc, #128]	; (8008f80 <tcp_input+0x2c4>)
 8008efe:	4811      	ldr	r0, [pc, #68]	; (8008f44 <tcp_input+0x288>)
 8008f00:	f006 ff18 	bl	800fd34 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	7d1b      	ldrb	r3, [r3, #20]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d105      	bne.n	8008f18 <tcp_input+0x25c>
 8008f0c:	4b0b      	ldr	r3, [pc, #44]	; (8008f3c <tcp_input+0x280>)
 8008f0e:	22fd      	movs	r2, #253	; 0xfd
 8008f10:	491c      	ldr	r1, [pc, #112]	; (8008f84 <tcp_input+0x2c8>)
 8008f12:	480c      	ldr	r0, [pc, #48]	; (8008f44 <tcp_input+0x288>)
 8008f14:	f006 ff0e 	bl	800fd34 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	7a1b      	ldrb	r3, [r3, #8]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d033      	beq.n	8008f88 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	7a1a      	ldrb	r2, [r3, #8]
 8008f24:	4b09      	ldr	r3, [pc, #36]	; (8008f4c <tcp_input+0x290>)
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d029      	beq.n	8008f88 <tcp_input+0x2cc>
      prev = pcb;
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	61bb      	str	r3, [r7, #24]
      continue;
 8008f38:	e06b      	b.n	8009012 <tcp_input+0x356>
 8008f3a:	bf00      	nop
 8008f3c:	08012438 	.word	0x08012438
 8008f40:	0801246c 	.word	0x0801246c
 8008f44:	08012484 	.word	0x08012484
 8008f48:	200000f0 	.word	0x200000f0
 8008f4c:	200034e8 	.word	0x200034e8
 8008f50:	200000f4 	.word	0x200000f4
 8008f54:	200000f8 	.word	0x200000f8
 8008f58:	200000f6 	.word	0x200000f6
 8008f5c:	080124ac 	.word	0x080124ac
 8008f60:	080124bc 	.word	0x080124bc
 8008f64:	080124c8 	.word	0x080124c8
 8008f68:	20000100 	.word	0x20000100
 8008f6c:	20000104 	.word	0x20000104
 8008f70:	2000010c 	.word	0x2000010c
 8008f74:	2000010a 	.word	0x2000010a
 8008f78:	20006a2c 	.word	0x20006a2c
 8008f7c:	080124e8 	.word	0x080124e8
 8008f80:	08012510 	.word	0x08012510
 8008f84:	0801253c 	.word	0x0801253c
    }

    if (pcb->remote_port == tcphdr->src &&
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	8b1a      	ldrh	r2, [r3, #24]
 8008f8c:	4b94      	ldr	r3, [pc, #592]	; (80091e0 <tcp_input+0x524>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	881b      	ldrh	r3, [r3, #0]
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d13a      	bne.n	800900e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	8ada      	ldrh	r2, [r3, #22]
 8008f9c:	4b90      	ldr	r3, [pc, #576]	; (80091e0 <tcp_input+0x524>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	885b      	ldrh	r3, [r3, #2]
 8008fa2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d132      	bne.n	800900e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	4b8d      	ldr	r3, [pc, #564]	; (80091e4 <tcp_input+0x528>)
 8008fae:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d12c      	bne.n	800900e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	4b8a      	ldr	r3, [pc, #552]	; (80091e4 <tcp_input+0x528>)
 8008fba:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d126      	bne.n	800900e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	69fa      	ldr	r2, [r7, #28]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d106      	bne.n	8008fd8 <tcp_input+0x31c>
 8008fca:	4b87      	ldr	r3, [pc, #540]	; (80091e8 <tcp_input+0x52c>)
 8008fcc:	f240 120d 	movw	r2, #269	; 0x10d
 8008fd0:	4986      	ldr	r1, [pc, #536]	; (80091ec <tcp_input+0x530>)
 8008fd2:	4887      	ldr	r0, [pc, #540]	; (80091f0 <tcp_input+0x534>)
 8008fd4:	f006 feae 	bl	800fd34 <iprintf>
      if (prev != NULL) {
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00a      	beq.n	8008ff4 <tcp_input+0x338>
        prev->next = pcb->next;
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	68da      	ldr	r2, [r3, #12]
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008fe6:	4b83      	ldr	r3, [pc, #524]	; (80091f4 <tcp_input+0x538>)
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008fee:	4a81      	ldr	r2, [pc, #516]	; (80091f4 <tcp_input+0x538>)
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	69fa      	ldr	r2, [r7, #28]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d111      	bne.n	8009022 <tcp_input+0x366>
 8008ffe:	4b7a      	ldr	r3, [pc, #488]	; (80091e8 <tcp_input+0x52c>)
 8009000:	f240 1215 	movw	r2, #277	; 0x115
 8009004:	497c      	ldr	r1, [pc, #496]	; (80091f8 <tcp_input+0x53c>)
 8009006:	487a      	ldr	r0, [pc, #488]	; (80091f0 <tcp_input+0x534>)
 8009008:	f006 fe94 	bl	800fd34 <iprintf>
      break;
 800900c:	e009      	b.n	8009022 <tcp_input+0x366>
    }
    prev = pcb;
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	61fb      	str	r3, [r7, #28]
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	2b00      	cmp	r3, #0
 800901c:	f47f af5e 	bne.w	8008edc <tcp_input+0x220>
 8009020:	e000      	b.n	8009024 <tcp_input+0x368>
      break;
 8009022:	bf00      	nop
  }

  if (pcb == NULL) {
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	2b00      	cmp	r3, #0
 8009028:	f040 8095 	bne.w	8009156 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800902c:	4b73      	ldr	r3, [pc, #460]	; (80091fc <tcp_input+0x540>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	61fb      	str	r3, [r7, #28]
 8009032:	e03f      	b.n	80090b4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	7d1b      	ldrb	r3, [r3, #20]
 8009038:	2b0a      	cmp	r3, #10
 800903a:	d006      	beq.n	800904a <tcp_input+0x38e>
 800903c:	4b6a      	ldr	r3, [pc, #424]	; (80091e8 <tcp_input+0x52c>)
 800903e:	f240 121f 	movw	r2, #287	; 0x11f
 8009042:	496f      	ldr	r1, [pc, #444]	; (8009200 <tcp_input+0x544>)
 8009044:	486a      	ldr	r0, [pc, #424]	; (80091f0 <tcp_input+0x534>)
 8009046:	f006 fe75 	bl	800fd34 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	7a1b      	ldrb	r3, [r3, #8]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d009      	beq.n	8009066 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	7a1a      	ldrb	r2, [r3, #8]
 8009056:	4b63      	ldr	r3, [pc, #396]	; (80091e4 <tcp_input+0x528>)
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800905e:	3301      	adds	r3, #1
 8009060:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009062:	429a      	cmp	r2, r3
 8009064:	d122      	bne.n	80090ac <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	8b1a      	ldrh	r2, [r3, #24]
 800906a:	4b5d      	ldr	r3, [pc, #372]	; (80091e0 <tcp_input+0x524>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	881b      	ldrh	r3, [r3, #0]
 8009070:	b29b      	uxth	r3, r3
 8009072:	429a      	cmp	r2, r3
 8009074:	d11b      	bne.n	80090ae <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	8ada      	ldrh	r2, [r3, #22]
 800907a:	4b59      	ldr	r3, [pc, #356]	; (80091e0 <tcp_input+0x524>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	885b      	ldrh	r3, [r3, #2]
 8009080:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009082:	429a      	cmp	r2, r3
 8009084:	d113      	bne.n	80090ae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	685a      	ldr	r2, [r3, #4]
 800908a:	4b56      	ldr	r3, [pc, #344]	; (80091e4 <tcp_input+0x528>)
 800908c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800908e:	429a      	cmp	r2, r3
 8009090:	d10d      	bne.n	80090ae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	4b53      	ldr	r3, [pc, #332]	; (80091e4 <tcp_input+0x528>)
 8009098:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800909a:	429a      	cmp	r2, r3
 800909c:	d107      	bne.n	80090ae <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800909e:	69f8      	ldr	r0, [r7, #28]
 80090a0:	f000 fb54 	bl	800974c <tcp_timewait_input>
        }
        pbuf_free(p);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f7fd fc9f 	bl	80069e8 <pbuf_free>
        return;
 80090aa:	e1f0      	b.n	800948e <tcp_input+0x7d2>
        continue;
 80090ac:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	61fb      	str	r3, [r7, #28]
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1bc      	bne.n	8009034 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80090ba:	2300      	movs	r3, #0
 80090bc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80090be:	4b51      	ldr	r3, [pc, #324]	; (8009204 <tcp_input+0x548>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	617b      	str	r3, [r7, #20]
 80090c4:	e02a      	b.n	800911c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	7a1b      	ldrb	r3, [r3, #8]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00c      	beq.n	80090e8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	7a1a      	ldrb	r2, [r3, #8]
 80090d2:	4b44      	ldr	r3, [pc, #272]	; (80091e4 <tcp_input+0x528>)
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80090da:	3301      	adds	r3, #1
 80090dc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80090de:	429a      	cmp	r2, r3
 80090e0:	d002      	beq.n	80090e8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	61bb      	str	r3, [r7, #24]
        continue;
 80090e6:	e016      	b.n	8009116 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	8ada      	ldrh	r2, [r3, #22]
 80090ec:	4b3c      	ldr	r3, [pc, #240]	; (80091e0 <tcp_input+0x524>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	885b      	ldrh	r3, [r3, #2]
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d10c      	bne.n	8009112 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	4b39      	ldr	r3, [pc, #228]	; (80091e4 <tcp_input+0x528>)
 80090fe:	695b      	ldr	r3, [r3, #20]
 8009100:	429a      	cmp	r2, r3
 8009102:	d00f      	beq.n	8009124 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00d      	beq.n	8009126 <tcp_input+0x46a>
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d009      	beq.n	8009126 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	617b      	str	r3, [r7, #20]
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1d1      	bne.n	80090c6 <tcp_input+0x40a>
 8009122:	e000      	b.n	8009126 <tcp_input+0x46a>
            break;
 8009124:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d014      	beq.n	8009156 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800912c:	69bb      	ldr	r3, [r7, #24]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00a      	beq.n	8009148 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	68da      	ldr	r2, [r3, #12]
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800913a:	4b32      	ldr	r3, [pc, #200]	; (8009204 <tcp_input+0x548>)
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009142:	4a30      	ldr	r2, [pc, #192]	; (8009204 <tcp_input+0x548>)
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009148:	6978      	ldr	r0, [r7, #20]
 800914a:	f000 fa01 	bl	8009550 <tcp_listen_input>
      }
      pbuf_free(p);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f7fd fc4a 	bl	80069e8 <pbuf_free>
      return;
 8009154:	e19b      	b.n	800948e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	2b00      	cmp	r3, #0
 800915a:	f000 8160 	beq.w	800941e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800915e:	4b2a      	ldr	r3, [pc, #168]	; (8009208 <tcp_input+0x54c>)
 8009160:	2200      	movs	r2, #0
 8009162:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	891a      	ldrh	r2, [r3, #8]
 8009168:	4b27      	ldr	r3, [pc, #156]	; (8009208 <tcp_input+0x54c>)
 800916a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800916c:	4a26      	ldr	r2, [pc, #152]	; (8009208 <tcp_input+0x54c>)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009172:	4b1b      	ldr	r3, [pc, #108]	; (80091e0 <tcp_input+0x524>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a24      	ldr	r2, [pc, #144]	; (8009208 <tcp_input+0x54c>)
 8009178:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800917a:	4b24      	ldr	r3, [pc, #144]	; (800920c <tcp_input+0x550>)
 800917c:	2200      	movs	r2, #0
 800917e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009180:	4b23      	ldr	r3, [pc, #140]	; (8009210 <tcp_input+0x554>)
 8009182:	2200      	movs	r2, #0
 8009184:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009186:	4b23      	ldr	r3, [pc, #140]	; (8009214 <tcp_input+0x558>)
 8009188:	2200      	movs	r2, #0
 800918a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800918c:	4b22      	ldr	r3, [pc, #136]	; (8009218 <tcp_input+0x55c>)
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	f003 0308 	and.w	r3, r3, #8
 8009194:	2b00      	cmp	r3, #0
 8009196:	d006      	beq.n	80091a6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	7b5b      	ldrb	r3, [r3, #13]
 800919c:	f043 0301 	orr.w	r3, r3, #1
 80091a0:	b2da      	uxtb	r2, r3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d038      	beq.n	8009220 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80091ae:	69f8      	ldr	r0, [r7, #28]
 80091b0:	f7ff f858 	bl	8008264 <tcp_process_refused_data>
 80091b4:	4603      	mov	r3, r0
 80091b6:	f113 0f0d 	cmn.w	r3, #13
 80091ba:	d007      	beq.n	80091cc <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d02d      	beq.n	8009220 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80091c4:	4b15      	ldr	r3, [pc, #84]	; (800921c <tcp_input+0x560>)
 80091c6:	881b      	ldrh	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d029      	beq.n	8009220 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f040 8104 	bne.w	80093de <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80091d6:	69f8      	ldr	r0, [r7, #28]
 80091d8:	f003 fe16 	bl	800ce08 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80091dc:	e0ff      	b.n	80093de <tcp_input+0x722>
 80091de:	bf00      	nop
 80091e0:	200000f0 	.word	0x200000f0
 80091e4:	200034e8 	.word	0x200034e8
 80091e8:	08012438 	.word	0x08012438
 80091ec:	08012564 	.word	0x08012564
 80091f0:	08012484 	.word	0x08012484
 80091f4:	20006a2c 	.word	0x20006a2c
 80091f8:	08012590 	.word	0x08012590
 80091fc:	20006a3c 	.word	0x20006a3c
 8009200:	080125bc 	.word	0x080125bc
 8009204:	20006a34 	.word	0x20006a34
 8009208:	200000e0 	.word	0x200000e0
 800920c:	20000110 	.word	0x20000110
 8009210:	2000010d 	.word	0x2000010d
 8009214:	20000108 	.word	0x20000108
 8009218:	2000010c 	.word	0x2000010c
 800921c:	2000010a 	.word	0x2000010a
      }
    }
    tcp_input_pcb = pcb;
 8009220:	4a9c      	ldr	r2, [pc, #624]	; (8009494 <tcp_input+0x7d8>)
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009226:	69f8      	ldr	r0, [r7, #28]
 8009228:	f000 fb0a 	bl	8009840 <tcp_process>
 800922c:	4603      	mov	r3, r0
 800922e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009230:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009234:	f113 0f0d 	cmn.w	r3, #13
 8009238:	f000 80d3 	beq.w	80093e2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800923c:	4b96      	ldr	r3, [pc, #600]	; (8009498 <tcp_input+0x7dc>)
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	f003 0308 	and.w	r3, r3, #8
 8009244:	2b00      	cmp	r3, #0
 8009246:	d015      	beq.n	8009274 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800924e:	2b00      	cmp	r3, #0
 8009250:	d008      	beq.n	8009264 <tcp_input+0x5a8>
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009258:	69fa      	ldr	r2, [r7, #28]
 800925a:	6912      	ldr	r2, [r2, #16]
 800925c:	f06f 010d 	mvn.w	r1, #13
 8009260:	4610      	mov	r0, r2
 8009262:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009264:	69f9      	ldr	r1, [r7, #28]
 8009266:	488d      	ldr	r0, [pc, #564]	; (800949c <tcp_input+0x7e0>)
 8009268:	f7ff fbb0 	bl	80089cc <tcp_pcb_remove>
        tcp_free(pcb);
 800926c:	69f8      	ldr	r0, [r7, #28]
 800926e:	f7fd fefd 	bl	800706c <tcp_free>
 8009272:	e0c1      	b.n	80093f8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8009274:	2300      	movs	r3, #0
 8009276:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009278:	4b89      	ldr	r3, [pc, #548]	; (80094a0 <tcp_input+0x7e4>)
 800927a:	881b      	ldrh	r3, [r3, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d01d      	beq.n	80092bc <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009280:	4b87      	ldr	r3, [pc, #540]	; (80094a0 <tcp_input+0x7e4>)
 8009282:	881b      	ldrh	r3, [r3, #0]
 8009284:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009286:	69fb      	ldr	r3, [r7, #28]
 8009288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00a      	beq.n	80092a6 <tcp_input+0x5ea>
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009296:	69fa      	ldr	r2, [r7, #28]
 8009298:	6910      	ldr	r0, [r2, #16]
 800929a:	89fa      	ldrh	r2, [r7, #14]
 800929c:	69f9      	ldr	r1, [r7, #28]
 800929e:	4798      	blx	r3
 80092a0:	4603      	mov	r3, r0
 80092a2:	74fb      	strb	r3, [r7, #19]
 80092a4:	e001      	b.n	80092aa <tcp_input+0x5ee>
 80092a6:	2300      	movs	r3, #0
 80092a8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80092aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80092ae:	f113 0f0d 	cmn.w	r3, #13
 80092b2:	f000 8098 	beq.w	80093e6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80092b6:	4b7a      	ldr	r3, [pc, #488]	; (80094a0 <tcp_input+0x7e4>)
 80092b8:	2200      	movs	r2, #0
 80092ba:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80092bc:	69f8      	ldr	r0, [r7, #28]
 80092be:	f000 f907 	bl	80094d0 <tcp_input_delayed_close>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	f040 8090 	bne.w	80093ea <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80092ca:	4b76      	ldr	r3, [pc, #472]	; (80094a4 <tcp_input+0x7e8>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d041      	beq.n	8009356 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d006      	beq.n	80092e8 <tcp_input+0x62c>
 80092da:	4b73      	ldr	r3, [pc, #460]	; (80094a8 <tcp_input+0x7ec>)
 80092dc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80092e0:	4972      	ldr	r1, [pc, #456]	; (80094ac <tcp_input+0x7f0>)
 80092e2:	4873      	ldr	r0, [pc, #460]	; (80094b0 <tcp_input+0x7f4>)
 80092e4:	f006 fd26 	bl	800fd34 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	8b5b      	ldrh	r3, [r3, #26]
 80092ec:	f003 0310 	and.w	r3, r3, #16
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d008      	beq.n	8009306 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80092f4:	4b6b      	ldr	r3, [pc, #428]	; (80094a4 <tcp_input+0x7e8>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7fd fb75 	bl	80069e8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80092fe:	69f8      	ldr	r0, [r7, #28]
 8009300:	f7fe f99c 	bl	800763c <tcp_abort>
            goto aborted;
 8009304:	e078      	b.n	80093f8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00c      	beq.n	800932a <tcp_input+0x66e>
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	6918      	ldr	r0, [r3, #16]
 800931a:	4b62      	ldr	r3, [pc, #392]	; (80094a4 <tcp_input+0x7e8>)
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	2300      	movs	r3, #0
 8009320:	69f9      	ldr	r1, [r7, #28]
 8009322:	47a0      	blx	r4
 8009324:	4603      	mov	r3, r0
 8009326:	74fb      	strb	r3, [r7, #19]
 8009328:	e008      	b.n	800933c <tcp_input+0x680>
 800932a:	4b5e      	ldr	r3, [pc, #376]	; (80094a4 <tcp_input+0x7e8>)
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	2300      	movs	r3, #0
 8009330:	69f9      	ldr	r1, [r7, #28]
 8009332:	2000      	movs	r0, #0
 8009334:	f7ff f88a 	bl	800844c <tcp_recv_null>
 8009338:	4603      	mov	r3, r0
 800933a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800933c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009340:	f113 0f0d 	cmn.w	r3, #13
 8009344:	d053      	beq.n	80093ee <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009346:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d003      	beq.n	8009356 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800934e:	4b55      	ldr	r3, [pc, #340]	; (80094a4 <tcp_input+0x7e8>)
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009356:	4b50      	ldr	r3, [pc, #320]	; (8009498 <tcp_input+0x7dc>)
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	f003 0320 	and.w	r3, r3, #32
 800935e:	2b00      	cmp	r3, #0
 8009360:	d030      	beq.n	80093c4 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009366:	2b00      	cmp	r3, #0
 8009368:	d009      	beq.n	800937e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800936e:	7b5a      	ldrb	r2, [r3, #13]
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009374:	f042 0220 	orr.w	r2, r2, #32
 8009378:	b2d2      	uxtb	r2, r2
 800937a:	735a      	strb	r2, [r3, #13]
 800937c:	e022      	b.n	80093c4 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009382:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009386:	d005      	beq.n	8009394 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800938c:	3301      	adds	r3, #1
 800938e:	b29a      	uxth	r2, r3
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00b      	beq.n	80093b6 <tcp_input+0x6fa>
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	6918      	ldr	r0, [r3, #16]
 80093a8:	2300      	movs	r3, #0
 80093aa:	2200      	movs	r2, #0
 80093ac:	69f9      	ldr	r1, [r7, #28]
 80093ae:	47a0      	blx	r4
 80093b0:	4603      	mov	r3, r0
 80093b2:	74fb      	strb	r3, [r7, #19]
 80093b4:	e001      	b.n	80093ba <tcp_input+0x6fe>
 80093b6:	2300      	movs	r3, #0
 80093b8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80093ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80093be:	f113 0f0d 	cmn.w	r3, #13
 80093c2:	d016      	beq.n	80093f2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80093c4:	4b33      	ldr	r3, [pc, #204]	; (8009494 <tcp_input+0x7d8>)
 80093c6:	2200      	movs	r2, #0
 80093c8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80093ca:	69f8      	ldr	r0, [r7, #28]
 80093cc:	f000 f880 	bl	80094d0 <tcp_input_delayed_close>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d10f      	bne.n	80093f6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80093d6:	69f8      	ldr	r0, [r7, #28]
 80093d8:	f002 ff10 	bl	800c1fc <tcp_output>
 80093dc:	e00c      	b.n	80093f8 <tcp_input+0x73c>
        goto aborted;
 80093de:	bf00      	nop
 80093e0:	e00a      	b.n	80093f8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80093e2:	bf00      	nop
 80093e4:	e008      	b.n	80093f8 <tcp_input+0x73c>
              goto aborted;
 80093e6:	bf00      	nop
 80093e8:	e006      	b.n	80093f8 <tcp_input+0x73c>
          goto aborted;
 80093ea:	bf00      	nop
 80093ec:	e004      	b.n	80093f8 <tcp_input+0x73c>
            goto aborted;
 80093ee:	bf00      	nop
 80093f0:	e002      	b.n	80093f8 <tcp_input+0x73c>
              goto aborted;
 80093f2:	bf00      	nop
 80093f4:	e000      	b.n	80093f8 <tcp_input+0x73c>
          goto aborted;
 80093f6:	bf00      	nop
    tcp_input_pcb = NULL;
 80093f8:	4b26      	ldr	r3, [pc, #152]	; (8009494 <tcp_input+0x7d8>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80093fe:	4b29      	ldr	r3, [pc, #164]	; (80094a4 <tcp_input+0x7e8>)
 8009400:	2200      	movs	r2, #0
 8009402:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009404:	4b2b      	ldr	r3, [pc, #172]	; (80094b4 <tcp_input+0x7f8>)
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d03f      	beq.n	800948c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800940c:	4b29      	ldr	r3, [pc, #164]	; (80094b4 <tcp_input+0x7f8>)
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	4618      	mov	r0, r3
 8009412:	f7fd fae9 	bl	80069e8 <pbuf_free>
      inseg.p = NULL;
 8009416:	4b27      	ldr	r3, [pc, #156]	; (80094b4 <tcp_input+0x7f8>)
 8009418:	2200      	movs	r2, #0
 800941a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800941c:	e036      	b.n	800948c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800941e:	4b26      	ldr	r3, [pc, #152]	; (80094b8 <tcp_input+0x7fc>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	899b      	ldrh	r3, [r3, #12]
 8009424:	b29b      	uxth	r3, r3
 8009426:	4618      	mov	r0, r3
 8009428:	f7fc f82a 	bl	8005480 <lwip_htons>
 800942c:	4603      	mov	r3, r0
 800942e:	b2db      	uxtb	r3, r3
 8009430:	f003 0304 	and.w	r3, r3, #4
 8009434:	2b00      	cmp	r3, #0
 8009436:	d118      	bne.n	800946a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009438:	4b20      	ldr	r3, [pc, #128]	; (80094bc <tcp_input+0x800>)
 800943a:	6819      	ldr	r1, [r3, #0]
 800943c:	4b20      	ldr	r3, [pc, #128]	; (80094c0 <tcp_input+0x804>)
 800943e:	881b      	ldrh	r3, [r3, #0]
 8009440:	461a      	mov	r2, r3
 8009442:	4b20      	ldr	r3, [pc, #128]	; (80094c4 <tcp_input+0x808>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009448:	4b1b      	ldr	r3, [pc, #108]	; (80094b8 <tcp_input+0x7fc>)
 800944a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800944c:	885b      	ldrh	r3, [r3, #2]
 800944e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009450:	4a19      	ldr	r2, [pc, #100]	; (80094b8 <tcp_input+0x7fc>)
 8009452:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009454:	8812      	ldrh	r2, [r2, #0]
 8009456:	b292      	uxth	r2, r2
 8009458:	9202      	str	r2, [sp, #8]
 800945a:	9301      	str	r3, [sp, #4]
 800945c:	4b1a      	ldr	r3, [pc, #104]	; (80094c8 <tcp_input+0x80c>)
 800945e:	9300      	str	r3, [sp, #0]
 8009460:	4b1a      	ldr	r3, [pc, #104]	; (80094cc <tcp_input+0x810>)
 8009462:	4602      	mov	r2, r0
 8009464:	2000      	movs	r0, #0
 8009466:	f003 fc7d 	bl	800cd64 <tcp_rst>
    pbuf_free(p);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f7fd fabc 	bl	80069e8 <pbuf_free>
  return;
 8009470:	e00c      	b.n	800948c <tcp_input+0x7d0>
    goto dropped;
 8009472:	bf00      	nop
 8009474:	e006      	b.n	8009484 <tcp_input+0x7c8>
    goto dropped;
 8009476:	bf00      	nop
 8009478:	e004      	b.n	8009484 <tcp_input+0x7c8>
    goto dropped;
 800947a:	bf00      	nop
 800947c:	e002      	b.n	8009484 <tcp_input+0x7c8>
      goto dropped;
 800947e:	bf00      	nop
 8009480:	e000      	b.n	8009484 <tcp_input+0x7c8>
      goto dropped;
 8009482:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f7fd faaf 	bl	80069e8 <pbuf_free>
 800948a:	e000      	b.n	800948e <tcp_input+0x7d2>
  return;
 800948c:	bf00      	nop
}
 800948e:	3724      	adds	r7, #36	; 0x24
 8009490:	46bd      	mov	sp, r7
 8009492:	bd90      	pop	{r4, r7, pc}
 8009494:	20006a40 	.word	0x20006a40
 8009498:	2000010d 	.word	0x2000010d
 800949c:	20006a2c 	.word	0x20006a2c
 80094a0:	20000108 	.word	0x20000108
 80094a4:	20000110 	.word	0x20000110
 80094a8:	08012438 	.word	0x08012438
 80094ac:	080125ec 	.word	0x080125ec
 80094b0:	08012484 	.word	0x08012484
 80094b4:	200000e0 	.word	0x200000e0
 80094b8:	200000f0 	.word	0x200000f0
 80094bc:	20000104 	.word	0x20000104
 80094c0:	2000010a 	.word	0x2000010a
 80094c4:	20000100 	.word	0x20000100
 80094c8:	200034f8 	.word	0x200034f8
 80094cc:	200034fc 	.word	0x200034fc

080094d0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d106      	bne.n	80094ec <tcp_input_delayed_close+0x1c>
 80094de:	4b17      	ldr	r3, [pc, #92]	; (800953c <tcp_input_delayed_close+0x6c>)
 80094e0:	f240 225a 	movw	r2, #602	; 0x25a
 80094e4:	4916      	ldr	r1, [pc, #88]	; (8009540 <tcp_input_delayed_close+0x70>)
 80094e6:	4817      	ldr	r0, [pc, #92]	; (8009544 <tcp_input_delayed_close+0x74>)
 80094e8:	f006 fc24 	bl	800fd34 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80094ec:	4b16      	ldr	r3, [pc, #88]	; (8009548 <tcp_input_delayed_close+0x78>)
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	f003 0310 	and.w	r3, r3, #16
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d01c      	beq.n	8009532 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	8b5b      	ldrh	r3, [r3, #26]
 80094fc:	f003 0310 	and.w	r3, r3, #16
 8009500:	2b00      	cmp	r3, #0
 8009502:	d10d      	bne.n	8009520 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800950a:	2b00      	cmp	r3, #0
 800950c:	d008      	beq.n	8009520 <tcp_input_delayed_close+0x50>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	6912      	ldr	r2, [r2, #16]
 8009518:	f06f 010e 	mvn.w	r1, #14
 800951c:	4610      	mov	r0, r2
 800951e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009520:	6879      	ldr	r1, [r7, #4]
 8009522:	480a      	ldr	r0, [pc, #40]	; (800954c <tcp_input_delayed_close+0x7c>)
 8009524:	f7ff fa52 	bl	80089cc <tcp_pcb_remove>
    tcp_free(pcb);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f7fd fd9f 	bl	800706c <tcp_free>
    return 1;
 800952e:	2301      	movs	r3, #1
 8009530:	e000      	b.n	8009534 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}
 800953c:	08012438 	.word	0x08012438
 8009540:	08012608 	.word	0x08012608
 8009544:	08012484 	.word	0x08012484
 8009548:	2000010d 	.word	0x2000010d
 800954c:	20006a2c 	.word	0x20006a2c

08009550 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009550:	b590      	push	{r4, r7, lr}
 8009552:	b08b      	sub	sp, #44	; 0x2c
 8009554:	af04      	add	r7, sp, #16
 8009556:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009558:	4b6f      	ldr	r3, [pc, #444]	; (8009718 <tcp_listen_input+0x1c8>)
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	f003 0304 	and.w	r3, r3, #4
 8009560:	2b00      	cmp	r3, #0
 8009562:	f040 80d2 	bne.w	800970a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d106      	bne.n	800957a <tcp_listen_input+0x2a>
 800956c:	4b6b      	ldr	r3, [pc, #428]	; (800971c <tcp_listen_input+0x1cc>)
 800956e:	f240 2281 	movw	r2, #641	; 0x281
 8009572:	496b      	ldr	r1, [pc, #428]	; (8009720 <tcp_listen_input+0x1d0>)
 8009574:	486b      	ldr	r0, [pc, #428]	; (8009724 <tcp_listen_input+0x1d4>)
 8009576:	f006 fbdd 	bl	800fd34 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800957a:	4b67      	ldr	r3, [pc, #412]	; (8009718 <tcp_listen_input+0x1c8>)
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	f003 0310 	and.w	r3, r3, #16
 8009582:	2b00      	cmp	r3, #0
 8009584:	d019      	beq.n	80095ba <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009586:	4b68      	ldr	r3, [pc, #416]	; (8009728 <tcp_listen_input+0x1d8>)
 8009588:	6819      	ldr	r1, [r3, #0]
 800958a:	4b68      	ldr	r3, [pc, #416]	; (800972c <tcp_listen_input+0x1dc>)
 800958c:	881b      	ldrh	r3, [r3, #0]
 800958e:	461a      	mov	r2, r3
 8009590:	4b67      	ldr	r3, [pc, #412]	; (8009730 <tcp_listen_input+0x1e0>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009596:	4b67      	ldr	r3, [pc, #412]	; (8009734 <tcp_listen_input+0x1e4>)
 8009598:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800959a:	885b      	ldrh	r3, [r3, #2]
 800959c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800959e:	4a65      	ldr	r2, [pc, #404]	; (8009734 <tcp_listen_input+0x1e4>)
 80095a0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80095a2:	8812      	ldrh	r2, [r2, #0]
 80095a4:	b292      	uxth	r2, r2
 80095a6:	9202      	str	r2, [sp, #8]
 80095a8:	9301      	str	r3, [sp, #4]
 80095aa:	4b63      	ldr	r3, [pc, #396]	; (8009738 <tcp_listen_input+0x1e8>)
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	4b63      	ldr	r3, [pc, #396]	; (800973c <tcp_listen_input+0x1ec>)
 80095b0:	4602      	mov	r2, r0
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f003 fbd6 	bl	800cd64 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80095b8:	e0a9      	b.n	800970e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80095ba:	4b57      	ldr	r3, [pc, #348]	; (8009718 <tcp_listen_input+0x1c8>)
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	f003 0302 	and.w	r3, r3, #2
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	f000 80a3 	beq.w	800970e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	7d5b      	ldrb	r3, [r3, #21]
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7ff f861 	bl	8008694 <tcp_alloc>
 80095d2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d111      	bne.n	80095fe <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	699b      	ldr	r3, [r3, #24]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00a      	beq.n	80095f8 <tcp_listen_input+0xa8>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	6910      	ldr	r0, [r2, #16]
 80095ea:	f04f 32ff 	mov.w	r2, #4294967295
 80095ee:	2100      	movs	r1, #0
 80095f0:	4798      	blx	r3
 80095f2:	4603      	mov	r3, r0
 80095f4:	73bb      	strb	r3, [r7, #14]
      return;
 80095f6:	e08b      	b.n	8009710 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80095f8:	23f0      	movs	r3, #240	; 0xf0
 80095fa:	73bb      	strb	r3, [r7, #14]
      return;
 80095fc:	e088      	b.n	8009710 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80095fe:	4b50      	ldr	r3, [pc, #320]	; (8009740 <tcp_listen_input+0x1f0>)
 8009600:	695a      	ldr	r2, [r3, #20]
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009606:	4b4e      	ldr	r3, [pc, #312]	; (8009740 <tcp_listen_input+0x1f0>)
 8009608:	691a      	ldr	r2, [r3, #16]
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	8ada      	ldrh	r2, [r3, #22]
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8009616:	4b47      	ldr	r3, [pc, #284]	; (8009734 <tcp_listen_input+0x1e4>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	881b      	ldrh	r3, [r3, #0]
 800961c:	b29a      	uxth	r2, r3
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	2203      	movs	r2, #3
 8009626:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009628:	4b41      	ldr	r3, [pc, #260]	; (8009730 <tcp_listen_input+0x1e0>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	1c5a      	adds	r2, r3, #1
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800963a:	6978      	ldr	r0, [r7, #20]
 800963c:	f7ff fa5a 	bl	8008af4 <tcp_next_iss>
 8009640:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	693a      	ldr	r2, [r7, #16]
 800964c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	693a      	ldr	r2, [r7, #16]
 8009652:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	693a      	ldr	r2, [r7, #16]
 8009658:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800965a:	4b35      	ldr	r3, [pc, #212]	; (8009730 <tcp_listen_input+0x1e0>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	1e5a      	subs	r2, r3, #1
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	691a      	ldr	r2, [r3, #16]
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	7a5b      	ldrb	r3, [r3, #9]
 8009676:	f003 030c 	and.w	r3, r3, #12
 800967a:	b2da      	uxtb	r2, r3
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	7a1a      	ldrb	r2, [r3, #8]
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009688:	4b2e      	ldr	r3, [pc, #184]	; (8009744 <tcp_listen_input+0x1f4>)
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	60da      	str	r2, [r3, #12]
 8009690:	4a2c      	ldr	r2, [pc, #176]	; (8009744 <tcp_listen_input+0x1f4>)
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	6013      	str	r3, [r2, #0]
 8009696:	f003 fd27 	bl	800d0e8 <tcp_timer_needed>
 800969a:	4b2b      	ldr	r3, [pc, #172]	; (8009748 <tcp_listen_input+0x1f8>)
 800969c:	2201      	movs	r2, #1
 800969e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80096a0:	6978      	ldr	r0, [r7, #20]
 80096a2:	f001 fd8d 	bl	800b1c0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80096a6:	4b23      	ldr	r3, [pc, #140]	; (8009734 <tcp_listen_input+0x1e4>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	89db      	ldrh	r3, [r3, #14]
 80096ac:	b29a      	uxth	r2, r3
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	3304      	adds	r3, #4
 80096c8:	4618      	mov	r0, r3
 80096ca:	f005 f8eb 	bl	800e8a4 <ip4_route>
 80096ce:	4601      	mov	r1, r0
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	3304      	adds	r3, #4
 80096d4:	461a      	mov	r2, r3
 80096d6:	4620      	mov	r0, r4
 80096d8:	f7ff fa32 	bl	8008b40 <tcp_eff_send_mss_netif>
 80096dc:	4603      	mov	r3, r0
 80096de:	461a      	mov	r2, r3
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80096e4:	2112      	movs	r1, #18
 80096e6:	6978      	ldr	r0, [r7, #20]
 80096e8:	f002 fc9a 	bl	800c020 <tcp_enqueue_flags>
 80096ec:	4603      	mov	r3, r0
 80096ee:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80096f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d004      	beq.n	8009702 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80096f8:	2100      	movs	r1, #0
 80096fa:	6978      	ldr	r0, [r7, #20]
 80096fc:	f7fd fee0 	bl	80074c0 <tcp_abandon>
      return;
 8009700:	e006      	b.n	8009710 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8009702:	6978      	ldr	r0, [r7, #20]
 8009704:	f002 fd7a 	bl	800c1fc <tcp_output>
  return;
 8009708:	e001      	b.n	800970e <tcp_listen_input+0x1be>
    return;
 800970a:	bf00      	nop
 800970c:	e000      	b.n	8009710 <tcp_listen_input+0x1c0>
  return;
 800970e:	bf00      	nop
}
 8009710:	371c      	adds	r7, #28
 8009712:	46bd      	mov	sp, r7
 8009714:	bd90      	pop	{r4, r7, pc}
 8009716:	bf00      	nop
 8009718:	2000010c 	.word	0x2000010c
 800971c:	08012438 	.word	0x08012438
 8009720:	08012630 	.word	0x08012630
 8009724:	08012484 	.word	0x08012484
 8009728:	20000104 	.word	0x20000104
 800972c:	2000010a 	.word	0x2000010a
 8009730:	20000100 	.word	0x20000100
 8009734:	200000f0 	.word	0x200000f0
 8009738:	200034f8 	.word	0x200034f8
 800973c:	200034fc 	.word	0x200034fc
 8009740:	200034e8 	.word	0x200034e8
 8009744:	20006a2c 	.word	0x20006a2c
 8009748:	20006a28 	.word	0x20006a28

0800974c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b086      	sub	sp, #24
 8009750:	af04      	add	r7, sp, #16
 8009752:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009754:	4b2f      	ldr	r3, [pc, #188]	; (8009814 <tcp_timewait_input+0xc8>)
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	f003 0304 	and.w	r3, r3, #4
 800975c:	2b00      	cmp	r3, #0
 800975e:	d153      	bne.n	8009808 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d106      	bne.n	8009774 <tcp_timewait_input+0x28>
 8009766:	4b2c      	ldr	r3, [pc, #176]	; (8009818 <tcp_timewait_input+0xcc>)
 8009768:	f240 22ee 	movw	r2, #750	; 0x2ee
 800976c:	492b      	ldr	r1, [pc, #172]	; (800981c <tcp_timewait_input+0xd0>)
 800976e:	482c      	ldr	r0, [pc, #176]	; (8009820 <tcp_timewait_input+0xd4>)
 8009770:	f006 fae0 	bl	800fd34 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009774:	4b27      	ldr	r3, [pc, #156]	; (8009814 <tcp_timewait_input+0xc8>)
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	f003 0302 	and.w	r3, r3, #2
 800977c:	2b00      	cmp	r3, #0
 800977e:	d02a      	beq.n	80097d6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009780:	4b28      	ldr	r3, [pc, #160]	; (8009824 <tcp_timewait_input+0xd8>)
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	2b00      	cmp	r3, #0
 800978c:	db2d      	blt.n	80097ea <tcp_timewait_input+0x9e>
 800978e:	4b25      	ldr	r3, [pc, #148]	; (8009824 <tcp_timewait_input+0xd8>)
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009796:	6879      	ldr	r1, [r7, #4]
 8009798:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800979a:	440b      	add	r3, r1
 800979c:	1ad3      	subs	r3, r2, r3
 800979e:	2b00      	cmp	r3, #0
 80097a0:	dc23      	bgt.n	80097ea <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80097a2:	4b21      	ldr	r3, [pc, #132]	; (8009828 <tcp_timewait_input+0xdc>)
 80097a4:	6819      	ldr	r1, [r3, #0]
 80097a6:	4b21      	ldr	r3, [pc, #132]	; (800982c <tcp_timewait_input+0xe0>)
 80097a8:	881b      	ldrh	r3, [r3, #0]
 80097aa:	461a      	mov	r2, r3
 80097ac:	4b1d      	ldr	r3, [pc, #116]	; (8009824 <tcp_timewait_input+0xd8>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80097b2:	4b1f      	ldr	r3, [pc, #124]	; (8009830 <tcp_timewait_input+0xe4>)
 80097b4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80097b6:	885b      	ldrh	r3, [r3, #2]
 80097b8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80097ba:	4a1d      	ldr	r2, [pc, #116]	; (8009830 <tcp_timewait_input+0xe4>)
 80097bc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80097be:	8812      	ldrh	r2, [r2, #0]
 80097c0:	b292      	uxth	r2, r2
 80097c2:	9202      	str	r2, [sp, #8]
 80097c4:	9301      	str	r3, [sp, #4]
 80097c6:	4b1b      	ldr	r3, [pc, #108]	; (8009834 <tcp_timewait_input+0xe8>)
 80097c8:	9300      	str	r3, [sp, #0]
 80097ca:	4b1b      	ldr	r3, [pc, #108]	; (8009838 <tcp_timewait_input+0xec>)
 80097cc:	4602      	mov	r2, r0
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f003 fac8 	bl	800cd64 <tcp_rst>
      return;
 80097d4:	e01b      	b.n	800980e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80097d6:	4b0f      	ldr	r3, [pc, #60]	; (8009814 <tcp_timewait_input+0xc8>)
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	f003 0301 	and.w	r3, r3, #1
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d003      	beq.n	80097ea <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80097e2:	4b16      	ldr	r3, [pc, #88]	; (800983c <tcp_timewait_input+0xf0>)
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80097ea:	4b10      	ldr	r3, [pc, #64]	; (800982c <tcp_timewait_input+0xe0>)
 80097ec:	881b      	ldrh	r3, [r3, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00c      	beq.n	800980c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	8b5b      	ldrh	r3, [r3, #26]
 80097f6:	f043 0302 	orr.w	r3, r3, #2
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f002 fcfb 	bl	800c1fc <tcp_output>
  }
  return;
 8009806:	e001      	b.n	800980c <tcp_timewait_input+0xc0>
    return;
 8009808:	bf00      	nop
 800980a:	e000      	b.n	800980e <tcp_timewait_input+0xc2>
  return;
 800980c:	bf00      	nop
}
 800980e:	3708      	adds	r7, #8
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	2000010c 	.word	0x2000010c
 8009818:	08012438 	.word	0x08012438
 800981c:	08012650 	.word	0x08012650
 8009820:	08012484 	.word	0x08012484
 8009824:	20000100 	.word	0x20000100
 8009828:	20000104 	.word	0x20000104
 800982c:	2000010a 	.word	0x2000010a
 8009830:	200000f0 	.word	0x200000f0
 8009834:	200034f8 	.word	0x200034f8
 8009838:	200034fc 	.word	0x200034fc
 800983c:	20006a30 	.word	0x20006a30

08009840 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009840:	b590      	push	{r4, r7, lr}
 8009842:	b08d      	sub	sp, #52	; 0x34
 8009844:	af04      	add	r7, sp, #16
 8009846:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009848:	2300      	movs	r3, #0
 800984a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800984c:	2300      	movs	r3, #0
 800984e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d106      	bne.n	8009864 <tcp_process+0x24>
 8009856:	4ba5      	ldr	r3, [pc, #660]	; (8009aec <tcp_process+0x2ac>)
 8009858:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800985c:	49a4      	ldr	r1, [pc, #656]	; (8009af0 <tcp_process+0x2b0>)
 800985e:	48a5      	ldr	r0, [pc, #660]	; (8009af4 <tcp_process+0x2b4>)
 8009860:	f006 fa68 	bl	800fd34 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009864:	4ba4      	ldr	r3, [pc, #656]	; (8009af8 <tcp_process+0x2b8>)
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	f003 0304 	and.w	r3, r3, #4
 800986c:	2b00      	cmp	r3, #0
 800986e:	d04e      	beq.n	800990e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	7d1b      	ldrb	r3, [r3, #20]
 8009874:	2b02      	cmp	r3, #2
 8009876:	d108      	bne.n	800988a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800987c:	4b9f      	ldr	r3, [pc, #636]	; (8009afc <tcp_process+0x2bc>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	429a      	cmp	r2, r3
 8009882:	d123      	bne.n	80098cc <tcp_process+0x8c>
        acceptable = 1;
 8009884:	2301      	movs	r3, #1
 8009886:	76fb      	strb	r3, [r7, #27]
 8009888:	e020      	b.n	80098cc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800988e:	4b9c      	ldr	r3, [pc, #624]	; (8009b00 <tcp_process+0x2c0>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	429a      	cmp	r2, r3
 8009894:	d102      	bne.n	800989c <tcp_process+0x5c>
        acceptable = 1;
 8009896:	2301      	movs	r3, #1
 8009898:	76fb      	strb	r3, [r7, #27]
 800989a:	e017      	b.n	80098cc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800989c:	4b98      	ldr	r3, [pc, #608]	; (8009b00 <tcp_process+0x2c0>)
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a4:	1ad3      	subs	r3, r2, r3
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	db10      	blt.n	80098cc <tcp_process+0x8c>
 80098aa:	4b95      	ldr	r3, [pc, #596]	; (8009b00 <tcp_process+0x2c0>)
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b2:	6879      	ldr	r1, [r7, #4]
 80098b4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80098b6:	440b      	add	r3, r1
 80098b8:	1ad3      	subs	r3, r2, r3
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	dc06      	bgt.n	80098cc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	8b5b      	ldrh	r3, [r3, #26]
 80098c2:	f043 0302 	orr.w	r3, r3, #2
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80098cc:	7efb      	ldrb	r3, [r7, #27]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d01b      	beq.n	800990a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	7d1b      	ldrb	r3, [r3, #20]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d106      	bne.n	80098e8 <tcp_process+0xa8>
 80098da:	4b84      	ldr	r3, [pc, #528]	; (8009aec <tcp_process+0x2ac>)
 80098dc:	f44f 724e 	mov.w	r2, #824	; 0x338
 80098e0:	4988      	ldr	r1, [pc, #544]	; (8009b04 <tcp_process+0x2c4>)
 80098e2:	4884      	ldr	r0, [pc, #528]	; (8009af4 <tcp_process+0x2b4>)
 80098e4:	f006 fa26 	bl	800fd34 <iprintf>
      recv_flags |= TF_RESET;
 80098e8:	4b87      	ldr	r3, [pc, #540]	; (8009b08 <tcp_process+0x2c8>)
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	f043 0308 	orr.w	r3, r3, #8
 80098f0:	b2da      	uxtb	r2, r3
 80098f2:	4b85      	ldr	r3, [pc, #532]	; (8009b08 <tcp_process+0x2c8>)
 80098f4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	8b5b      	ldrh	r3, [r3, #26]
 80098fa:	f023 0301 	bic.w	r3, r3, #1
 80098fe:	b29a      	uxth	r2, r3
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009904:	f06f 030d 	mvn.w	r3, #13
 8009908:	e37a      	b.n	800a000 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800990a:	2300      	movs	r3, #0
 800990c:	e378      	b.n	800a000 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800990e:	4b7a      	ldr	r3, [pc, #488]	; (8009af8 <tcp_process+0x2b8>)
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	f003 0302 	and.w	r3, r3, #2
 8009916:	2b00      	cmp	r3, #0
 8009918:	d010      	beq.n	800993c <tcp_process+0xfc>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	7d1b      	ldrb	r3, [r3, #20]
 800991e:	2b02      	cmp	r3, #2
 8009920:	d00c      	beq.n	800993c <tcp_process+0xfc>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	7d1b      	ldrb	r3, [r3, #20]
 8009926:	2b03      	cmp	r3, #3
 8009928:	d008      	beq.n	800993c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	8b5b      	ldrh	r3, [r3, #26]
 800992e:	f043 0302 	orr.w	r3, r3, #2
 8009932:	b29a      	uxth	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009938:	2300      	movs	r3, #0
 800993a:	e361      	b.n	800a000 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	8b5b      	ldrh	r3, [r3, #26]
 8009940:	f003 0310 	and.w	r3, r3, #16
 8009944:	2b00      	cmp	r3, #0
 8009946:	d103      	bne.n	8009950 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009948:	4b70      	ldr	r3, [pc, #448]	; (8009b0c <tcp_process+0x2cc>)
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f001 fc2d 	bl	800b1c0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	7d1b      	ldrb	r3, [r3, #20]
 800996a:	3b02      	subs	r3, #2
 800996c:	2b07      	cmp	r3, #7
 800996e:	f200 8337 	bhi.w	8009fe0 <tcp_process+0x7a0>
 8009972:	a201      	add	r2, pc, #4	; (adr r2, 8009978 <tcp_process+0x138>)
 8009974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009978:	08009999 	.word	0x08009999
 800997c:	08009bc9 	.word	0x08009bc9
 8009980:	08009d41 	.word	0x08009d41
 8009984:	08009d6b 	.word	0x08009d6b
 8009988:	08009e8f 	.word	0x08009e8f
 800998c:	08009d41 	.word	0x08009d41
 8009990:	08009f1b 	.word	0x08009f1b
 8009994:	08009fab 	.word	0x08009fab
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009998:	4b57      	ldr	r3, [pc, #348]	; (8009af8 <tcp_process+0x2b8>)
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	f003 0310 	and.w	r3, r3, #16
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f000 80e4 	beq.w	8009b6e <tcp_process+0x32e>
 80099a6:	4b54      	ldr	r3, [pc, #336]	; (8009af8 <tcp_process+0x2b8>)
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	f003 0302 	and.w	r3, r3, #2
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	f000 80dd 	beq.w	8009b6e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099b8:	1c5a      	adds	r2, r3, #1
 80099ba:	4b50      	ldr	r3, [pc, #320]	; (8009afc <tcp_process+0x2bc>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	429a      	cmp	r2, r3
 80099c0:	f040 80d5 	bne.w	8009b6e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80099c4:	4b4e      	ldr	r3, [pc, #312]	; (8009b00 <tcp_process+0x2c0>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	1c5a      	adds	r2, r3, #1
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80099d6:	4b49      	ldr	r3, [pc, #292]	; (8009afc <tcp_process+0x2bc>)
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80099de:	4b4c      	ldr	r3, [pc, #304]	; (8009b10 <tcp_process+0x2d0>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	89db      	ldrh	r3, [r3, #14]
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80099f8:	4b41      	ldr	r3, [pc, #260]	; (8009b00 <tcp_process+0x2c0>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	1e5a      	subs	r2, r3, #1
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2204      	movs	r2, #4
 8009a06:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	3304      	adds	r3, #4
 8009a10:	4618      	mov	r0, r3
 8009a12:	f004 ff47 	bl	800e8a4 <ip4_route>
 8009a16:	4601      	mov	r1, r0
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	3304      	adds	r3, #4
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	4620      	mov	r0, r4
 8009a20:	f7ff f88e 	bl	8008b40 <tcp_eff_send_mss_netif>
 8009a24:	4603      	mov	r3, r0
 8009a26:	461a      	mov	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a30:	009a      	lsls	r2, r3, #2
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a36:	005b      	lsls	r3, r3, #1
 8009a38:	f241 111c 	movw	r1, #4380	; 0x111c
 8009a3c:	428b      	cmp	r3, r1
 8009a3e:	bf38      	it	cc
 8009a40:	460b      	movcc	r3, r1
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d204      	bcs.n	8009a50 <tcp_process+0x210>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	e00d      	b.n	8009a6c <tcp_process+0x22c>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a54:	005b      	lsls	r3, r3, #1
 8009a56:	f241 121c 	movw	r2, #4380	; 0x111c
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d904      	bls.n	8009a68 <tcp_process+0x228>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a62:	005b      	lsls	r3, r3, #1
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	e001      	b.n	8009a6c <tcp_process+0x22c>
 8009a68:	f241 131c 	movw	r3, #4380	; 0x111c
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d106      	bne.n	8009a8a <tcp_process+0x24a>
 8009a7c:	4b1b      	ldr	r3, [pc, #108]	; (8009aec <tcp_process+0x2ac>)
 8009a7e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8009a82:	4924      	ldr	r1, [pc, #144]	; (8009b14 <tcp_process+0x2d4>)
 8009a84:	481b      	ldr	r0, [pc, #108]	; (8009af4 <tcp_process+0x2b4>)
 8009a86:	f006 f955 	bl	800fd34 <iprintf>
        --pcb->snd_queuelen;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009a90:	3b01      	subs	r3, #1
 8009a92:	b29a      	uxth	r2, r3
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a9e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d111      	bne.n	8009aca <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009aaa:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d106      	bne.n	8009ac0 <tcp_process+0x280>
 8009ab2:	4b0e      	ldr	r3, [pc, #56]	; (8009aec <tcp_process+0x2ac>)
 8009ab4:	f44f 725d 	mov.w	r2, #884	; 0x374
 8009ab8:	4917      	ldr	r1, [pc, #92]	; (8009b18 <tcp_process+0x2d8>)
 8009aba:	480e      	ldr	r0, [pc, #56]	; (8009af4 <tcp_process+0x2b4>)
 8009abc:	f006 f93a 	bl	800fd34 <iprintf>
          pcb->unsent = rseg->next;
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	66da      	str	r2, [r3, #108]	; 0x6c
 8009ac8:	e003      	b.n	8009ad2 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8009ad2:	69f8      	ldr	r0, [r7, #28]
 8009ad4:	f7fe fc57 	bl	8008386 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d11d      	bne.n	8009b1c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ae6:	861a      	strh	r2, [r3, #48]	; 0x30
 8009ae8:	e01f      	b.n	8009b2a <tcp_process+0x2ea>
 8009aea:	bf00      	nop
 8009aec:	08012438 	.word	0x08012438
 8009af0:	08012670 	.word	0x08012670
 8009af4:	08012484 	.word	0x08012484
 8009af8:	2000010c 	.word	0x2000010c
 8009afc:	20000104 	.word	0x20000104
 8009b00:	20000100 	.word	0x20000100
 8009b04:	0801268c 	.word	0x0801268c
 8009b08:	2000010d 	.word	0x2000010d
 8009b0c:	20006a30 	.word	0x20006a30
 8009b10:	200000f0 	.word	0x200000f0
 8009b14:	080126ac 	.word	0x080126ac
 8009b18:	080126c4 	.word	0x080126c4
        } else {
          pcb->rtime = 0;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00a      	beq.n	8009b4a <tcp_process+0x30a>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	6910      	ldr	r0, [r2, #16]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	6879      	ldr	r1, [r7, #4]
 8009b42:	4798      	blx	r3
 8009b44:	4603      	mov	r3, r0
 8009b46:	76bb      	strb	r3, [r7, #26]
 8009b48:	e001      	b.n	8009b4e <tcp_process+0x30e>
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009b4e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009b52:	f113 0f0d 	cmn.w	r3, #13
 8009b56:	d102      	bne.n	8009b5e <tcp_process+0x31e>
          return ERR_ABRT;
 8009b58:	f06f 030c 	mvn.w	r3, #12
 8009b5c:	e250      	b.n	800a000 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	8b5b      	ldrh	r3, [r3, #26]
 8009b62:	f043 0302 	orr.w	r3, r3, #2
 8009b66:	b29a      	uxth	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009b6c:	e23a      	b.n	8009fe4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009b6e:	4b9d      	ldr	r3, [pc, #628]	; (8009de4 <tcp_process+0x5a4>)
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	f003 0310 	and.w	r3, r3, #16
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f000 8234 	beq.w	8009fe4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b7c:	4b9a      	ldr	r3, [pc, #616]	; (8009de8 <tcp_process+0x5a8>)
 8009b7e:	6819      	ldr	r1, [r3, #0]
 8009b80:	4b9a      	ldr	r3, [pc, #616]	; (8009dec <tcp_process+0x5ac>)
 8009b82:	881b      	ldrh	r3, [r3, #0]
 8009b84:	461a      	mov	r2, r3
 8009b86:	4b9a      	ldr	r3, [pc, #616]	; (8009df0 <tcp_process+0x5b0>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009b8c:	4b99      	ldr	r3, [pc, #612]	; (8009df4 <tcp_process+0x5b4>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b90:	885b      	ldrh	r3, [r3, #2]
 8009b92:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009b94:	4a97      	ldr	r2, [pc, #604]	; (8009df4 <tcp_process+0x5b4>)
 8009b96:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b98:	8812      	ldrh	r2, [r2, #0]
 8009b9a:	b292      	uxth	r2, r2
 8009b9c:	9202      	str	r2, [sp, #8]
 8009b9e:	9301      	str	r3, [sp, #4]
 8009ba0:	4b95      	ldr	r3, [pc, #596]	; (8009df8 <tcp_process+0x5b8>)
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	4b95      	ldr	r3, [pc, #596]	; (8009dfc <tcp_process+0x5bc>)
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f003 f8db 	bl	800cd64 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009bb4:	2b05      	cmp	r3, #5
 8009bb6:	f200 8215 	bhi.w	8009fe4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f002 fea5 	bl	800c910 <tcp_rexmit_rto>
      break;
 8009bc6:	e20d      	b.n	8009fe4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009bc8:	4b86      	ldr	r3, [pc, #536]	; (8009de4 <tcp_process+0x5a4>)
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	f003 0310 	and.w	r3, r3, #16
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	f000 80a1 	beq.w	8009d18 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009bd6:	4b84      	ldr	r3, [pc, #528]	; (8009de8 <tcp_process+0x5a8>)
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bde:	1ad3      	subs	r3, r2, r3
 8009be0:	3b01      	subs	r3, #1
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	db7e      	blt.n	8009ce4 <tcp_process+0x4a4>
 8009be6:	4b80      	ldr	r3, [pc, #512]	; (8009de8 <tcp_process+0x5a8>)
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bee:	1ad3      	subs	r3, r2, r3
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	dc77      	bgt.n	8009ce4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2204      	movs	r2, #4
 8009bf8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d102      	bne.n	8009c08 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8009c02:	23fa      	movs	r3, #250	; 0xfa
 8009c04:	76bb      	strb	r3, [r7, #26]
 8009c06:	e01d      	b.n	8009c44 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c0c:	699b      	ldr	r3, [r3, #24]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d106      	bne.n	8009c20 <tcp_process+0x3e0>
 8009c12:	4b7b      	ldr	r3, [pc, #492]	; (8009e00 <tcp_process+0x5c0>)
 8009c14:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009c18:	497a      	ldr	r1, [pc, #488]	; (8009e04 <tcp_process+0x5c4>)
 8009c1a:	487b      	ldr	r0, [pc, #492]	; (8009e08 <tcp_process+0x5c8>)
 8009c1c:	f006 f88a 	bl	800fd34 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00a      	beq.n	8009c40 <tcp_process+0x400>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	6910      	ldr	r0, [r2, #16]
 8009c34:	2200      	movs	r2, #0
 8009c36:	6879      	ldr	r1, [r7, #4]
 8009c38:	4798      	blx	r3
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	76bb      	strb	r3, [r7, #26]
 8009c3e:	e001      	b.n	8009c44 <tcp_process+0x404>
 8009c40:	23f0      	movs	r3, #240	; 0xf0
 8009c42:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009c44:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d00a      	beq.n	8009c62 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009c4c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009c50:	f113 0f0d 	cmn.w	r3, #13
 8009c54:	d002      	beq.n	8009c5c <tcp_process+0x41c>
              tcp_abort(pcb);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f7fd fcf0 	bl	800763c <tcp_abort>
            }
            return ERR_ABRT;
 8009c5c:	f06f 030c 	mvn.w	r3, #12
 8009c60:	e1ce      	b.n	800a000 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fae0 	bl	800a228 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009c68:	4b68      	ldr	r3, [pc, #416]	; (8009e0c <tcp_process+0x5cc>)
 8009c6a:	881b      	ldrh	r3, [r3, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d005      	beq.n	8009c7c <tcp_process+0x43c>
            recv_acked--;
 8009c70:	4b66      	ldr	r3, [pc, #408]	; (8009e0c <tcp_process+0x5cc>)
 8009c72:	881b      	ldrh	r3, [r3, #0]
 8009c74:	3b01      	subs	r3, #1
 8009c76:	b29a      	uxth	r2, r3
 8009c78:	4b64      	ldr	r3, [pc, #400]	; (8009e0c <tcp_process+0x5cc>)
 8009c7a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c80:	009a      	lsls	r2, r3, #2
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c86:	005b      	lsls	r3, r3, #1
 8009c88:	f241 111c 	movw	r1, #4380	; 0x111c
 8009c8c:	428b      	cmp	r3, r1
 8009c8e:	bf38      	it	cc
 8009c90:	460b      	movcc	r3, r1
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d204      	bcs.n	8009ca0 <tcp_process+0x460>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	e00d      	b.n	8009cbc <tcp_process+0x47c>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009ca4:	005b      	lsls	r3, r3, #1
 8009ca6:	f241 121c 	movw	r2, #4380	; 0x111c
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d904      	bls.n	8009cb8 <tcp_process+0x478>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009cb2:	005b      	lsls	r3, r3, #1
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	e001      	b.n	8009cbc <tcp_process+0x47c>
 8009cb8:	f241 131c 	movw	r3, #4380	; 0x111c
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009cc2:	4b53      	ldr	r3, [pc, #332]	; (8009e10 <tcp_process+0x5d0>)
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	f003 0320 	and.w	r3, r3, #32
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d037      	beq.n	8009d3e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	8b5b      	ldrh	r3, [r3, #26]
 8009cd2:	f043 0302 	orr.w	r3, r3, #2
 8009cd6:	b29a      	uxth	r2, r3
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2207      	movs	r2, #7
 8009ce0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009ce2:	e02c      	b.n	8009d3e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009ce4:	4b40      	ldr	r3, [pc, #256]	; (8009de8 <tcp_process+0x5a8>)
 8009ce6:	6819      	ldr	r1, [r3, #0]
 8009ce8:	4b40      	ldr	r3, [pc, #256]	; (8009dec <tcp_process+0x5ac>)
 8009cea:	881b      	ldrh	r3, [r3, #0]
 8009cec:	461a      	mov	r2, r3
 8009cee:	4b40      	ldr	r3, [pc, #256]	; (8009df0 <tcp_process+0x5b0>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009cf4:	4b3f      	ldr	r3, [pc, #252]	; (8009df4 <tcp_process+0x5b4>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009cf8:	885b      	ldrh	r3, [r3, #2]
 8009cfa:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009cfc:	4a3d      	ldr	r2, [pc, #244]	; (8009df4 <tcp_process+0x5b4>)
 8009cfe:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009d00:	8812      	ldrh	r2, [r2, #0]
 8009d02:	b292      	uxth	r2, r2
 8009d04:	9202      	str	r2, [sp, #8]
 8009d06:	9301      	str	r3, [sp, #4]
 8009d08:	4b3b      	ldr	r3, [pc, #236]	; (8009df8 <tcp_process+0x5b8>)
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	4b3b      	ldr	r3, [pc, #236]	; (8009dfc <tcp_process+0x5bc>)
 8009d0e:	4602      	mov	r2, r0
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f003 f827 	bl	800cd64 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009d16:	e167      	b.n	8009fe8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009d18:	4b32      	ldr	r3, [pc, #200]	; (8009de4 <tcp_process+0x5a4>)
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	f003 0302 	and.w	r3, r3, #2
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f000 8161 	beq.w	8009fe8 <tcp_process+0x7a8>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2a:	1e5a      	subs	r2, r3, #1
 8009d2c:	4b30      	ldr	r3, [pc, #192]	; (8009df0 <tcp_process+0x5b0>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	f040 8159 	bne.w	8009fe8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f002 fe0c 	bl	800c954 <tcp_rexmit>
      break;
 8009d3c:	e154      	b.n	8009fe8 <tcp_process+0x7a8>
 8009d3e:	e153      	b.n	8009fe8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 fa71 	bl	800a228 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009d46:	4b32      	ldr	r3, [pc, #200]	; (8009e10 <tcp_process+0x5d0>)
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	f003 0320 	and.w	r3, r3, #32
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	f000 814c 	beq.w	8009fec <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	8b5b      	ldrh	r3, [r3, #26]
 8009d58:	f043 0302 	orr.w	r3, r3, #2
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2207      	movs	r2, #7
 8009d66:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009d68:	e140      	b.n	8009fec <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fa5c 	bl	800a228 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009d70:	4b27      	ldr	r3, [pc, #156]	; (8009e10 <tcp_process+0x5d0>)
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	f003 0320 	and.w	r3, r3, #32
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d071      	beq.n	8009e60 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009d7c:	4b19      	ldr	r3, [pc, #100]	; (8009de4 <tcp_process+0x5a4>)
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	f003 0310 	and.w	r3, r3, #16
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d060      	beq.n	8009e4a <tcp_process+0x60a>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009d8c:	4b16      	ldr	r3, [pc, #88]	; (8009de8 <tcp_process+0x5a8>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d15a      	bne.n	8009e4a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d156      	bne.n	8009e4a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	8b5b      	ldrh	r3, [r3, #26]
 8009da0:	f043 0302 	orr.w	r3, r3, #2
 8009da4:	b29a      	uxth	r2, r3
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f7fe fdbe 	bl	800892c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009db0:	4b18      	ldr	r3, [pc, #96]	; (8009e14 <tcp_process+0x5d4>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d105      	bne.n	8009dc6 <tcp_process+0x586>
 8009dba:	4b16      	ldr	r3, [pc, #88]	; (8009e14 <tcp_process+0x5d4>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	4a14      	ldr	r2, [pc, #80]	; (8009e14 <tcp_process+0x5d4>)
 8009dc2:	6013      	str	r3, [r2, #0]
 8009dc4:	e02e      	b.n	8009e24 <tcp_process+0x5e4>
 8009dc6:	4b13      	ldr	r3, [pc, #76]	; (8009e14 <tcp_process+0x5d4>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	617b      	str	r3, [r7, #20]
 8009dcc:	e027      	b.n	8009e1e <tcp_process+0x5de>
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d11f      	bne.n	8009e18 <tcp_process+0x5d8>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	68da      	ldr	r2, [r3, #12]
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	60da      	str	r2, [r3, #12]
 8009de0:	e020      	b.n	8009e24 <tcp_process+0x5e4>
 8009de2:	bf00      	nop
 8009de4:	2000010c 	.word	0x2000010c
 8009de8:	20000104 	.word	0x20000104
 8009dec:	2000010a 	.word	0x2000010a
 8009df0:	20000100 	.word	0x20000100
 8009df4:	200000f0 	.word	0x200000f0
 8009df8:	200034f8 	.word	0x200034f8
 8009dfc:	200034fc 	.word	0x200034fc
 8009e00:	08012438 	.word	0x08012438
 8009e04:	080126d8 	.word	0x080126d8
 8009e08:	08012484 	.word	0x08012484
 8009e0c:	20000108 	.word	0x20000108
 8009e10:	2000010d 	.word	0x2000010d
 8009e14:	20006a2c 	.word	0x20006a2c
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	617b      	str	r3, [r7, #20]
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d1d4      	bne.n	8009dce <tcp_process+0x58e>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	60da      	str	r2, [r3, #12]
 8009e2a:	4b77      	ldr	r3, [pc, #476]	; (800a008 <tcp_process+0x7c8>)
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	220a      	movs	r2, #10
 8009e34:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009e36:	4b75      	ldr	r3, [pc, #468]	; (800a00c <tcp_process+0x7cc>)
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	60da      	str	r2, [r3, #12]
 8009e3e:	4a73      	ldr	r2, [pc, #460]	; (800a00c <tcp_process+0x7cc>)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6013      	str	r3, [r2, #0]
 8009e44:	f003 f950 	bl	800d0e8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009e48:	e0d2      	b.n	8009ff0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	8b5b      	ldrh	r3, [r3, #26]
 8009e4e:	f043 0302 	orr.w	r3, r3, #2
 8009e52:	b29a      	uxth	r2, r3
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2208      	movs	r2, #8
 8009e5c:	751a      	strb	r2, [r3, #20]
      break;
 8009e5e:	e0c7      	b.n	8009ff0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009e60:	4b6b      	ldr	r3, [pc, #428]	; (800a010 <tcp_process+0x7d0>)
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	f003 0310 	and.w	r3, r3, #16
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	f000 80c1 	beq.w	8009ff0 <tcp_process+0x7b0>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e72:	4b68      	ldr	r3, [pc, #416]	; (800a014 <tcp_process+0x7d4>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	f040 80ba 	bne.w	8009ff0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f040 80b5 	bne.w	8009ff0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2206      	movs	r2, #6
 8009e8a:	751a      	strb	r2, [r3, #20]
      break;
 8009e8c:	e0b0      	b.n	8009ff0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f9ca 	bl	800a228 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009e94:	4b60      	ldr	r3, [pc, #384]	; (800a018 <tcp_process+0x7d8>)
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	f003 0320 	and.w	r3, r3, #32
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f000 80a9 	beq.w	8009ff4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	8b5b      	ldrh	r3, [r3, #26]
 8009ea6:	f043 0302 	orr.w	r3, r3, #2
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f7fe fd3b 	bl	800892c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009eb6:	4b59      	ldr	r3, [pc, #356]	; (800a01c <tcp_process+0x7dc>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d105      	bne.n	8009ecc <tcp_process+0x68c>
 8009ec0:	4b56      	ldr	r3, [pc, #344]	; (800a01c <tcp_process+0x7dc>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	4a55      	ldr	r2, [pc, #340]	; (800a01c <tcp_process+0x7dc>)
 8009ec8:	6013      	str	r3, [r2, #0]
 8009eca:	e013      	b.n	8009ef4 <tcp_process+0x6b4>
 8009ecc:	4b53      	ldr	r3, [pc, #332]	; (800a01c <tcp_process+0x7dc>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	613b      	str	r3, [r7, #16]
 8009ed2:	e00c      	b.n	8009eee <tcp_process+0x6ae>
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d104      	bne.n	8009ee8 <tcp_process+0x6a8>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	68da      	ldr	r2, [r3, #12]
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	60da      	str	r2, [r3, #12]
 8009ee6:	e005      	b.n	8009ef4 <tcp_process+0x6b4>
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	613b      	str	r3, [r7, #16]
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d1ef      	bne.n	8009ed4 <tcp_process+0x694>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	60da      	str	r2, [r3, #12]
 8009efa:	4b43      	ldr	r3, [pc, #268]	; (800a008 <tcp_process+0x7c8>)
 8009efc:	2201      	movs	r2, #1
 8009efe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	220a      	movs	r2, #10
 8009f04:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009f06:	4b41      	ldr	r3, [pc, #260]	; (800a00c <tcp_process+0x7cc>)
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	60da      	str	r2, [r3, #12]
 8009f0e:	4a3f      	ldr	r2, [pc, #252]	; (800a00c <tcp_process+0x7cc>)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6013      	str	r3, [r2, #0]
 8009f14:	f003 f8e8 	bl	800d0e8 <tcp_timer_needed>
      }
      break;
 8009f18:	e06c      	b.n	8009ff4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 f984 	bl	800a228 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009f20:	4b3b      	ldr	r3, [pc, #236]	; (800a010 <tcp_process+0x7d0>)
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	f003 0310 	and.w	r3, r3, #16
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d065      	beq.n	8009ff8 <tcp_process+0x7b8>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f30:	4b38      	ldr	r3, [pc, #224]	; (800a014 <tcp_process+0x7d4>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d15f      	bne.n	8009ff8 <tcp_process+0x7b8>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d15b      	bne.n	8009ff8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f7fe fcf3 	bl	800892c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009f46:	4b35      	ldr	r3, [pc, #212]	; (800a01c <tcp_process+0x7dc>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d105      	bne.n	8009f5c <tcp_process+0x71c>
 8009f50:	4b32      	ldr	r3, [pc, #200]	; (800a01c <tcp_process+0x7dc>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	4a31      	ldr	r2, [pc, #196]	; (800a01c <tcp_process+0x7dc>)
 8009f58:	6013      	str	r3, [r2, #0]
 8009f5a:	e013      	b.n	8009f84 <tcp_process+0x744>
 8009f5c:	4b2f      	ldr	r3, [pc, #188]	; (800a01c <tcp_process+0x7dc>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	60fb      	str	r3, [r7, #12]
 8009f62:	e00c      	b.n	8009f7e <tcp_process+0x73e>
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	68db      	ldr	r3, [r3, #12]
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d104      	bne.n	8009f78 <tcp_process+0x738>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	68da      	ldr	r2, [r3, #12]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	60da      	str	r2, [r3, #12]
 8009f76:	e005      	b.n	8009f84 <tcp_process+0x744>
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	60fb      	str	r3, [r7, #12]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d1ef      	bne.n	8009f64 <tcp_process+0x724>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	60da      	str	r2, [r3, #12]
 8009f8a:	4b1f      	ldr	r3, [pc, #124]	; (800a008 <tcp_process+0x7c8>)
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	220a      	movs	r2, #10
 8009f94:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009f96:	4b1d      	ldr	r3, [pc, #116]	; (800a00c <tcp_process+0x7cc>)
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	60da      	str	r2, [r3, #12]
 8009f9e:	4a1b      	ldr	r2, [pc, #108]	; (800a00c <tcp_process+0x7cc>)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6013      	str	r3, [r2, #0]
 8009fa4:	f003 f8a0 	bl	800d0e8 <tcp_timer_needed>
      }
      break;
 8009fa8:	e026      	b.n	8009ff8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 f93c 	bl	800a228 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009fb0:	4b17      	ldr	r3, [pc, #92]	; (800a010 <tcp_process+0x7d0>)
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	f003 0310 	and.w	r3, r3, #16
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d01f      	beq.n	8009ffc <tcp_process+0x7bc>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009fc0:	4b14      	ldr	r3, [pc, #80]	; (800a014 <tcp_process+0x7d4>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d119      	bne.n	8009ffc <tcp_process+0x7bc>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d115      	bne.n	8009ffc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009fd0:	4b11      	ldr	r3, [pc, #68]	; (800a018 <tcp_process+0x7d8>)
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	f043 0310 	orr.w	r3, r3, #16
 8009fd8:	b2da      	uxtb	r2, r3
 8009fda:	4b0f      	ldr	r3, [pc, #60]	; (800a018 <tcp_process+0x7d8>)
 8009fdc:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009fde:	e00d      	b.n	8009ffc <tcp_process+0x7bc>
    default:
      break;
 8009fe0:	bf00      	nop
 8009fe2:	e00c      	b.n	8009ffe <tcp_process+0x7be>
      break;
 8009fe4:	bf00      	nop
 8009fe6:	e00a      	b.n	8009ffe <tcp_process+0x7be>
      break;
 8009fe8:	bf00      	nop
 8009fea:	e008      	b.n	8009ffe <tcp_process+0x7be>
      break;
 8009fec:	bf00      	nop
 8009fee:	e006      	b.n	8009ffe <tcp_process+0x7be>
      break;
 8009ff0:	bf00      	nop
 8009ff2:	e004      	b.n	8009ffe <tcp_process+0x7be>
      break;
 8009ff4:	bf00      	nop
 8009ff6:	e002      	b.n	8009ffe <tcp_process+0x7be>
      break;
 8009ff8:	bf00      	nop
 8009ffa:	e000      	b.n	8009ffe <tcp_process+0x7be>
      break;
 8009ffc:	bf00      	nop
  }
  return ERR_OK;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	4618      	mov	r0, r3
 800a002:	3724      	adds	r7, #36	; 0x24
 800a004:	46bd      	mov	sp, r7
 800a006:	bd90      	pop	{r4, r7, pc}
 800a008:	20006a28 	.word	0x20006a28
 800a00c:	20006a3c 	.word	0x20006a3c
 800a010:	2000010c 	.word	0x2000010c
 800a014:	20000104 	.word	0x20000104
 800a018:	2000010d 	.word	0x2000010d
 800a01c:	20006a2c 	.word	0x20006a2c

0800a020 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a020:	b590      	push	{r4, r7, lr}
 800a022:	b085      	sub	sp, #20
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d106      	bne.n	800a03e <tcp_oos_insert_segment+0x1e>
 800a030:	4b3b      	ldr	r3, [pc, #236]	; (800a120 <tcp_oos_insert_segment+0x100>)
 800a032:	f240 421f 	movw	r2, #1055	; 0x41f
 800a036:	493b      	ldr	r1, [pc, #236]	; (800a124 <tcp_oos_insert_segment+0x104>)
 800a038:	483b      	ldr	r0, [pc, #236]	; (800a128 <tcp_oos_insert_segment+0x108>)
 800a03a:	f005 fe7b 	bl	800fd34 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	899b      	ldrh	r3, [r3, #12]
 800a044:	b29b      	uxth	r3, r3
 800a046:	4618      	mov	r0, r3
 800a048:	f7fb fa1a 	bl	8005480 <lwip_htons>
 800a04c:	4603      	mov	r3, r0
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	f003 0301 	and.w	r3, r3, #1
 800a054:	2b00      	cmp	r3, #0
 800a056:	d028      	beq.n	800a0aa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800a058:	6838      	ldr	r0, [r7, #0]
 800a05a:	f7fe f97f 	bl	800835c <tcp_segs_free>
    next = NULL;
 800a05e:	2300      	movs	r3, #0
 800a060:	603b      	str	r3, [r7, #0]
 800a062:	e056      	b.n	800a112 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	899b      	ldrh	r3, [r3, #12]
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7fb fa07 	bl	8005480 <lwip_htons>
 800a072:	4603      	mov	r3, r0
 800a074:	b2db      	uxtb	r3, r3
 800a076:	f003 0301 	and.w	r3, r3, #1
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00d      	beq.n	800a09a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	899b      	ldrh	r3, [r3, #12]
 800a084:	b29c      	uxth	r4, r3
 800a086:	2001      	movs	r0, #1
 800a088:	f7fb f9fa 	bl	8005480 <lwip_htons>
 800a08c:	4603      	mov	r3, r0
 800a08e:	461a      	mov	r2, r3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	4322      	orrs	r2, r4
 800a096:	b292      	uxth	r2, r2
 800a098:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a0a4:	68f8      	ldr	r0, [r7, #12]
 800a0a6:	f7fe f96e 	bl	8008386 <tcp_seg_free>
    while (next &&
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d00e      	beq.n	800a0ce <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	891b      	ldrh	r3, [r3, #8]
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	4b1d      	ldr	r3, [pc, #116]	; (800a12c <tcp_oos_insert_segment+0x10c>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	441a      	add	r2, r3
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	6839      	ldr	r1, [r7, #0]
 800a0c4:	8909      	ldrh	r1, [r1, #8]
 800a0c6:	440b      	add	r3, r1
 800a0c8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	daca      	bge.n	800a064 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d01e      	beq.n	800a112 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	891b      	ldrh	r3, [r3, #8]
 800a0d8:	461a      	mov	r2, r3
 800a0da:	4b14      	ldr	r3, [pc, #80]	; (800a12c <tcp_oos_insert_segment+0x10c>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	441a      	add	r2, r3
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	dd12      	ble.n	800a112 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	b29a      	uxth	r2, r3
 800a0f4:	4b0d      	ldr	r3, [pc, #52]	; (800a12c <tcp_oos_insert_segment+0x10c>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	1ad3      	subs	r3, r2, r3
 800a0fc:	b29a      	uxth	r2, r3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	685a      	ldr	r2, [r3, #4]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	891b      	ldrh	r3, [r3, #8]
 800a10a:	4619      	mov	r1, r3
 800a10c:	4610      	mov	r0, r2
 800a10e:	f7fc fae5 	bl	80066dc <pbuf_realloc>
    }
  }
  cseg->next = next;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	683a      	ldr	r2, [r7, #0]
 800a116:	601a      	str	r2, [r3, #0]
}
 800a118:	bf00      	nop
 800a11a:	3714      	adds	r7, #20
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd90      	pop	{r4, r7, pc}
 800a120:	08012438 	.word	0x08012438
 800a124:	080126f8 	.word	0x080126f8
 800a128:	08012484 	.word	0x08012484
 800a12c:	20000100 	.word	0x20000100

0800a130 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800a130:	b5b0      	push	{r4, r5, r7, lr}
 800a132:	b086      	sub	sp, #24
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	607a      	str	r2, [r7, #4]
 800a13c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800a13e:	e03e      	b.n	800a1be <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	4618      	mov	r0, r3
 800a150:	f7fc fcd2 	bl	8006af8 <pbuf_clen>
 800a154:	4603      	mov	r3, r0
 800a156:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a15e:	8a7a      	ldrh	r2, [r7, #18]
 800a160:	429a      	cmp	r2, r3
 800a162:	d906      	bls.n	800a172 <tcp_free_acked_segments+0x42>
 800a164:	4b2a      	ldr	r3, [pc, #168]	; (800a210 <tcp_free_acked_segments+0xe0>)
 800a166:	f240 4257 	movw	r2, #1111	; 0x457
 800a16a:	492a      	ldr	r1, [pc, #168]	; (800a214 <tcp_free_acked_segments+0xe4>)
 800a16c:	482a      	ldr	r0, [pc, #168]	; (800a218 <tcp_free_acked_segments+0xe8>)
 800a16e:	f005 fde1 	bl	800fd34 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800a178:	8a7b      	ldrh	r3, [r7, #18]
 800a17a:	1ad3      	subs	r3, r2, r3
 800a17c:	b29a      	uxth	r2, r3
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	891a      	ldrh	r2, [r3, #8]
 800a188:	4b24      	ldr	r3, [pc, #144]	; (800a21c <tcp_free_acked_segments+0xec>)
 800a18a:	881b      	ldrh	r3, [r3, #0]
 800a18c:	4413      	add	r3, r2
 800a18e:	b29a      	uxth	r2, r3
 800a190:	4b22      	ldr	r3, [pc, #136]	; (800a21c <tcp_free_acked_segments+0xec>)
 800a192:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800a194:	6978      	ldr	r0, [r7, #20]
 800a196:	f7fe f8f6 	bl	8008386 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d00c      	beq.n	800a1be <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d109      	bne.n	800a1be <tcp_free_acked_segments+0x8e>
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d106      	bne.n	800a1be <tcp_free_acked_segments+0x8e>
 800a1b0:	4b17      	ldr	r3, [pc, #92]	; (800a210 <tcp_free_acked_segments+0xe0>)
 800a1b2:	f240 4261 	movw	r2, #1121	; 0x461
 800a1b6:	491a      	ldr	r1, [pc, #104]	; (800a220 <tcp_free_acked_segments+0xf0>)
 800a1b8:	4817      	ldr	r0, [pc, #92]	; (800a218 <tcp_free_acked_segments+0xe8>)
 800a1ba:	f005 fdbb 	bl	800fd34 <iprintf>
  while (seg_list != NULL &&
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d020      	beq.n	800a206 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7fb f96d 	bl	80054aa <lwip_htonl>
 800a1d0:	4604      	mov	r4, r0
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	891b      	ldrh	r3, [r3, #8]
 800a1d6:	461d      	mov	r5, r3
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	899b      	ldrh	r3, [r3, #12]
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7fb f94d 	bl	8005480 <lwip_htons>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	f003 0303 	and.w	r3, r3, #3
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d001      	beq.n	800a1f6 <tcp_free_acked_segments+0xc6>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e000      	b.n	800a1f8 <tcp_free_acked_segments+0xc8>
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	442b      	add	r3, r5
 800a1fa:	18e2      	adds	r2, r4, r3
 800a1fc:	4b09      	ldr	r3, [pc, #36]	; (800a224 <tcp_free_acked_segments+0xf4>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800a202:	2b00      	cmp	r3, #0
 800a204:	dd9c      	ble.n	800a140 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800a206:	68bb      	ldr	r3, [r7, #8]
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3718      	adds	r7, #24
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bdb0      	pop	{r4, r5, r7, pc}
 800a210:	08012438 	.word	0x08012438
 800a214:	08012720 	.word	0x08012720
 800a218:	08012484 	.word	0x08012484
 800a21c:	20000108 	.word	0x20000108
 800a220:	08012748 	.word	0x08012748
 800a224:	20000104 	.word	0x20000104

0800a228 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a228:	b5b0      	push	{r4, r5, r7, lr}
 800a22a:	b094      	sub	sp, #80	; 0x50
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800a230:	2300      	movs	r3, #0
 800a232:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d106      	bne.n	800a248 <tcp_receive+0x20>
 800a23a:	4ba6      	ldr	r3, [pc, #664]	; (800a4d4 <tcp_receive+0x2ac>)
 800a23c:	f240 427b 	movw	r2, #1147	; 0x47b
 800a240:	49a5      	ldr	r1, [pc, #660]	; (800a4d8 <tcp_receive+0x2b0>)
 800a242:	48a6      	ldr	r0, [pc, #664]	; (800a4dc <tcp_receive+0x2b4>)
 800a244:	f005 fd76 	bl	800fd34 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	7d1b      	ldrb	r3, [r3, #20]
 800a24c:	2b03      	cmp	r3, #3
 800a24e:	d806      	bhi.n	800a25e <tcp_receive+0x36>
 800a250:	4ba0      	ldr	r3, [pc, #640]	; (800a4d4 <tcp_receive+0x2ac>)
 800a252:	f240 427c 	movw	r2, #1148	; 0x47c
 800a256:	49a2      	ldr	r1, [pc, #648]	; (800a4e0 <tcp_receive+0x2b8>)
 800a258:	48a0      	ldr	r0, [pc, #640]	; (800a4dc <tcp_receive+0x2b4>)
 800a25a:	f005 fd6b 	bl	800fd34 <iprintf>

  if (flags & TCP_ACK) {
 800a25e:	4ba1      	ldr	r3, [pc, #644]	; (800a4e4 <tcp_receive+0x2bc>)
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	f003 0310 	and.w	r3, r3, #16
 800a266:	2b00      	cmp	r3, #0
 800a268:	f000 8263 	beq.w	800a732 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a272:	461a      	mov	r2, r3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a278:	4413      	add	r3, r2
 800a27a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a280:	4b99      	ldr	r3, [pc, #612]	; (800a4e8 <tcp_receive+0x2c0>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	1ad3      	subs	r3, r2, r3
 800a286:	2b00      	cmp	r3, #0
 800a288:	db1b      	blt.n	800a2c2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a28e:	4b96      	ldr	r3, [pc, #600]	; (800a4e8 <tcp_receive+0x2c0>)
 800a290:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a292:	429a      	cmp	r2, r3
 800a294:	d106      	bne.n	800a2a4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a29a:	4b94      	ldr	r3, [pc, #592]	; (800a4ec <tcp_receive+0x2c4>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	1ad3      	subs	r3, r2, r3
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	db0e      	blt.n	800a2c2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a2a8:	4b90      	ldr	r3, [pc, #576]	; (800a4ec <tcp_receive+0x2c4>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d125      	bne.n	800a2fc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a2b0:	4b8f      	ldr	r3, [pc, #572]	; (800a4f0 <tcp_receive+0x2c8>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	89db      	ldrh	r3, [r3, #14]
 800a2b6:	b29a      	uxth	r2, r3
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d91c      	bls.n	800a2fc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a2c2:	4b8b      	ldr	r3, [pc, #556]	; (800a4f0 <tcp_receive+0x2c8>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	89db      	ldrh	r3, [r3, #14]
 800a2c8:	b29a      	uxth	r2, r3
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d205      	bcs.n	800a2ec <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800a2ec:	4b7e      	ldr	r3, [pc, #504]	; (800a4e8 <tcp_receive+0x2c0>)
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a2f4:	4b7d      	ldr	r3, [pc, #500]	; (800a4ec <tcp_receive+0x2c4>)
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a2fc:	4b7b      	ldr	r3, [pc, #492]	; (800a4ec <tcp_receive+0x2c4>)
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a304:	1ad3      	subs	r3, r2, r3
 800a306:	2b00      	cmp	r3, #0
 800a308:	dc58      	bgt.n	800a3bc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a30a:	4b7a      	ldr	r3, [pc, #488]	; (800a4f4 <tcp_receive+0x2cc>)
 800a30c:	881b      	ldrh	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d14b      	bne.n	800a3aa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800a31c:	4413      	add	r3, r2
 800a31e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a320:	429a      	cmp	r2, r3
 800a322:	d142      	bne.n	800a3aa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	db3d      	blt.n	800a3aa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a332:	4b6e      	ldr	r3, [pc, #440]	; (800a4ec <tcp_receive+0x2c4>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	429a      	cmp	r2, r3
 800a338:	d137      	bne.n	800a3aa <tcp_receive+0x182>
              found_dupack = 1;
 800a33a:	2301      	movs	r3, #1
 800a33c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a344:	2bff      	cmp	r3, #255	; 0xff
 800a346:	d007      	beq.n	800a358 <tcp_receive+0x130>
                ++pcb->dupacks;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a34e:	3301      	adds	r3, #1
 800a350:	b2da      	uxtb	r2, r3
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a35e:	2b03      	cmp	r3, #3
 800a360:	d91b      	bls.n	800a39a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a36c:	4413      	add	r3, r2
 800a36e:	b29a      	uxth	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a376:	429a      	cmp	r2, r3
 800a378:	d30a      	bcc.n	800a390 <tcp_receive+0x168>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a384:	4413      	add	r3, r2
 800a386:	b29a      	uxth	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a38e:	e004      	b.n	800a39a <tcp_receive+0x172>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a396:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a3a0:	2b02      	cmp	r3, #2
 800a3a2:	d902      	bls.n	800a3aa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f002 fb41 	bl	800ca2c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a3aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	f040 8160 	bne.w	800a672 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a3ba:	e15a      	b.n	800a672 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a3bc:	4b4b      	ldr	r3, [pc, #300]	; (800a4ec <tcp_receive+0x2c4>)
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3c4:	1ad3      	subs	r3, r2, r3
 800a3c6:	3b01      	subs	r3, #1
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f2c0 814d 	blt.w	800a668 <tcp_receive+0x440>
 800a3ce:	4b47      	ldr	r3, [pc, #284]	; (800a4ec <tcp_receive+0x2c4>)
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3d6:	1ad3      	subs	r3, r2, r3
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f300 8145 	bgt.w	800a668 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	8b5b      	ldrh	r3, [r3, #26]
 800a3e2:	f003 0304 	and.w	r3, r3, #4
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d010      	beq.n	800a40c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	8b5b      	ldrh	r3, [r3, #26]
 800a3ee:	f023 0304 	bic.w	r3, r3, #4
 800a3f2:	b29a      	uxth	r2, r3
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a41a:	10db      	asrs	r3, r3, #3
 800a41c:	b21b      	sxth	r3, r3
 800a41e:	b29a      	uxth	r2, r3
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a426:	b29b      	uxth	r3, r3
 800a428:	4413      	add	r3, r2
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	b21a      	sxth	r2, r3
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a434:	4b2d      	ldr	r3, [pc, #180]	; (800a4ec <tcp_receive+0x2c4>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	b29a      	uxth	r2, r3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a43e:	b29b      	uxth	r3, r3
 800a440:	1ad3      	subs	r3, r2, r3
 800a442:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a44c:	4b27      	ldr	r3, [pc, #156]	; (800a4ec <tcp_receive+0x2c4>)
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	7d1b      	ldrb	r3, [r3, #20]
 800a458:	2b03      	cmp	r3, #3
 800a45a:	f240 8096 	bls.w	800a58a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d244      	bcs.n	800a4f8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	8b5b      	ldrh	r3, [r3, #26]
 800a472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a476:	2b00      	cmp	r3, #0
 800a478:	d001      	beq.n	800a47e <tcp_receive+0x256>
 800a47a:	2301      	movs	r3, #1
 800a47c:	e000      	b.n	800a480 <tcp_receive+0x258>
 800a47e:	2302      	movs	r3, #2
 800a480:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a484:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a488:	b29a      	uxth	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a48e:	fb12 f303 	smulbb	r3, r2, r3
 800a492:	b29b      	uxth	r3, r3
 800a494:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a496:	4293      	cmp	r3, r2
 800a498:	bf28      	it	cs
 800a49a:	4613      	movcs	r3, r2
 800a49c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a4a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a4a6:	4413      	add	r3, r2
 800a4a8:	b29a      	uxth	r2, r3
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d309      	bcc.n	800a4c8 <tcp_receive+0x2a0>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a4ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a4bc:	4413      	add	r3, r2
 800a4be:	b29a      	uxth	r2, r3
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a4c6:	e060      	b.n	800a58a <tcp_receive+0x362>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a4ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a4d2:	e05a      	b.n	800a58a <tcp_receive+0x362>
 800a4d4:	08012438 	.word	0x08012438
 800a4d8:	08012768 	.word	0x08012768
 800a4dc:	08012484 	.word	0x08012484
 800a4e0:	08012784 	.word	0x08012784
 800a4e4:	2000010c 	.word	0x2000010c
 800a4e8:	20000100 	.word	0x20000100
 800a4ec:	20000104 	.word	0x20000104
 800a4f0:	200000f0 	.word	0x200000f0
 800a4f4:	2000010a 	.word	0x2000010a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a4fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a500:	4413      	add	r3, r2
 800a502:	b29a      	uxth	r2, r3
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d309      	bcc.n	800a522 <tcp_receive+0x2fa>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a514:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a516:	4413      	add	r3, r2
 800a518:	b29a      	uxth	r2, r3
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a520:	e004      	b.n	800a52c <tcp_receive+0x304>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a528:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a538:	429a      	cmp	r2, r3
 800a53a:	d326      	bcc.n	800a58a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a548:	1ad3      	subs	r3, r2, r3
 800a54a:	b29a      	uxth	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a55c:	4413      	add	r3, r2
 800a55e:	b29a      	uxth	r2, r3
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a566:	429a      	cmp	r2, r3
 800a568:	d30a      	bcc.n	800a580 <tcp_receive+0x358>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a574:	4413      	add	r3, r2
 800a576:	b29a      	uxth	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a57e:	e004      	b.n	800a58a <tcp_receive+0x362>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a586:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a592:	4a98      	ldr	r2, [pc, #608]	; (800a7f4 <tcp_receive+0x5cc>)
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f7ff fdcb 	bl	800a130 <tcp_free_acked_segments>
 800a59a:	4602      	mov	r2, r0
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5a8:	4a93      	ldr	r2, [pc, #588]	; (800a7f8 <tcp_receive+0x5d0>)
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f7ff fdc0 	bl	800a130 <tcp_free_acked_segments>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d104      	bne.n	800a5c8 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a5c4:	861a      	strh	r2, [r3, #48]	; 0x30
 800a5c6:	e002      	b.n	800a5ce <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d103      	bne.n	800a5e4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a5ea:	4b84      	ldr	r3, [pc, #528]	; (800a7fc <tcp_receive+0x5d4>)
 800a5ec:	881b      	ldrh	r3, [r3, #0]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	b29a      	uxth	r2, r3
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	8b5b      	ldrh	r3, [r3, #26]
 800a5fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a600:	2b00      	cmp	r3, #0
 800a602:	d035      	beq.n	800a670 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d118      	bne.n	800a63e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a610:	2b00      	cmp	r3, #0
 800a612:	d00c      	beq.n	800a62e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	4618      	mov	r0, r3
 800a622:	f7fa ff42 	bl	80054aa <lwip_htonl>
 800a626:	4603      	mov	r3, r0
 800a628:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	dc20      	bgt.n	800a670 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	8b5b      	ldrh	r3, [r3, #26]
 800a632:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a636:	b29a      	uxth	r2, r3
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a63c:	e018      	b.n	800a670 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7fa ff2d 	bl	80054aa <lwip_htonl>
 800a650:	4603      	mov	r3, r0
 800a652:	1ae3      	subs	r3, r4, r3
 800a654:	2b00      	cmp	r3, #0
 800a656:	dc0b      	bgt.n	800a670 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	8b5b      	ldrh	r3, [r3, #26]
 800a65c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a660:	b29a      	uxth	r2, r3
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a666:	e003      	b.n	800a670 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f002 fbcd 	bl	800ce08 <tcp_send_empty_ack>
 800a66e:	e000      	b.n	800a672 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a670:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a676:	2b00      	cmp	r3, #0
 800a678:	d05b      	beq.n	800a732 <tcp_receive+0x50a>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a67e:	4b60      	ldr	r3, [pc, #384]	; (800a800 <tcp_receive+0x5d8>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	1ad3      	subs	r3, r2, r3
 800a684:	2b00      	cmp	r3, #0
 800a686:	da54      	bge.n	800a732 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a688:	4b5e      	ldr	r3, [pc, #376]	; (800a804 <tcp_receive+0x5dc>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	b29a      	uxth	r2, r3
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a692:	b29b      	uxth	r3, r3
 800a694:	1ad3      	subs	r3, r2, r3
 800a696:	b29b      	uxth	r3, r3
 800a698:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a69c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a6a6:	10db      	asrs	r3, r3, #3
 800a6a8:	b21b      	sxth	r3, r3
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	1ad3      	subs	r3, r2, r3
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a6ba:	b29a      	uxth	r2, r3
 800a6bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a6c0:	4413      	add	r3, r2
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	b21a      	sxth	r2, r3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a6ca:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	da05      	bge.n	800a6de <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800a6d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a6d6:	425b      	negs	r3, r3
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a6de:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a6e8:	109b      	asrs	r3, r3, #2
 800a6ea:	b21b      	sxth	r3, r3
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	1ad3      	subs	r3, r2, r3
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a702:	4413      	add	r3, r2
 800a704:	b29b      	uxth	r3, r3
 800a706:	b21a      	sxth	r2, r3
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a712:	10db      	asrs	r3, r3, #3
 800a714:	b21b      	sxth	r3, r3
 800a716:	b29a      	uxth	r2, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a71e:	b29b      	uxth	r3, r3
 800a720:	4413      	add	r3, r2
 800a722:	b29b      	uxth	r3, r3
 800a724:	b21a      	sxth	r2, r3
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2200      	movs	r2, #0
 800a730:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a732:	4b35      	ldr	r3, [pc, #212]	; (800a808 <tcp_receive+0x5e0>)
 800a734:	881b      	ldrh	r3, [r3, #0]
 800a736:	2b00      	cmp	r3, #0
 800a738:	f000 84e1 	beq.w	800b0fe <tcp_receive+0xed6>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	7d1b      	ldrb	r3, [r3, #20]
 800a740:	2b06      	cmp	r3, #6
 800a742:	f200 84dc 	bhi.w	800b0fe <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a74a:	4b30      	ldr	r3, [pc, #192]	; (800a80c <tcp_receive+0x5e4>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	1ad3      	subs	r3, r2, r3
 800a750:	3b01      	subs	r3, #1
 800a752:	2b00      	cmp	r3, #0
 800a754:	f2c0 808e 	blt.w	800a874 <tcp_receive+0x64c>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a75c:	4b2a      	ldr	r3, [pc, #168]	; (800a808 <tcp_receive+0x5e0>)
 800a75e:	881b      	ldrh	r3, [r3, #0]
 800a760:	4619      	mov	r1, r3
 800a762:	4b2a      	ldr	r3, [pc, #168]	; (800a80c <tcp_receive+0x5e4>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	440b      	add	r3, r1
 800a768:	1ad3      	subs	r3, r2, r3
 800a76a:	3301      	adds	r3, #1
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	f300 8081 	bgt.w	800a874 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a772:	4b27      	ldr	r3, [pc, #156]	; (800a810 <tcp_receive+0x5e8>)
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a77c:	4b23      	ldr	r3, [pc, #140]	; (800a80c <tcp_receive+0x5e4>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	1ad3      	subs	r3, r2, r3
 800a782:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a784:	4b22      	ldr	r3, [pc, #136]	; (800a810 <tcp_receive+0x5e8>)
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d106      	bne.n	800a79a <tcp_receive+0x572>
 800a78c:	4b21      	ldr	r3, [pc, #132]	; (800a814 <tcp_receive+0x5ec>)
 800a78e:	f240 5294 	movw	r2, #1428	; 0x594
 800a792:	4921      	ldr	r1, [pc, #132]	; (800a818 <tcp_receive+0x5f0>)
 800a794:	4821      	ldr	r0, [pc, #132]	; (800a81c <tcp_receive+0x5f4>)
 800a796:	f005 facd 	bl	800fd34 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d906      	bls.n	800a7b2 <tcp_receive+0x58a>
 800a7a4:	4b1b      	ldr	r3, [pc, #108]	; (800a814 <tcp_receive+0x5ec>)
 800a7a6:	f240 5295 	movw	r2, #1429	; 0x595
 800a7aa:	491d      	ldr	r1, [pc, #116]	; (800a820 <tcp_receive+0x5f8>)
 800a7ac:	481b      	ldr	r0, [pc, #108]	; (800a81c <tcp_receive+0x5f4>)
 800a7ae:	f005 fac1 	bl	800fd34 <iprintf>
      off = (u16_t)off32;
 800a7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a7b8:	4b15      	ldr	r3, [pc, #84]	; (800a810 <tcp_receive+0x5e8>)
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	891b      	ldrh	r3, [r3, #8]
 800a7be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d906      	bls.n	800a7d4 <tcp_receive+0x5ac>
 800a7c6:	4b13      	ldr	r3, [pc, #76]	; (800a814 <tcp_receive+0x5ec>)
 800a7c8:	f240 5297 	movw	r2, #1431	; 0x597
 800a7cc:	4915      	ldr	r1, [pc, #84]	; (800a824 <tcp_receive+0x5fc>)
 800a7ce:	4813      	ldr	r0, [pc, #76]	; (800a81c <tcp_receive+0x5f4>)
 800a7d0:	f005 fab0 	bl	800fd34 <iprintf>
      inseg.len -= off;
 800a7d4:	4b0e      	ldr	r3, [pc, #56]	; (800a810 <tcp_receive+0x5e8>)
 800a7d6:	891a      	ldrh	r2, [r3, #8]
 800a7d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a7dc:	1ad3      	subs	r3, r2, r3
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	4b0b      	ldr	r3, [pc, #44]	; (800a810 <tcp_receive+0x5e8>)
 800a7e2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a7e4:	4b0a      	ldr	r3, [pc, #40]	; (800a810 <tcp_receive+0x5e8>)
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	891a      	ldrh	r2, [r3, #8]
 800a7ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a7ee:	1ad3      	subs	r3, r2, r3
 800a7f0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800a7f2:	e029      	b.n	800a848 <tcp_receive+0x620>
 800a7f4:	080127a0 	.word	0x080127a0
 800a7f8:	080127a8 	.word	0x080127a8
 800a7fc:	20000108 	.word	0x20000108
 800a800:	20000104 	.word	0x20000104
 800a804:	20006a30 	.word	0x20006a30
 800a808:	2000010a 	.word	0x2000010a
 800a80c:	20000100 	.word	0x20000100
 800a810:	200000e0 	.word	0x200000e0
 800a814:	08012438 	.word	0x08012438
 800a818:	080127b0 	.word	0x080127b0
 800a81c:	08012484 	.word	0x08012484
 800a820:	080127c0 	.word	0x080127c0
 800a824:	080127d0 	.word	0x080127d0
        off -= p->len;
 800a828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a82a:	895b      	ldrh	r3, [r3, #10]
 800a82c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a830:	1ad3      	subs	r3, r2, r3
 800a832:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a838:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a83a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a83c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a83e:	2200      	movs	r2, #0
 800a840:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800a848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a84a:	895b      	ldrh	r3, [r3, #10]
 800a84c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a850:	429a      	cmp	r2, r3
 800a852:	d8e9      	bhi.n	800a828 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a854:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a858:	4619      	mov	r1, r3
 800a85a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a85c:	f7fc f83e 	bl	80068dc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a864:	4a91      	ldr	r2, [pc, #580]	; (800aaac <tcp_receive+0x884>)
 800a866:	6013      	str	r3, [r2, #0]
 800a868:	4b91      	ldr	r3, [pc, #580]	; (800aab0 <tcp_receive+0x888>)
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	4a8f      	ldr	r2, [pc, #572]	; (800aaac <tcp_receive+0x884>)
 800a86e:	6812      	ldr	r2, [r2, #0]
 800a870:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a872:	e00d      	b.n	800a890 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a874:	4b8d      	ldr	r3, [pc, #564]	; (800aaac <tcp_receive+0x884>)
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87c:	1ad3      	subs	r3, r2, r3
 800a87e:	2b00      	cmp	r3, #0
 800a880:	da06      	bge.n	800a890 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	8b5b      	ldrh	r3, [r3, #26]
 800a886:	f043 0302 	orr.w	r3, r3, #2
 800a88a:	b29a      	uxth	r2, r3
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a890:	4b86      	ldr	r3, [pc, #536]	; (800aaac <tcp_receive+0x884>)
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a898:	1ad3      	subs	r3, r2, r3
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f2c0 842a 	blt.w	800b0f4 <tcp_receive+0xecc>
 800a8a0:	4b82      	ldr	r3, [pc, #520]	; (800aaac <tcp_receive+0x884>)
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a8:	6879      	ldr	r1, [r7, #4]
 800a8aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a8ac:	440b      	add	r3, r1
 800a8ae:	1ad3      	subs	r3, r2, r3
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f300 841e 	bgt.w	800b0f4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8bc:	4b7b      	ldr	r3, [pc, #492]	; (800aaac <tcp_receive+0x884>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	f040 829a 	bne.w	800adfa <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a8c6:	4b7a      	ldr	r3, [pc, #488]	; (800aab0 <tcp_receive+0x888>)
 800a8c8:	891c      	ldrh	r4, [r3, #8]
 800a8ca:	4b79      	ldr	r3, [pc, #484]	; (800aab0 <tcp_receive+0x888>)
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	899b      	ldrh	r3, [r3, #12]
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7fa fdd4 	bl	8005480 <lwip_htons>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	f003 0303 	and.w	r3, r3, #3
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d001      	beq.n	800a8e8 <tcp_receive+0x6c0>
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	e000      	b.n	800a8ea <tcp_receive+0x6c2>
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	4423      	add	r3, r4
 800a8ec:	b29a      	uxth	r2, r3
 800a8ee:	4b71      	ldr	r3, [pc, #452]	; (800aab4 <tcp_receive+0x88c>)
 800a8f0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a8f6:	4b6f      	ldr	r3, [pc, #444]	; (800aab4 <tcp_receive+0x88c>)
 800a8f8:	881b      	ldrh	r3, [r3, #0]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d275      	bcs.n	800a9ea <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a8fe:	4b6c      	ldr	r3, [pc, #432]	; (800aab0 <tcp_receive+0x888>)
 800a900:	68db      	ldr	r3, [r3, #12]
 800a902:	899b      	ldrh	r3, [r3, #12]
 800a904:	b29b      	uxth	r3, r3
 800a906:	4618      	mov	r0, r3
 800a908:	f7fa fdba 	bl	8005480 <lwip_htons>
 800a90c:	4603      	mov	r3, r0
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	f003 0301 	and.w	r3, r3, #1
 800a914:	2b00      	cmp	r3, #0
 800a916:	d01f      	beq.n	800a958 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a918:	4b65      	ldr	r3, [pc, #404]	; (800aab0 <tcp_receive+0x888>)
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	899b      	ldrh	r3, [r3, #12]
 800a91e:	b29b      	uxth	r3, r3
 800a920:	b21b      	sxth	r3, r3
 800a922:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a926:	b21c      	sxth	r4, r3
 800a928:	4b61      	ldr	r3, [pc, #388]	; (800aab0 <tcp_receive+0x888>)
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	899b      	ldrh	r3, [r3, #12]
 800a92e:	b29b      	uxth	r3, r3
 800a930:	4618      	mov	r0, r3
 800a932:	f7fa fda5 	bl	8005480 <lwip_htons>
 800a936:	4603      	mov	r3, r0
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a940:	b29b      	uxth	r3, r3
 800a942:	4618      	mov	r0, r3
 800a944:	f7fa fd9c 	bl	8005480 <lwip_htons>
 800a948:	4603      	mov	r3, r0
 800a94a:	b21b      	sxth	r3, r3
 800a94c:	4323      	orrs	r3, r4
 800a94e:	b21a      	sxth	r2, r3
 800a950:	4b57      	ldr	r3, [pc, #348]	; (800aab0 <tcp_receive+0x888>)
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	b292      	uxth	r2, r2
 800a956:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a95c:	4b54      	ldr	r3, [pc, #336]	; (800aab0 <tcp_receive+0x888>)
 800a95e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a960:	4b53      	ldr	r3, [pc, #332]	; (800aab0 <tcp_receive+0x888>)
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	899b      	ldrh	r3, [r3, #12]
 800a966:	b29b      	uxth	r3, r3
 800a968:	4618      	mov	r0, r3
 800a96a:	f7fa fd89 	bl	8005480 <lwip_htons>
 800a96e:	4603      	mov	r3, r0
 800a970:	b2db      	uxtb	r3, r3
 800a972:	f003 0302 	and.w	r3, r3, #2
 800a976:	2b00      	cmp	r3, #0
 800a978:	d005      	beq.n	800a986 <tcp_receive+0x75e>
            inseg.len -= 1;
 800a97a:	4b4d      	ldr	r3, [pc, #308]	; (800aab0 <tcp_receive+0x888>)
 800a97c:	891b      	ldrh	r3, [r3, #8]
 800a97e:	3b01      	subs	r3, #1
 800a980:	b29a      	uxth	r2, r3
 800a982:	4b4b      	ldr	r3, [pc, #300]	; (800aab0 <tcp_receive+0x888>)
 800a984:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a986:	4b4a      	ldr	r3, [pc, #296]	; (800aab0 <tcp_receive+0x888>)
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	4a49      	ldr	r2, [pc, #292]	; (800aab0 <tcp_receive+0x888>)
 800a98c:	8912      	ldrh	r2, [r2, #8]
 800a98e:	4611      	mov	r1, r2
 800a990:	4618      	mov	r0, r3
 800a992:	f7fb fea3 	bl	80066dc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a996:	4b46      	ldr	r3, [pc, #280]	; (800aab0 <tcp_receive+0x888>)
 800a998:	891c      	ldrh	r4, [r3, #8]
 800a99a:	4b45      	ldr	r3, [pc, #276]	; (800aab0 <tcp_receive+0x888>)
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	899b      	ldrh	r3, [r3, #12]
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7fa fd6c 	bl	8005480 <lwip_htons>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	f003 0303 	and.w	r3, r3, #3
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d001      	beq.n	800a9b8 <tcp_receive+0x790>
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	e000      	b.n	800a9ba <tcp_receive+0x792>
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	4423      	add	r3, r4
 800a9bc:	b29a      	uxth	r2, r3
 800a9be:	4b3d      	ldr	r3, [pc, #244]	; (800aab4 <tcp_receive+0x88c>)
 800a9c0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a9c2:	4b3c      	ldr	r3, [pc, #240]	; (800aab4 <tcp_receive+0x88c>)
 800a9c4:	881b      	ldrh	r3, [r3, #0]
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	4b38      	ldr	r3, [pc, #224]	; (800aaac <tcp_receive+0x884>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	441a      	add	r2, r3
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d2:	6879      	ldr	r1, [r7, #4]
 800a9d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a9d6:	440b      	add	r3, r1
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d006      	beq.n	800a9ea <tcp_receive+0x7c2>
 800a9dc:	4b36      	ldr	r3, [pc, #216]	; (800aab8 <tcp_receive+0x890>)
 800a9de:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a9e2:	4936      	ldr	r1, [pc, #216]	; (800aabc <tcp_receive+0x894>)
 800a9e4:	4836      	ldr	r0, [pc, #216]	; (800aac0 <tcp_receive+0x898>)
 800a9e6:	f005 f9a5 	bl	800fd34 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f000 80e7 	beq.w	800abc2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a9f4:	4b2e      	ldr	r3, [pc, #184]	; (800aab0 <tcp_receive+0x888>)
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	899b      	ldrh	r3, [r3, #12]
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7fa fd3f 	bl	8005480 <lwip_htons>
 800aa02:	4603      	mov	r3, r0
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	f003 0301 	and.w	r3, r3, #1
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d010      	beq.n	800aa30 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800aa0e:	e00a      	b.n	800aa26 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa14:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800aa20:	68f8      	ldr	r0, [r7, #12]
 800aa22:	f7fd fcb0 	bl	8008386 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d1f0      	bne.n	800aa10 <tcp_receive+0x7e8>
 800aa2e:	e0c8      	b.n	800abc2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa34:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800aa36:	e052      	b.n	800aade <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800aa38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa3a:	68db      	ldr	r3, [r3, #12]
 800aa3c:	899b      	ldrh	r3, [r3, #12]
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7fa fd1d 	bl	8005480 <lwip_htons>
 800aa46:	4603      	mov	r3, r0
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	f003 0301 	and.w	r3, r3, #1
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d03d      	beq.n	800aace <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800aa52:	4b17      	ldr	r3, [pc, #92]	; (800aab0 <tcp_receive+0x888>)
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	899b      	ldrh	r3, [r3, #12]
 800aa58:	b29b      	uxth	r3, r3
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7fa fd10 	bl	8005480 <lwip_htons>
 800aa60:	4603      	mov	r3, r0
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d130      	bne.n	800aace <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800aa6c:	4b10      	ldr	r3, [pc, #64]	; (800aab0 <tcp_receive+0x888>)
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	899b      	ldrh	r3, [r3, #12]
 800aa72:	b29c      	uxth	r4, r3
 800aa74:	2001      	movs	r0, #1
 800aa76:	f7fa fd03 	bl	8005480 <lwip_htons>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	4b0c      	ldr	r3, [pc, #48]	; (800aab0 <tcp_receive+0x888>)
 800aa80:	68db      	ldr	r3, [r3, #12]
 800aa82:	4322      	orrs	r2, r4
 800aa84:	b292      	uxth	r2, r2
 800aa86:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800aa88:	4b09      	ldr	r3, [pc, #36]	; (800aab0 <tcp_receive+0x888>)
 800aa8a:	891c      	ldrh	r4, [r3, #8]
 800aa8c:	4b08      	ldr	r3, [pc, #32]	; (800aab0 <tcp_receive+0x888>)
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	899b      	ldrh	r3, [r3, #12]
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7fa fcf3 	bl	8005480 <lwip_htons>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	f003 0303 	and.w	r3, r3, #3
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d00e      	beq.n	800aac4 <tcp_receive+0x89c>
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	e00d      	b.n	800aac6 <tcp_receive+0x89e>
 800aaaa:	bf00      	nop
 800aaac:	20000100 	.word	0x20000100
 800aab0:	200000e0 	.word	0x200000e0
 800aab4:	2000010a 	.word	0x2000010a
 800aab8:	08012438 	.word	0x08012438
 800aabc:	080127e0 	.word	0x080127e0
 800aac0:	08012484 	.word	0x08012484
 800aac4:	2300      	movs	r3, #0
 800aac6:	4423      	add	r3, r4
 800aac8:	b29a      	uxth	r2, r3
 800aaca:	4b98      	ldr	r3, [pc, #608]	; (800ad2c <tcp_receive+0xb04>)
 800aacc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800aace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aad0:	613b      	str	r3, [r7, #16]
              next = next->next;
 800aad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800aad8:	6938      	ldr	r0, [r7, #16]
 800aada:	f7fd fc54 	bl	8008386 <tcp_seg_free>
            while (next &&
 800aade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d00e      	beq.n	800ab02 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800aae4:	4b91      	ldr	r3, [pc, #580]	; (800ad2c <tcp_receive+0xb04>)
 800aae6:	881b      	ldrh	r3, [r3, #0]
 800aae8:	461a      	mov	r2, r3
 800aaea:	4b91      	ldr	r3, [pc, #580]	; (800ad30 <tcp_receive+0xb08>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	441a      	add	r2, r3
 800aaf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aaf8:	8909      	ldrh	r1, [r1, #8]
 800aafa:	440b      	add	r3, r1
 800aafc:	1ad3      	subs	r3, r2, r3
            while (next &&
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	da9a      	bge.n	800aa38 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ab02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d059      	beq.n	800abbc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800ab08:	4b88      	ldr	r3, [pc, #544]	; (800ad2c <tcp_receive+0xb04>)
 800ab0a:	881b      	ldrh	r3, [r3, #0]
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	4b88      	ldr	r3, [pc, #544]	; (800ad30 <tcp_receive+0xb08>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	441a      	add	r2, r3
 800ab14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	dd4d      	ble.n	800abbc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ab20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	b29a      	uxth	r2, r3
 800ab28:	4b81      	ldr	r3, [pc, #516]	; (800ad30 <tcp_receive+0xb08>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	1ad3      	subs	r3, r2, r3
 800ab30:	b29a      	uxth	r2, r3
 800ab32:	4b80      	ldr	r3, [pc, #512]	; (800ad34 <tcp_receive+0xb0c>)
 800ab34:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ab36:	4b7f      	ldr	r3, [pc, #508]	; (800ad34 <tcp_receive+0xb0c>)
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	899b      	ldrh	r3, [r3, #12]
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7fa fc9e 	bl	8005480 <lwip_htons>
 800ab44:	4603      	mov	r3, r0
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	f003 0302 	and.w	r3, r3, #2
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d005      	beq.n	800ab5c <tcp_receive+0x934>
                inseg.len -= 1;
 800ab50:	4b78      	ldr	r3, [pc, #480]	; (800ad34 <tcp_receive+0xb0c>)
 800ab52:	891b      	ldrh	r3, [r3, #8]
 800ab54:	3b01      	subs	r3, #1
 800ab56:	b29a      	uxth	r2, r3
 800ab58:	4b76      	ldr	r3, [pc, #472]	; (800ad34 <tcp_receive+0xb0c>)
 800ab5a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ab5c:	4b75      	ldr	r3, [pc, #468]	; (800ad34 <tcp_receive+0xb0c>)
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	4a74      	ldr	r2, [pc, #464]	; (800ad34 <tcp_receive+0xb0c>)
 800ab62:	8912      	ldrh	r2, [r2, #8]
 800ab64:	4611      	mov	r1, r2
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7fb fdb8 	bl	80066dc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ab6c:	4b71      	ldr	r3, [pc, #452]	; (800ad34 <tcp_receive+0xb0c>)
 800ab6e:	891c      	ldrh	r4, [r3, #8]
 800ab70:	4b70      	ldr	r3, [pc, #448]	; (800ad34 <tcp_receive+0xb0c>)
 800ab72:	68db      	ldr	r3, [r3, #12]
 800ab74:	899b      	ldrh	r3, [r3, #12]
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f7fa fc81 	bl	8005480 <lwip_htons>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	f003 0303 	and.w	r3, r3, #3
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d001      	beq.n	800ab8e <tcp_receive+0x966>
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e000      	b.n	800ab90 <tcp_receive+0x968>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	4423      	add	r3, r4
 800ab92:	b29a      	uxth	r2, r3
 800ab94:	4b65      	ldr	r3, [pc, #404]	; (800ad2c <tcp_receive+0xb04>)
 800ab96:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ab98:	4b64      	ldr	r3, [pc, #400]	; (800ad2c <tcp_receive+0xb04>)
 800ab9a:	881b      	ldrh	r3, [r3, #0]
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	4b64      	ldr	r3, [pc, #400]	; (800ad30 <tcp_receive+0xb08>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	441a      	add	r2, r3
 800aba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d006      	beq.n	800abbc <tcp_receive+0x994>
 800abae:	4b62      	ldr	r3, [pc, #392]	; (800ad38 <tcp_receive+0xb10>)
 800abb0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800abb4:	4961      	ldr	r1, [pc, #388]	; (800ad3c <tcp_receive+0xb14>)
 800abb6:	4862      	ldr	r0, [pc, #392]	; (800ad40 <tcp_receive+0xb18>)
 800abb8:	f005 f8bc 	bl	800fd34 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800abc0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800abc2:	4b5a      	ldr	r3, [pc, #360]	; (800ad2c <tcp_receive+0xb04>)
 800abc4:	881b      	ldrh	r3, [r3, #0]
 800abc6:	461a      	mov	r2, r3
 800abc8:	4b59      	ldr	r3, [pc, #356]	; (800ad30 <tcp_receive+0xb08>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	441a      	add	r2, r3
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800abd6:	4b55      	ldr	r3, [pc, #340]	; (800ad2c <tcp_receive+0xb04>)
 800abd8:	881b      	ldrh	r3, [r3, #0]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d206      	bcs.n	800abec <tcp_receive+0x9c4>
 800abde:	4b56      	ldr	r3, [pc, #344]	; (800ad38 <tcp_receive+0xb10>)
 800abe0:	f240 6207 	movw	r2, #1543	; 0x607
 800abe4:	4957      	ldr	r1, [pc, #348]	; (800ad44 <tcp_receive+0xb1c>)
 800abe6:	4856      	ldr	r0, [pc, #344]	; (800ad40 <tcp_receive+0xb18>)
 800abe8:	f005 f8a4 	bl	800fd34 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800abf0:	4b4e      	ldr	r3, [pc, #312]	; (800ad2c <tcp_receive+0xb04>)
 800abf2:	881b      	ldrh	r3, [r3, #0]
 800abf4:	1ad3      	subs	r3, r2, r3
 800abf6:	b29a      	uxth	r2, r3
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f7fc fe9d 	bl	800793c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ac02:	4b4c      	ldr	r3, [pc, #304]	; (800ad34 <tcp_receive+0xb0c>)
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	891b      	ldrh	r3, [r3, #8]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d006      	beq.n	800ac1a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800ac0c:	4b49      	ldr	r3, [pc, #292]	; (800ad34 <tcp_receive+0xb0c>)
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	4a4d      	ldr	r2, [pc, #308]	; (800ad48 <tcp_receive+0xb20>)
 800ac12:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ac14:	4b47      	ldr	r3, [pc, #284]	; (800ad34 <tcp_receive+0xb0c>)
 800ac16:	2200      	movs	r2, #0
 800ac18:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ac1a:	4b46      	ldr	r3, [pc, #280]	; (800ad34 <tcp_receive+0xb0c>)
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	899b      	ldrh	r3, [r3, #12]
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7fa fc2c 	bl	8005480 <lwip_htons>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	b2db      	uxtb	r3, r3
 800ac2c:	f003 0301 	and.w	r3, r3, #1
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	f000 80b8 	beq.w	800ada6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800ac36:	4b45      	ldr	r3, [pc, #276]	; (800ad4c <tcp_receive+0xb24>)
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	f043 0320 	orr.w	r3, r3, #32
 800ac3e:	b2da      	uxtb	r2, r3
 800ac40:	4b42      	ldr	r3, [pc, #264]	; (800ad4c <tcp_receive+0xb24>)
 800ac42:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ac44:	e0af      	b.n	800ada6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac4a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac50:	68db      	ldr	r3, [r3, #12]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	4a36      	ldr	r2, [pc, #216]	; (800ad30 <tcp_receive+0xb08>)
 800ac56:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	891b      	ldrh	r3, [r3, #8]
 800ac5c:	461c      	mov	r4, r3
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	899b      	ldrh	r3, [r3, #12]
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7fa fc0a 	bl	8005480 <lwip_htons>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	f003 0303 	and.w	r3, r3, #3
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d001      	beq.n	800ac7c <tcp_receive+0xa54>
 800ac78:	2301      	movs	r3, #1
 800ac7a:	e000      	b.n	800ac7e <tcp_receive+0xa56>
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	191a      	adds	r2, r3, r4
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac84:	441a      	add	r2, r3
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac8e:	461c      	mov	r4, r3
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	891b      	ldrh	r3, [r3, #8]
 800ac94:	461d      	mov	r5, r3
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	899b      	ldrh	r3, [r3, #12]
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7fa fbee 	bl	8005480 <lwip_htons>
 800aca4:	4603      	mov	r3, r0
 800aca6:	b2db      	uxtb	r3, r3
 800aca8:	f003 0303 	and.w	r3, r3, #3
 800acac:	2b00      	cmp	r3, #0
 800acae:	d001      	beq.n	800acb4 <tcp_receive+0xa8c>
 800acb0:	2301      	movs	r3, #1
 800acb2:	e000      	b.n	800acb6 <tcp_receive+0xa8e>
 800acb4:	2300      	movs	r3, #0
 800acb6:	442b      	add	r3, r5
 800acb8:	429c      	cmp	r4, r3
 800acba:	d206      	bcs.n	800acca <tcp_receive+0xaa2>
 800acbc:	4b1e      	ldr	r3, [pc, #120]	; (800ad38 <tcp_receive+0xb10>)
 800acbe:	f240 622b 	movw	r2, #1579	; 0x62b
 800acc2:	4923      	ldr	r1, [pc, #140]	; (800ad50 <tcp_receive+0xb28>)
 800acc4:	481e      	ldr	r0, [pc, #120]	; (800ad40 <tcp_receive+0xb18>)
 800acc6:	f005 f835 	bl	800fd34 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	891b      	ldrh	r3, [r3, #8]
 800acce:	461c      	mov	r4, r3
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	899b      	ldrh	r3, [r3, #12]
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	4618      	mov	r0, r3
 800acda:	f7fa fbd1 	bl	8005480 <lwip_htons>
 800acde:	4603      	mov	r3, r0
 800ace0:	b2db      	uxtb	r3, r3
 800ace2:	f003 0303 	and.w	r3, r3, #3
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d001      	beq.n	800acee <tcp_receive+0xac6>
 800acea:	2301      	movs	r3, #1
 800acec:	e000      	b.n	800acf0 <tcp_receive+0xac8>
 800acee:	2300      	movs	r3, #0
 800acf0:	1919      	adds	r1, r3, r4
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800acf6:	b28b      	uxth	r3, r1
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	b29a      	uxth	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f7fc fe1b 	bl	800793c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	891b      	ldrh	r3, [r3, #8]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d028      	beq.n	800ad62 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ad10:	4b0d      	ldr	r3, [pc, #52]	; (800ad48 <tcp_receive+0xb20>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d01d      	beq.n	800ad54 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800ad18:	4b0b      	ldr	r3, [pc, #44]	; (800ad48 <tcp_receive+0xb20>)
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	4619      	mov	r1, r3
 800ad22:	4610      	mov	r0, r2
 800ad24:	f7fb ff22 	bl	8006b6c <pbuf_cat>
 800ad28:	e018      	b.n	800ad5c <tcp_receive+0xb34>
 800ad2a:	bf00      	nop
 800ad2c:	2000010a 	.word	0x2000010a
 800ad30:	20000100 	.word	0x20000100
 800ad34:	200000e0 	.word	0x200000e0
 800ad38:	08012438 	.word	0x08012438
 800ad3c:	08012818 	.word	0x08012818
 800ad40:	08012484 	.word	0x08012484
 800ad44:	08012854 	.word	0x08012854
 800ad48:	20000110 	.word	0x20000110
 800ad4c:	2000010d 	.word	0x2000010d
 800ad50:	08012874 	.word	0x08012874
            } else {
              recv_data = cseg->p;
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	4a70      	ldr	r2, [pc, #448]	; (800af1c <tcp_receive+0xcf4>)
 800ad5a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	68db      	ldr	r3, [r3, #12]
 800ad66:	899b      	ldrh	r3, [r3, #12]
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f7fa fb88 	bl	8005480 <lwip_htons>
 800ad70:	4603      	mov	r3, r0
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	f003 0301 	and.w	r3, r3, #1
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d00d      	beq.n	800ad98 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ad7c:	4b68      	ldr	r3, [pc, #416]	; (800af20 <tcp_receive+0xcf8>)
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	f043 0320 	orr.w	r3, r3, #32
 800ad84:	b2da      	uxtb	r2, r3
 800ad86:	4b66      	ldr	r3, [pc, #408]	; (800af20 <tcp_receive+0xcf8>)
 800ad88:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	7d1b      	ldrb	r3, [r3, #20]
 800ad8e:	2b04      	cmp	r3, #4
 800ad90:	d102      	bne.n	800ad98 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2207      	movs	r2, #7
 800ad96:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ada0:	68b8      	ldr	r0, [r7, #8]
 800ada2:	f7fd faf0 	bl	8008386 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d008      	beq.n	800adc0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	685a      	ldr	r2, [r3, #4]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800adba:	429a      	cmp	r2, r3
 800adbc:	f43f af43 	beq.w	800ac46 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	8b5b      	ldrh	r3, [r3, #26]
 800adc4:	f003 0301 	and.w	r3, r3, #1
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d00e      	beq.n	800adea <tcp_receive+0xbc2>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	8b5b      	ldrh	r3, [r3, #26]
 800add0:	f023 0301 	bic.w	r3, r3, #1
 800add4:	b29a      	uxth	r2, r3
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	835a      	strh	r2, [r3, #26]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	8b5b      	ldrh	r3, [r3, #26]
 800adde:	f043 0302 	orr.w	r3, r3, #2
 800ade2:	b29a      	uxth	r2, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ade8:	e188      	b.n	800b0fc <tcp_receive+0xed4>
        tcp_ack(pcb);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	8b5b      	ldrh	r3, [r3, #26]
 800adee:	f043 0301 	orr.w	r3, r3, #1
 800adf2:	b29a      	uxth	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800adf8:	e180      	b.n	800b0fc <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d106      	bne.n	800ae10 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ae02:	4848      	ldr	r0, [pc, #288]	; (800af24 <tcp_receive+0xcfc>)
 800ae04:	f7fd faf6 	bl	80083f4 <tcp_seg_copy>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	675a      	str	r2, [r3, #116]	; 0x74
 800ae0e:	e16d      	b.n	800b0ec <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ae10:	2300      	movs	r3, #0
 800ae12:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae18:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae1a:	e157      	b.n	800b0cc <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800ae1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	685a      	ldr	r2, [r3, #4]
 800ae22:	4b41      	ldr	r3, [pc, #260]	; (800af28 <tcp_receive+0xd00>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d11d      	bne.n	800ae66 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ae2a:	4b3e      	ldr	r3, [pc, #248]	; (800af24 <tcp_receive+0xcfc>)
 800ae2c:	891a      	ldrh	r2, [r3, #8]
 800ae2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae30:	891b      	ldrh	r3, [r3, #8]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	f240 814f 	bls.w	800b0d6 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ae38:	483a      	ldr	r0, [pc, #232]	; (800af24 <tcp_receive+0xcfc>)
 800ae3a:	f7fd fadb 	bl	80083f4 <tcp_seg_copy>
 800ae3e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	f000 8149 	beq.w	800b0da <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800ae48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d003      	beq.n	800ae56 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ae4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae50:	697a      	ldr	r2, [r7, #20]
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	e002      	b.n	800ae5c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	697a      	ldr	r2, [r7, #20]
 800ae5a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ae5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ae5e:	6978      	ldr	r0, [r7, #20]
 800ae60:	f7ff f8de 	bl	800a020 <tcp_oos_insert_segment>
                }
                break;
 800ae64:	e139      	b.n	800b0da <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ae66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d117      	bne.n	800ae9c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ae6c:	4b2e      	ldr	r3, [pc, #184]	; (800af28 <tcp_receive+0xd00>)
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	1ad3      	subs	r3, r2, r3
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	da57      	bge.n	800af2c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ae7c:	4829      	ldr	r0, [pc, #164]	; (800af24 <tcp_receive+0xcfc>)
 800ae7e:	f7fd fab9 	bl	80083f4 <tcp_seg_copy>
 800ae82:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ae84:	69bb      	ldr	r3, [r7, #24]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	f000 8129 	beq.w	800b0de <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	69ba      	ldr	r2, [r7, #24]
 800ae90:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ae92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ae94:	69b8      	ldr	r0, [r7, #24]
 800ae96:	f7ff f8c3 	bl	800a020 <tcp_oos_insert_segment>
                  }
                  break;
 800ae9a:	e120      	b.n	800b0de <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ae9c:	4b22      	ldr	r3, [pc, #136]	; (800af28 <tcp_receive+0xd00>)
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aea2:	68db      	ldr	r3, [r3, #12]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	1ad3      	subs	r3, r2, r3
 800aea8:	3b01      	subs	r3, #1
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	db3e      	blt.n	800af2c <tcp_receive+0xd04>
 800aeae:	4b1e      	ldr	r3, [pc, #120]	; (800af28 <tcp_receive+0xd00>)
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb4:	68db      	ldr	r3, [r3, #12]
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	1ad3      	subs	r3, r2, r3
 800aeba:	3301      	adds	r3, #1
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	dc35      	bgt.n	800af2c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800aec0:	4818      	ldr	r0, [pc, #96]	; (800af24 <tcp_receive+0xcfc>)
 800aec2:	f7fd fa97 	bl	80083f4 <tcp_seg_copy>
 800aec6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f000 8109 	beq.w	800b0e2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800aed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aed8:	8912      	ldrh	r2, [r2, #8]
 800aeda:	441a      	add	r2, r3
 800aedc:	4b12      	ldr	r3, [pc, #72]	; (800af28 <tcp_receive+0xd00>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	1ad3      	subs	r3, r2, r3
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	dd12      	ble.n	800af0c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800aee6:	4b10      	ldr	r3, [pc, #64]	; (800af28 <tcp_receive+0xd00>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeee:	68db      	ldr	r3, [r3, #12]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	1ad3      	subs	r3, r2, r3
 800aef6:	b29a      	uxth	r2, r3
 800aef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aefa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800aefc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aefe:	685a      	ldr	r2, [r3, #4]
 800af00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af02:	891b      	ldrh	r3, [r3, #8]
 800af04:	4619      	mov	r1, r3
 800af06:	4610      	mov	r0, r2
 800af08:	f7fb fbe8 	bl	80066dc <pbuf_realloc>
                    }
                    prev->next = cseg;
 800af0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af0e:	69fa      	ldr	r2, [r7, #28]
 800af10:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800af12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800af14:	69f8      	ldr	r0, [r7, #28]
 800af16:	f7ff f883 	bl	800a020 <tcp_oos_insert_segment>
                  }
                  break;
 800af1a:	e0e2      	b.n	800b0e2 <tcp_receive+0xeba>
 800af1c:	20000110 	.word	0x20000110
 800af20:	2000010d 	.word	0x2000010d
 800af24:	200000e0 	.word	0x200000e0
 800af28:	20000100 	.word	0x20000100
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800af2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800af30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	f040 80c6 	bne.w	800b0c6 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800af3a:	4b80      	ldr	r3, [pc, #512]	; (800b13c <tcp_receive+0xf14>)
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800af46:	2b00      	cmp	r3, #0
 800af48:	f340 80bd 	ble.w	800b0c6 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800af4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af4e:	68db      	ldr	r3, [r3, #12]
 800af50:	899b      	ldrh	r3, [r3, #12]
 800af52:	b29b      	uxth	r3, r3
 800af54:	4618      	mov	r0, r3
 800af56:	f7fa fa93 	bl	8005480 <lwip_htons>
 800af5a:	4603      	mov	r3, r0
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	f003 0301 	and.w	r3, r3, #1
 800af62:	2b00      	cmp	r3, #0
 800af64:	f040 80bf 	bne.w	800b0e6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800af68:	4875      	ldr	r0, [pc, #468]	; (800b140 <tcp_receive+0xf18>)
 800af6a:	f7fd fa43 	bl	80083f4 <tcp_seg_copy>
 800af6e:	4602      	mov	r2, r0
 800af70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af72:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800af74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f000 80b6 	beq.w	800b0ea <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800af7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af80:	68db      	ldr	r3, [r3, #12]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af86:	8912      	ldrh	r2, [r2, #8]
 800af88:	441a      	add	r2, r3
 800af8a:	4b6c      	ldr	r3, [pc, #432]	; (800b13c <tcp_receive+0xf14>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	1ad3      	subs	r3, r2, r3
 800af90:	2b00      	cmp	r3, #0
 800af92:	dd12      	ble.n	800afba <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800af94:	4b69      	ldr	r3, [pc, #420]	; (800b13c <tcp_receive+0xf14>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	b29a      	uxth	r2, r3
 800af9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	1ad3      	subs	r3, r2, r3
 800afa4:	b29a      	uxth	r2, r3
 800afa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800afaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afac:	685a      	ldr	r2, [r3, #4]
 800afae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb0:	891b      	ldrh	r3, [r3, #8]
 800afb2:	4619      	mov	r1, r3
 800afb4:	4610      	mov	r0, r2
 800afb6:	f7fb fb91 	bl	80066dc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800afba:	4b62      	ldr	r3, [pc, #392]	; (800b144 <tcp_receive+0xf1c>)
 800afbc:	881b      	ldrh	r3, [r3, #0]
 800afbe:	461a      	mov	r2, r3
 800afc0:	4b5e      	ldr	r3, [pc, #376]	; (800b13c <tcp_receive+0xf14>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	441a      	add	r2, r3
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afca:	6879      	ldr	r1, [r7, #4]
 800afcc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800afce:	440b      	add	r3, r1
 800afd0:	1ad3      	subs	r3, r2, r3
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	f340 8089 	ble.w	800b0ea <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800afd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	899b      	ldrh	r3, [r3, #12]
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7fa fa4c 	bl	8005480 <lwip_htons>
 800afe8:	4603      	mov	r3, r0
 800afea:	b2db      	uxtb	r3, r3
 800afec:	f003 0301 	and.w	r3, r3, #1
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d022      	beq.n	800b03a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800aff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	68db      	ldr	r3, [r3, #12]
 800affa:	899b      	ldrh	r3, [r3, #12]
 800affc:	b29b      	uxth	r3, r3
 800affe:	b21b      	sxth	r3, r3
 800b000:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b004:	b21c      	sxth	r4, r3
 800b006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	68db      	ldr	r3, [r3, #12]
 800b00c:	899b      	ldrh	r3, [r3, #12]
 800b00e:	b29b      	uxth	r3, r3
 800b010:	4618      	mov	r0, r3
 800b012:	f7fa fa35 	bl	8005480 <lwip_htons>
 800b016:	4603      	mov	r3, r0
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b020:	b29b      	uxth	r3, r3
 800b022:	4618      	mov	r0, r3
 800b024:	f7fa fa2c 	bl	8005480 <lwip_htons>
 800b028:	4603      	mov	r3, r0
 800b02a:	b21b      	sxth	r3, r3
 800b02c:	4323      	orrs	r3, r4
 800b02e:	b21a      	sxth	r2, r3
 800b030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	68db      	ldr	r3, [r3, #12]
 800b036:	b292      	uxth	r2, r2
 800b038:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03e:	b29a      	uxth	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b044:	4413      	add	r3, r2
 800b046:	b299      	uxth	r1, r3
 800b048:	4b3c      	ldr	r3, [pc, #240]	; (800b13c <tcp_receive+0xf14>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	b29a      	uxth	r2, r3
 800b04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	1a8a      	subs	r2, r1, r2
 800b054:	b292      	uxth	r2, r2
 800b056:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	685a      	ldr	r2, [r3, #4]
 800b05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	891b      	ldrh	r3, [r3, #8]
 800b064:	4619      	mov	r1, r3
 800b066:	4610      	mov	r0, r2
 800b068:	f7fb fb38 	bl	80066dc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	891c      	ldrh	r4, [r3, #8]
 800b072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	899b      	ldrh	r3, [r3, #12]
 800b07a:	b29b      	uxth	r3, r3
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7fa f9ff 	bl	8005480 <lwip_htons>
 800b082:	4603      	mov	r3, r0
 800b084:	b2db      	uxtb	r3, r3
 800b086:	f003 0303 	and.w	r3, r3, #3
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d001      	beq.n	800b092 <tcp_receive+0xe6a>
 800b08e:	2301      	movs	r3, #1
 800b090:	e000      	b.n	800b094 <tcp_receive+0xe6c>
 800b092:	2300      	movs	r3, #0
 800b094:	4423      	add	r3, r4
 800b096:	b29a      	uxth	r2, r3
 800b098:	4b2a      	ldr	r3, [pc, #168]	; (800b144 <tcp_receive+0xf1c>)
 800b09a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b09c:	4b29      	ldr	r3, [pc, #164]	; (800b144 <tcp_receive+0xf1c>)
 800b09e:	881b      	ldrh	r3, [r3, #0]
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	4b26      	ldr	r3, [pc, #152]	; (800b13c <tcp_receive+0xf14>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	441a      	add	r2, r3
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ac:	6879      	ldr	r1, [r7, #4]
 800b0ae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b0b0:	440b      	add	r3, r1
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d019      	beq.n	800b0ea <tcp_receive+0xec2>
 800b0b6:	4b24      	ldr	r3, [pc, #144]	; (800b148 <tcp_receive+0xf20>)
 800b0b8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800b0bc:	4923      	ldr	r1, [pc, #140]	; (800b14c <tcp_receive+0xf24>)
 800b0be:	4824      	ldr	r0, [pc, #144]	; (800b150 <tcp_receive+0xf28>)
 800b0c0:	f004 fe38 	bl	800fd34 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b0c4:	e011      	b.n	800b0ea <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	63bb      	str	r3, [r7, #56]	; 0x38
 800b0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	f47f aea4 	bne.w	800ae1c <tcp_receive+0xbf4>
 800b0d4:	e00a      	b.n	800b0ec <tcp_receive+0xec4>
                break;
 800b0d6:	bf00      	nop
 800b0d8:	e008      	b.n	800b0ec <tcp_receive+0xec4>
                break;
 800b0da:	bf00      	nop
 800b0dc:	e006      	b.n	800b0ec <tcp_receive+0xec4>
                  break;
 800b0de:	bf00      	nop
 800b0e0:	e004      	b.n	800b0ec <tcp_receive+0xec4>
                  break;
 800b0e2:	bf00      	nop
 800b0e4:	e002      	b.n	800b0ec <tcp_receive+0xec4>
                  break;
 800b0e6:	bf00      	nop
 800b0e8:	e000      	b.n	800b0ec <tcp_receive+0xec4>
                break;
 800b0ea:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f001 fe8b 	bl	800ce08 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800b0f2:	e003      	b.n	800b0fc <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f001 fe87 	bl	800ce08 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b0fa:	e01a      	b.n	800b132 <tcp_receive+0xf0a>
 800b0fc:	e019      	b.n	800b132 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b0fe:	4b0f      	ldr	r3, [pc, #60]	; (800b13c <tcp_receive+0xf14>)
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b106:	1ad3      	subs	r3, r2, r3
 800b108:	2b00      	cmp	r3, #0
 800b10a:	db0a      	blt.n	800b122 <tcp_receive+0xefa>
 800b10c:	4b0b      	ldr	r3, [pc, #44]	; (800b13c <tcp_receive+0xf14>)
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b114:	6879      	ldr	r1, [r7, #4]
 800b116:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b118:	440b      	add	r3, r1
 800b11a:	1ad3      	subs	r3, r2, r3
 800b11c:	3301      	adds	r3, #1
 800b11e:	2b00      	cmp	r3, #0
 800b120:	dd07      	ble.n	800b132 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	8b5b      	ldrh	r3, [r3, #26]
 800b126:	f043 0302 	orr.w	r3, r3, #2
 800b12a:	b29a      	uxth	r2, r3
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800b130:	e7ff      	b.n	800b132 <tcp_receive+0xf0a>
 800b132:	bf00      	nop
 800b134:	3750      	adds	r7, #80	; 0x50
 800b136:	46bd      	mov	sp, r7
 800b138:	bdb0      	pop	{r4, r5, r7, pc}
 800b13a:	bf00      	nop
 800b13c:	20000100 	.word	0x20000100
 800b140:	200000e0 	.word	0x200000e0
 800b144:	2000010a 	.word	0x2000010a
 800b148:	08012438 	.word	0x08012438
 800b14c:	080127e0 	.word	0x080127e0
 800b150:	08012484 	.word	0x08012484

0800b154 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800b15a:	4b15      	ldr	r3, [pc, #84]	; (800b1b0 <tcp_get_next_optbyte+0x5c>)
 800b15c:	881b      	ldrh	r3, [r3, #0]
 800b15e:	1c5a      	adds	r2, r3, #1
 800b160:	b291      	uxth	r1, r2
 800b162:	4a13      	ldr	r2, [pc, #76]	; (800b1b0 <tcp_get_next_optbyte+0x5c>)
 800b164:	8011      	strh	r1, [r2, #0]
 800b166:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b168:	4b12      	ldr	r3, [pc, #72]	; (800b1b4 <tcp_get_next_optbyte+0x60>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d004      	beq.n	800b17a <tcp_get_next_optbyte+0x26>
 800b170:	4b11      	ldr	r3, [pc, #68]	; (800b1b8 <tcp_get_next_optbyte+0x64>)
 800b172:	881b      	ldrh	r3, [r3, #0]
 800b174:	88fa      	ldrh	r2, [r7, #6]
 800b176:	429a      	cmp	r2, r3
 800b178:	d208      	bcs.n	800b18c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b17a:	4b10      	ldr	r3, [pc, #64]	; (800b1bc <tcp_get_next_optbyte+0x68>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	3314      	adds	r3, #20
 800b180:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800b182:	88fb      	ldrh	r3, [r7, #6]
 800b184:	683a      	ldr	r2, [r7, #0]
 800b186:	4413      	add	r3, r2
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	e00b      	b.n	800b1a4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b18c:	88fb      	ldrh	r3, [r7, #6]
 800b18e:	b2da      	uxtb	r2, r3
 800b190:	4b09      	ldr	r3, [pc, #36]	; (800b1b8 <tcp_get_next_optbyte+0x64>)
 800b192:	881b      	ldrh	r3, [r3, #0]
 800b194:	b2db      	uxtb	r3, r3
 800b196:	1ad3      	subs	r3, r2, r3
 800b198:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800b19a:	4b06      	ldr	r3, [pc, #24]	; (800b1b4 <tcp_get_next_optbyte+0x60>)
 800b19c:	681a      	ldr	r2, [r3, #0]
 800b19e:	797b      	ldrb	r3, [r7, #5]
 800b1a0:	4413      	add	r3, r2
 800b1a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr
 800b1b0:	200000fc 	.word	0x200000fc
 800b1b4:	200000f8 	.word	0x200000f8
 800b1b8:	200000f6 	.word	0x200000f6
 800b1bc:	200000f0 	.word	0x200000f0

0800b1c0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d106      	bne.n	800b1dc <tcp_parseopt+0x1c>
 800b1ce:	4b32      	ldr	r3, [pc, #200]	; (800b298 <tcp_parseopt+0xd8>)
 800b1d0:	f240 727d 	movw	r2, #1917	; 0x77d
 800b1d4:	4931      	ldr	r1, [pc, #196]	; (800b29c <tcp_parseopt+0xdc>)
 800b1d6:	4832      	ldr	r0, [pc, #200]	; (800b2a0 <tcp_parseopt+0xe0>)
 800b1d8:	f004 fdac 	bl	800fd34 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b1dc:	4b31      	ldr	r3, [pc, #196]	; (800b2a4 <tcp_parseopt+0xe4>)
 800b1de:	881b      	ldrh	r3, [r3, #0]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d055      	beq.n	800b290 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b1e4:	4b30      	ldr	r3, [pc, #192]	; (800b2a8 <tcp_parseopt+0xe8>)
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	801a      	strh	r2, [r3, #0]
 800b1ea:	e045      	b.n	800b278 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800b1ec:	f7ff ffb2 	bl	800b154 <tcp_get_next_optbyte>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b1f4:	7bfb      	ldrb	r3, [r7, #15]
 800b1f6:	2b02      	cmp	r3, #2
 800b1f8:	d006      	beq.n	800b208 <tcp_parseopt+0x48>
 800b1fa:	2b02      	cmp	r3, #2
 800b1fc:	dc2b      	bgt.n	800b256 <tcp_parseopt+0x96>
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d041      	beq.n	800b286 <tcp_parseopt+0xc6>
 800b202:	2b01      	cmp	r3, #1
 800b204:	d127      	bne.n	800b256 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800b206:	e037      	b.n	800b278 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b208:	f7ff ffa4 	bl	800b154 <tcp_get_next_optbyte>
 800b20c:	4603      	mov	r3, r0
 800b20e:	2b04      	cmp	r3, #4
 800b210:	d13b      	bne.n	800b28a <tcp_parseopt+0xca>
 800b212:	4b25      	ldr	r3, [pc, #148]	; (800b2a8 <tcp_parseopt+0xe8>)
 800b214:	881b      	ldrh	r3, [r3, #0]
 800b216:	3301      	adds	r3, #1
 800b218:	4a22      	ldr	r2, [pc, #136]	; (800b2a4 <tcp_parseopt+0xe4>)
 800b21a:	8812      	ldrh	r2, [r2, #0]
 800b21c:	4293      	cmp	r3, r2
 800b21e:	da34      	bge.n	800b28a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b220:	f7ff ff98 	bl	800b154 <tcp_get_next_optbyte>
 800b224:	4603      	mov	r3, r0
 800b226:	b29b      	uxth	r3, r3
 800b228:	021b      	lsls	r3, r3, #8
 800b22a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b22c:	f7ff ff92 	bl	800b154 <tcp_get_next_optbyte>
 800b230:	4603      	mov	r3, r0
 800b232:	b29a      	uxth	r2, r3
 800b234:	89bb      	ldrh	r3, [r7, #12]
 800b236:	4313      	orrs	r3, r2
 800b238:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b23a:	89bb      	ldrh	r3, [r7, #12]
 800b23c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b240:	d804      	bhi.n	800b24c <tcp_parseopt+0x8c>
 800b242:	89bb      	ldrh	r3, [r7, #12]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d001      	beq.n	800b24c <tcp_parseopt+0x8c>
 800b248:	89ba      	ldrh	r2, [r7, #12]
 800b24a:	e001      	b.n	800b250 <tcp_parseopt+0x90>
 800b24c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800b254:	e010      	b.n	800b278 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b256:	f7ff ff7d 	bl	800b154 <tcp_get_next_optbyte>
 800b25a:	4603      	mov	r3, r0
 800b25c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b25e:	7afb      	ldrb	r3, [r7, #11]
 800b260:	2b01      	cmp	r3, #1
 800b262:	d914      	bls.n	800b28e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b264:	7afb      	ldrb	r3, [r7, #11]
 800b266:	b29a      	uxth	r2, r3
 800b268:	4b0f      	ldr	r3, [pc, #60]	; (800b2a8 <tcp_parseopt+0xe8>)
 800b26a:	881b      	ldrh	r3, [r3, #0]
 800b26c:	4413      	add	r3, r2
 800b26e:	b29b      	uxth	r3, r3
 800b270:	3b02      	subs	r3, #2
 800b272:	b29a      	uxth	r2, r3
 800b274:	4b0c      	ldr	r3, [pc, #48]	; (800b2a8 <tcp_parseopt+0xe8>)
 800b276:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b278:	4b0b      	ldr	r3, [pc, #44]	; (800b2a8 <tcp_parseopt+0xe8>)
 800b27a:	881a      	ldrh	r2, [r3, #0]
 800b27c:	4b09      	ldr	r3, [pc, #36]	; (800b2a4 <tcp_parseopt+0xe4>)
 800b27e:	881b      	ldrh	r3, [r3, #0]
 800b280:	429a      	cmp	r2, r3
 800b282:	d3b3      	bcc.n	800b1ec <tcp_parseopt+0x2c>
 800b284:	e004      	b.n	800b290 <tcp_parseopt+0xd0>
          return;
 800b286:	bf00      	nop
 800b288:	e002      	b.n	800b290 <tcp_parseopt+0xd0>
            return;
 800b28a:	bf00      	nop
 800b28c:	e000      	b.n	800b290 <tcp_parseopt+0xd0>
            return;
 800b28e:	bf00      	nop
      }
    }
  }
}
 800b290:	3710      	adds	r7, #16
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	08012438 	.word	0x08012438
 800b29c:	0801289c 	.word	0x0801289c
 800b2a0:	08012484 	.word	0x08012484
 800b2a4:	200000f4 	.word	0x200000f4
 800b2a8:	200000fc 	.word	0x200000fc

0800b2ac <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b2b0:	4b05      	ldr	r3, [pc, #20]	; (800b2c8 <tcp_trigger_input_pcb_close+0x1c>)
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	f043 0310 	orr.w	r3, r3, #16
 800b2b8:	b2da      	uxtb	r2, r3
 800b2ba:	4b03      	ldr	r3, [pc, #12]	; (800b2c8 <tcp_trigger_input_pcb_close+0x1c>)
 800b2bc:	701a      	strb	r2, [r3, #0]
}
 800b2be:	bf00      	nop
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr
 800b2c8:	2000010d 	.word	0x2000010d

0800b2cc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d00a      	beq.n	800b2f4 <tcp_route+0x28>
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	7a1b      	ldrb	r3, [r3, #8]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d006      	beq.n	800b2f4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	7a1b      	ldrb	r3, [r3, #8]
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7fb f81c 	bl	8006328 <netif_get_by_index>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	e003      	b.n	800b2fc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f003 fad5 	bl	800e8a4 <ip4_route>
 800b2fa:	4603      	mov	r3, r0
  }
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3710      	adds	r7, #16
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b304:	b590      	push	{r4, r7, lr}
 800b306:	b087      	sub	sp, #28
 800b308:	af00      	add	r7, sp, #0
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	603b      	str	r3, [r7, #0]
 800b310:	4613      	mov	r3, r2
 800b312:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d105      	bne.n	800b326 <tcp_create_segment+0x22>
 800b31a:	4b44      	ldr	r3, [pc, #272]	; (800b42c <tcp_create_segment+0x128>)
 800b31c:	22a3      	movs	r2, #163	; 0xa3
 800b31e:	4944      	ldr	r1, [pc, #272]	; (800b430 <tcp_create_segment+0x12c>)
 800b320:	4844      	ldr	r0, [pc, #272]	; (800b434 <tcp_create_segment+0x130>)
 800b322:	f004 fd07 	bl	800fd34 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d105      	bne.n	800b338 <tcp_create_segment+0x34>
 800b32c:	4b3f      	ldr	r3, [pc, #252]	; (800b42c <tcp_create_segment+0x128>)
 800b32e:	22a4      	movs	r2, #164	; 0xa4
 800b330:	4941      	ldr	r1, [pc, #260]	; (800b438 <tcp_create_segment+0x134>)
 800b332:	4840      	ldr	r0, [pc, #256]	; (800b434 <tcp_create_segment+0x130>)
 800b334:	f004 fcfe 	bl	800fd34 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b338:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b33c:	009b      	lsls	r3, r3, #2
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	f003 0304 	and.w	r3, r3, #4
 800b344:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b346:	2003      	movs	r0, #3
 800b348:	f7fa fcf0 	bl	8005d2c <memp_malloc>
 800b34c:	6138      	str	r0, [r7, #16]
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d104      	bne.n	800b35e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b354:	68b8      	ldr	r0, [r7, #8]
 800b356:	f7fb fb47 	bl	80069e8 <pbuf_free>
    return NULL;
 800b35a:	2300      	movs	r3, #0
 800b35c:	e061      	b.n	800b422 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b364:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	2200      	movs	r2, #0
 800b36a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	68ba      	ldr	r2, [r7, #8]
 800b370:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	891a      	ldrh	r2, [r3, #8]
 800b376:	7dfb      	ldrb	r3, [r7, #23]
 800b378:	b29b      	uxth	r3, r3
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d205      	bcs.n	800b38a <tcp_create_segment+0x86>
 800b37e:	4b2b      	ldr	r3, [pc, #172]	; (800b42c <tcp_create_segment+0x128>)
 800b380:	22b0      	movs	r2, #176	; 0xb0
 800b382:	492e      	ldr	r1, [pc, #184]	; (800b43c <tcp_create_segment+0x138>)
 800b384:	482b      	ldr	r0, [pc, #172]	; (800b434 <tcp_create_segment+0x130>)
 800b386:	f004 fcd5 	bl	800fd34 <iprintf>
  seg->len = p->tot_len - optlen;
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	891a      	ldrh	r2, [r3, #8]
 800b38e:	7dfb      	ldrb	r3, [r7, #23]
 800b390:	b29b      	uxth	r3, r3
 800b392:	1ad3      	subs	r3, r2, r3
 800b394:	b29a      	uxth	r2, r3
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b39a:	2114      	movs	r1, #20
 800b39c:	68b8      	ldr	r0, [r7, #8]
 800b39e:	f7fb fa8d 	bl	80068bc <pbuf_add_header>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d004      	beq.n	800b3b2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b3a8:	6938      	ldr	r0, [r7, #16]
 800b3aa:	f7fc ffec 	bl	8008386 <tcp_seg_free>
    return NULL;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	e037      	b.n	800b422 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	685a      	ldr	r2, [r3, #4]
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	8ada      	ldrh	r2, [r3, #22]
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	68dc      	ldr	r4, [r3, #12]
 800b3c4:	4610      	mov	r0, r2
 800b3c6:	f7fa f85b 	bl	8005480 <lwip_htons>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	8b1a      	ldrh	r2, [r3, #24]
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	68dc      	ldr	r4, [r3, #12]
 800b3d6:	4610      	mov	r0, r2
 800b3d8:	f7fa f852 	bl	8005480 <lwip_htons>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	68dc      	ldr	r4, [r3, #12]
 800b3e4:	6838      	ldr	r0, [r7, #0]
 800b3e6:	f7fa f860 	bl	80054aa <lwip_htonl>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b3ee:	7dfb      	ldrb	r3, [r7, #23]
 800b3f0:	089b      	lsrs	r3, r3, #2
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	3305      	adds	r3, #5
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	031b      	lsls	r3, r3, #12
 800b3fc:	b29a      	uxth	r2, r3
 800b3fe:	79fb      	ldrb	r3, [r7, #7]
 800b400:	b29b      	uxth	r3, r3
 800b402:	4313      	orrs	r3, r2
 800b404:	b29a      	uxth	r2, r3
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	68dc      	ldr	r4, [r3, #12]
 800b40a:	4610      	mov	r0, r2
 800b40c:	f7fa f838 	bl	8005480 <lwip_htons>
 800b410:	4603      	mov	r3, r0
 800b412:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	68db      	ldr	r3, [r3, #12]
 800b418:	2200      	movs	r2, #0
 800b41a:	749a      	strb	r2, [r3, #18]
 800b41c:	2200      	movs	r2, #0
 800b41e:	74da      	strb	r2, [r3, #19]
  return seg;
 800b420:	693b      	ldr	r3, [r7, #16]
}
 800b422:	4618      	mov	r0, r3
 800b424:	371c      	adds	r7, #28
 800b426:	46bd      	mov	sp, r7
 800b428:	bd90      	pop	{r4, r7, pc}
 800b42a:	bf00      	nop
 800b42c:	080128b8 	.word	0x080128b8
 800b430:	080128ec 	.word	0x080128ec
 800b434:	0801290c 	.word	0x0801290c
 800b438:	08012934 	.word	0x08012934
 800b43c:	08012958 	.word	0x08012958

0800b440 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b086      	sub	sp, #24
 800b444:	af00      	add	r7, sp, #0
 800b446:	607b      	str	r3, [r7, #4]
 800b448:	4603      	mov	r3, r0
 800b44a:	73fb      	strb	r3, [r7, #15]
 800b44c:	460b      	mov	r3, r1
 800b44e:	81bb      	strh	r3, [r7, #12]
 800b450:	4613      	mov	r3, r2
 800b452:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800b454:	89bb      	ldrh	r3, [r7, #12]
 800b456:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d105      	bne.n	800b46a <tcp_pbuf_prealloc+0x2a>
 800b45e:	4b30      	ldr	r3, [pc, #192]	; (800b520 <tcp_pbuf_prealloc+0xe0>)
 800b460:	22e8      	movs	r2, #232	; 0xe8
 800b462:	4930      	ldr	r1, [pc, #192]	; (800b524 <tcp_pbuf_prealloc+0xe4>)
 800b464:	4830      	ldr	r0, [pc, #192]	; (800b528 <tcp_pbuf_prealloc+0xe8>)
 800b466:	f004 fc65 	bl	800fd34 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b46a:	6a3b      	ldr	r3, [r7, #32]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d105      	bne.n	800b47c <tcp_pbuf_prealloc+0x3c>
 800b470:	4b2b      	ldr	r3, [pc, #172]	; (800b520 <tcp_pbuf_prealloc+0xe0>)
 800b472:	22e9      	movs	r2, #233	; 0xe9
 800b474:	492d      	ldr	r1, [pc, #180]	; (800b52c <tcp_pbuf_prealloc+0xec>)
 800b476:	482c      	ldr	r0, [pc, #176]	; (800b528 <tcp_pbuf_prealloc+0xe8>)
 800b478:	f004 fc5c 	bl	800fd34 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800b47c:	89ba      	ldrh	r2, [r7, #12]
 800b47e:	897b      	ldrh	r3, [r7, #10]
 800b480:	429a      	cmp	r2, r3
 800b482:	d221      	bcs.n	800b4c8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b484:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b488:	f003 0302 	and.w	r3, r3, #2
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d111      	bne.n	800b4b4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800b490:	6a3b      	ldr	r3, [r7, #32]
 800b492:	8b5b      	ldrh	r3, [r3, #26]
 800b494:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d115      	bne.n	800b4c8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800b49c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d007      	beq.n	800b4b4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800b4a4:	6a3b      	ldr	r3, [r7, #32]
 800b4a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d103      	bne.n	800b4b4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800b4ac:	6a3b      	ldr	r3, [r7, #32]
 800b4ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d009      	beq.n	800b4c8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b4b4:	89bb      	ldrh	r3, [r7, #12]
 800b4b6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800b4ba:	f023 0203 	bic.w	r2, r3, #3
 800b4be:	897b      	ldrh	r3, [r7, #10]
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	bf28      	it	cs
 800b4c4:	4613      	movcs	r3, r2
 800b4c6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b4c8:	8af9      	ldrh	r1, [r7, #22]
 800b4ca:	7bfb      	ldrb	r3, [r7, #15]
 800b4cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7fa ffa5 	bl	8006420 <pbuf_alloc>
 800b4d6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d101      	bne.n	800b4e2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	e019      	b.n	800b516 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d006      	beq.n	800b4f8 <tcp_pbuf_prealloc+0xb8>
 800b4ea:	4b0d      	ldr	r3, [pc, #52]	; (800b520 <tcp_pbuf_prealloc+0xe0>)
 800b4ec:	f240 120b 	movw	r2, #267	; 0x10b
 800b4f0:	490f      	ldr	r1, [pc, #60]	; (800b530 <tcp_pbuf_prealloc+0xf0>)
 800b4f2:	480d      	ldr	r0, [pc, #52]	; (800b528 <tcp_pbuf_prealloc+0xe8>)
 800b4f4:	f004 fc1e 	bl	800fd34 <iprintf>
  *oversize = p->len - length;
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	895a      	ldrh	r2, [r3, #10]
 800b4fc:	89bb      	ldrh	r3, [r7, #12]
 800b4fe:	1ad3      	subs	r3, r2, r3
 800b500:	b29a      	uxth	r2, r3
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	89ba      	ldrh	r2, [r7, #12]
 800b50a:	811a      	strh	r2, [r3, #8]
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	891a      	ldrh	r2, [r3, #8]
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	815a      	strh	r2, [r3, #10]
  return p;
 800b514:	693b      	ldr	r3, [r7, #16]
}
 800b516:	4618      	mov	r0, r3
 800b518:	3718      	adds	r7, #24
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	080128b8 	.word	0x080128b8
 800b524:	08012970 	.word	0x08012970
 800b528:	0801290c 	.word	0x0801290c
 800b52c:	08012994 	.word	0x08012994
 800b530:	080129b4 	.word	0x080129b4

0800b534 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	460b      	mov	r3, r1
 800b53e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d106      	bne.n	800b554 <tcp_write_checks+0x20>
 800b546:	4b33      	ldr	r3, [pc, #204]	; (800b614 <tcp_write_checks+0xe0>)
 800b548:	f240 1233 	movw	r2, #307	; 0x133
 800b54c:	4932      	ldr	r1, [pc, #200]	; (800b618 <tcp_write_checks+0xe4>)
 800b54e:	4833      	ldr	r0, [pc, #204]	; (800b61c <tcp_write_checks+0xe8>)
 800b550:	f004 fbf0 	bl	800fd34 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	7d1b      	ldrb	r3, [r3, #20]
 800b558:	2b04      	cmp	r3, #4
 800b55a:	d00e      	beq.n	800b57a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800b560:	2b07      	cmp	r3, #7
 800b562:	d00a      	beq.n	800b57a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800b568:	2b02      	cmp	r3, #2
 800b56a:	d006      	beq.n	800b57a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800b570:	2b03      	cmp	r3, #3
 800b572:	d002      	beq.n	800b57a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800b574:	f06f 030a 	mvn.w	r3, #10
 800b578:	e048      	b.n	800b60c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800b57a:	887b      	ldrh	r3, [r7, #2]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d101      	bne.n	800b584 <tcp_write_checks+0x50>
    return ERR_OK;
 800b580:	2300      	movs	r3, #0
 800b582:	e043      	b.n	800b60c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b58a:	887a      	ldrh	r2, [r7, #2]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d909      	bls.n	800b5a4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	8b5b      	ldrh	r3, [r3, #26]
 800b594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b598:	b29a      	uxth	r2, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b59e:	f04f 33ff 	mov.w	r3, #4294967295
 800b5a2:	e033      	b.n	800b60c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b5aa:	2b08      	cmp	r3, #8
 800b5ac:	d909      	bls.n	800b5c2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	8b5b      	ldrh	r3, [r3, #26]
 800b5b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5b6:	b29a      	uxth	r2, r3
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b5bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b5c0:	e024      	b.n	800b60c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d00f      	beq.n	800b5ec <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d11a      	bne.n	800b60a <tcp_write_checks+0xd6>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d116      	bne.n	800b60a <tcp_write_checks+0xd6>
 800b5dc:	4b0d      	ldr	r3, [pc, #52]	; (800b614 <tcp_write_checks+0xe0>)
 800b5de:	f240 1255 	movw	r2, #341	; 0x155
 800b5e2:	490f      	ldr	r1, [pc, #60]	; (800b620 <tcp_write_checks+0xec>)
 800b5e4:	480d      	ldr	r0, [pc, #52]	; (800b61c <tcp_write_checks+0xe8>)
 800b5e6:	f004 fba5 	bl	800fd34 <iprintf>
 800b5ea:	e00e      	b.n	800b60a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d103      	bne.n	800b5fc <tcp_write_checks+0xc8>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d006      	beq.n	800b60a <tcp_write_checks+0xd6>
 800b5fc:	4b05      	ldr	r3, [pc, #20]	; (800b614 <tcp_write_checks+0xe0>)
 800b5fe:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800b602:	4908      	ldr	r1, [pc, #32]	; (800b624 <tcp_write_checks+0xf0>)
 800b604:	4805      	ldr	r0, [pc, #20]	; (800b61c <tcp_write_checks+0xe8>)
 800b606:	f004 fb95 	bl	800fd34 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800b60a:	2300      	movs	r3, #0
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3708      	adds	r7, #8
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	080128b8 	.word	0x080128b8
 800b618:	080129c8 	.word	0x080129c8
 800b61c:	0801290c 	.word	0x0801290c
 800b620:	080129e8 	.word	0x080129e8
 800b624:	08012a24 	.word	0x08012a24

0800b628 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800b628:	b590      	push	{r4, r7, lr}
 800b62a:	b09b      	sub	sp, #108	; 0x6c
 800b62c:	af04      	add	r7, sp, #16
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	4611      	mov	r1, r2
 800b634:	461a      	mov	r2, r3
 800b636:	460b      	mov	r3, r1
 800b638:	80fb      	strh	r3, [r7, #6]
 800b63a:	4613      	mov	r3, r2
 800b63c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800b63e:	2300      	movs	r3, #0
 800b640:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b642:	2300      	movs	r3, #0
 800b644:	653b      	str	r3, [r7, #80]	; 0x50
 800b646:	2300      	movs	r3, #0
 800b648:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b64a:	2300      	movs	r3, #0
 800b64c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b64e:	2300      	movs	r3, #0
 800b650:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800b652:	2300      	movs	r3, #0
 800b654:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800b658:	2300      	movs	r3, #0
 800b65a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800b65e:	2300      	movs	r3, #0
 800b660:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800b662:	2300      	movs	r3, #0
 800b664:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800b666:	2300      	movs	r3, #0
 800b668:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d109      	bne.n	800b684 <tcp_write+0x5c>
 800b670:	4ba4      	ldr	r3, [pc, #656]	; (800b904 <tcp_write+0x2dc>)
 800b672:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800b676:	49a4      	ldr	r1, [pc, #656]	; (800b908 <tcp_write+0x2e0>)
 800b678:	48a4      	ldr	r0, [pc, #656]	; (800b90c <tcp_write+0x2e4>)
 800b67a:	f004 fb5b 	bl	800fd34 <iprintf>
 800b67e:	f06f 030f 	mvn.w	r3, #15
 800b682:	e32a      	b.n	800bcda <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b68a:	085b      	lsrs	r3, r3, #1
 800b68c:	b29a      	uxth	r2, r3
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b692:	4293      	cmp	r3, r2
 800b694:	bf28      	it	cs
 800b696:	4613      	movcs	r3, r2
 800b698:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800b69a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d102      	bne.n	800b6a6 <tcp_write+0x7e>
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b6a4:	e000      	b.n	800b6a8 <tcp_write+0x80>
 800b6a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6a8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d109      	bne.n	800b6c4 <tcp_write+0x9c>
 800b6b0:	4b94      	ldr	r3, [pc, #592]	; (800b904 <tcp_write+0x2dc>)
 800b6b2:	f240 12ad 	movw	r2, #429	; 0x1ad
 800b6b6:	4996      	ldr	r1, [pc, #600]	; (800b910 <tcp_write+0x2e8>)
 800b6b8:	4894      	ldr	r0, [pc, #592]	; (800b90c <tcp_write+0x2e4>)
 800b6ba:	f004 fb3b 	bl	800fd34 <iprintf>
 800b6be:	f06f 030f 	mvn.w	r3, #15
 800b6c2:	e30a      	b.n	800bcda <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800b6c4:	88fb      	ldrh	r3, [r7, #6]
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f7ff ff33 	bl	800b534 <tcp_write_checks>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800b6d4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d002      	beq.n	800b6e2 <tcp_write+0xba>
    return err;
 800b6dc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b6e0:	e2fb      	b.n	800bcda <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b6e8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	f000 80f6 	beq.w	800b8e8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b700:	653b      	str	r3, [r7, #80]	; 0x50
 800b702:	e002      	b.n	800b70a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800b704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b70a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d1f8      	bne.n	800b704 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b714:	7a9b      	ldrb	r3, [r3, #10]
 800b716:	009b      	lsls	r3, r3, #2
 800b718:	b29b      	uxth	r3, r3
 800b71a:	f003 0304 	and.w	r3, r3, #4
 800b71e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b720:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b724:	891b      	ldrh	r3, [r3, #8]
 800b726:	4619      	mov	r1, r3
 800b728:	8c3b      	ldrh	r3, [r7, #32]
 800b72a:	440b      	add	r3, r1
 800b72c:	429a      	cmp	r2, r3
 800b72e:	da06      	bge.n	800b73e <tcp_write+0x116>
 800b730:	4b74      	ldr	r3, [pc, #464]	; (800b904 <tcp_write+0x2dc>)
 800b732:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b736:	4977      	ldr	r1, [pc, #476]	; (800b914 <tcp_write+0x2ec>)
 800b738:	4874      	ldr	r0, [pc, #464]	; (800b90c <tcp_write+0x2e4>)
 800b73a:	f004 fafb 	bl	800fd34 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b73e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b740:	891a      	ldrh	r2, [r3, #8]
 800b742:	8c3b      	ldrh	r3, [r7, #32]
 800b744:	4413      	add	r3, r2
 800b746:	b29b      	uxth	r3, r3
 800b748:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b74a:	1ad3      	subs	r3, r2, r3
 800b74c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b754:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800b756:	8a7b      	ldrh	r3, [r7, #18]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d026      	beq.n	800b7aa <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b75c:	8a7b      	ldrh	r3, [r7, #18]
 800b75e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b760:	429a      	cmp	r2, r3
 800b762:	d206      	bcs.n	800b772 <tcp_write+0x14a>
 800b764:	4b67      	ldr	r3, [pc, #412]	; (800b904 <tcp_write+0x2dc>)
 800b766:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800b76a:	496b      	ldr	r1, [pc, #428]	; (800b918 <tcp_write+0x2f0>)
 800b76c:	4867      	ldr	r0, [pc, #412]	; (800b90c <tcp_write+0x2e4>)
 800b76e:	f004 fae1 	bl	800fd34 <iprintf>
      seg = last_unsent;
 800b772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b774:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b776:	8a7b      	ldrh	r3, [r7, #18]
 800b778:	88fa      	ldrh	r2, [r7, #6]
 800b77a:	4293      	cmp	r3, r2
 800b77c:	bf28      	it	cs
 800b77e:	4613      	movcs	r3, r2
 800b780:	b29b      	uxth	r3, r3
 800b782:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b784:	4293      	cmp	r3, r2
 800b786:	bf28      	it	cs
 800b788:	4613      	movcs	r3, r2
 800b78a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800b78c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b790:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b792:	4413      	add	r3, r2
 800b794:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800b798:	8a7a      	ldrh	r2, [r7, #18]
 800b79a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b79c:	1ad3      	subs	r3, r2, r3
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800b7a2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b7a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b7a6:	1ad3      	subs	r3, r2, r3
 800b7a8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b7aa:	8a7b      	ldrh	r3, [r7, #18]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d00b      	beq.n	800b7c8 <tcp_write+0x1a0>
 800b7b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b7b4:	88fb      	ldrh	r3, [r7, #6]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d006      	beq.n	800b7c8 <tcp_write+0x1a0>
 800b7ba:	4b52      	ldr	r3, [pc, #328]	; (800b904 <tcp_write+0x2dc>)
 800b7bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7c0:	4956      	ldr	r1, [pc, #344]	; (800b91c <tcp_write+0x2f4>)
 800b7c2:	4852      	ldr	r0, [pc, #328]	; (800b90c <tcp_write+0x2e4>)
 800b7c4:	f004 fab6 	bl	800fd34 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b7c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b7cc:	88fb      	ldrh	r3, [r7, #6]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	f080 8167 	bcs.w	800baa2 <tcp_write+0x47a>
 800b7d4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	f000 8163 	beq.w	800baa2 <tcp_write+0x47a>
 800b7dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7de:	891b      	ldrh	r3, [r3, #8]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f000 815e 	beq.w	800baa2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b7e6:	88fa      	ldrh	r2, [r7, #6]
 800b7e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b7ec:	1ad2      	subs	r2, r2, r3
 800b7ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	bfa8      	it	ge
 800b7f4:	4613      	movge	r3, r2
 800b7f6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800b7f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7fa:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b7fc:	797b      	ldrb	r3, [r7, #5]
 800b7fe:	f003 0301 	and.w	r3, r3, #1
 800b802:	2b00      	cmp	r3, #0
 800b804:	d027      	beq.n	800b856 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b806:	f107 0012 	add.w	r0, r7, #18
 800b80a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b80c:	8bf9      	ldrh	r1, [r7, #30]
 800b80e:	2301      	movs	r3, #1
 800b810:	9302      	str	r3, [sp, #8]
 800b812:	797b      	ldrb	r3, [r7, #5]
 800b814:	9301      	str	r3, [sp, #4]
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	9300      	str	r3, [sp, #0]
 800b81a:	4603      	mov	r3, r0
 800b81c:	2000      	movs	r0, #0
 800b81e:	f7ff fe0f 	bl	800b440 <tcp_pbuf_prealloc>
 800b822:	6578      	str	r0, [r7, #84]	; 0x54
 800b824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b826:	2b00      	cmp	r3, #0
 800b828:	f000 8225 	beq.w	800bc76 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b82c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b82e:	6858      	ldr	r0, [r3, #4]
 800b830:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b834:	68ba      	ldr	r2, [r7, #8]
 800b836:	4413      	add	r3, r2
 800b838:	8bfa      	ldrh	r2, [r7, #30]
 800b83a:	4619      	mov	r1, r3
 800b83c:	f004 fa4a 	bl	800fcd4 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800b840:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b842:	f7fb f959 	bl	8006af8 <pbuf_clen>
 800b846:	4603      	mov	r3, r0
 800b848:	461a      	mov	r2, r3
 800b84a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b84e:	4413      	add	r3, r2
 800b850:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b854:	e041      	b.n	800b8da <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	637b      	str	r3, [r7, #52]	; 0x34
 800b85c:	e002      	b.n	800b864 <tcp_write+0x23c>
 800b85e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	637b      	str	r3, [r7, #52]	; 0x34
 800b864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d1f8      	bne.n	800b85e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b86c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b86e:	7b1b      	ldrb	r3, [r3, #12]
 800b870:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b874:	2b00      	cmp	r3, #0
 800b876:	d115      	bne.n	800b8a4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b87e:	8952      	ldrh	r2, [r2, #10]
 800b880:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b882:	68ba      	ldr	r2, [r7, #8]
 800b884:	429a      	cmp	r2, r3
 800b886:	d10d      	bne.n	800b8a4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b888:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d006      	beq.n	800b89e <tcp_write+0x276>
 800b890:	4b1c      	ldr	r3, [pc, #112]	; (800b904 <tcp_write+0x2dc>)
 800b892:	f240 2231 	movw	r2, #561	; 0x231
 800b896:	4922      	ldr	r1, [pc, #136]	; (800b920 <tcp_write+0x2f8>)
 800b898:	481c      	ldr	r0, [pc, #112]	; (800b90c <tcp_write+0x2e4>)
 800b89a:	f004 fa4b 	bl	800fd34 <iprintf>
          extendlen = seglen;
 800b89e:	8bfb      	ldrh	r3, [r7, #30]
 800b8a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800b8a2:	e01a      	b.n	800b8da <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b8a4:	8bfb      	ldrh	r3, [r7, #30]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	2000      	movs	r0, #0
 800b8ac:	f7fa fdb8 	bl	8006420 <pbuf_alloc>
 800b8b0:	6578      	str	r0, [r7, #84]	; 0x54
 800b8b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	f000 81e0 	beq.w	800bc7a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800b8ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b8be:	68ba      	ldr	r2, [r7, #8]
 800b8c0:	441a      	add	r2, r3
 800b8c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8c4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800b8c6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b8c8:	f7fb f916 	bl	8006af8 <pbuf_clen>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b8d4:	4413      	add	r3, r2
 800b8d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800b8da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b8de:	8bfb      	ldrh	r3, [r7, #30]
 800b8e0:	4413      	add	r3, r2
 800b8e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b8e6:	e0dc      	b.n	800baa2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	f000 80d7 	beq.w	800baa2 <tcp_write+0x47a>
 800b8f4:	4b03      	ldr	r3, [pc, #12]	; (800b904 <tcp_write+0x2dc>)
 800b8f6:	f240 224a 	movw	r2, #586	; 0x24a
 800b8fa:	490a      	ldr	r1, [pc, #40]	; (800b924 <tcp_write+0x2fc>)
 800b8fc:	4803      	ldr	r0, [pc, #12]	; (800b90c <tcp_write+0x2e4>)
 800b8fe:	f004 fa19 	bl	800fd34 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800b902:	e0ce      	b.n	800baa2 <tcp_write+0x47a>
 800b904:	080128b8 	.word	0x080128b8
 800b908:	08012a58 	.word	0x08012a58
 800b90c:	0801290c 	.word	0x0801290c
 800b910:	08012a70 	.word	0x08012a70
 800b914:	08012aa4 	.word	0x08012aa4
 800b918:	08012abc 	.word	0x08012abc
 800b91c:	08012adc 	.word	0x08012adc
 800b920:	08012afc 	.word	0x08012afc
 800b924:	08012b28 	.word	0x08012b28
    struct pbuf *p;
    u16_t left = len - pos;
 800b928:	88fa      	ldrh	r2, [r7, #6]
 800b92a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b92e:	1ad3      	subs	r3, r2, r3
 800b930:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800b932:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b936:	b29b      	uxth	r3, r3
 800b938:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b93a:	1ad3      	subs	r3, r2, r3
 800b93c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800b93e:	8b7a      	ldrh	r2, [r7, #26]
 800b940:	8bbb      	ldrh	r3, [r7, #28]
 800b942:	4293      	cmp	r3, r2
 800b944:	bf28      	it	cs
 800b946:	4613      	movcs	r3, r2
 800b948:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b94a:	797b      	ldrb	r3, [r7, #5]
 800b94c:	f003 0301 	and.w	r3, r3, #1
 800b950:	2b00      	cmp	r3, #0
 800b952:	d036      	beq.n	800b9c2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b954:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b958:	b29a      	uxth	r2, r3
 800b95a:	8b3b      	ldrh	r3, [r7, #24]
 800b95c:	4413      	add	r3, r2
 800b95e:	b299      	uxth	r1, r3
 800b960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b962:	2b00      	cmp	r3, #0
 800b964:	bf0c      	ite	eq
 800b966:	2301      	moveq	r3, #1
 800b968:	2300      	movne	r3, #0
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	f107 0012 	add.w	r0, r7, #18
 800b970:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b972:	9302      	str	r3, [sp, #8]
 800b974:	797b      	ldrb	r3, [r7, #5]
 800b976:	9301      	str	r3, [sp, #4]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	9300      	str	r3, [sp, #0]
 800b97c:	4603      	mov	r3, r0
 800b97e:	2036      	movs	r0, #54	; 0x36
 800b980:	f7ff fd5e 	bl	800b440 <tcp_pbuf_prealloc>
 800b984:	6338      	str	r0, [r7, #48]	; 0x30
 800b986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b988:	2b00      	cmp	r3, #0
 800b98a:	f000 8178 	beq.w	800bc7e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b990:	895b      	ldrh	r3, [r3, #10]
 800b992:	8b3a      	ldrh	r2, [r7, #24]
 800b994:	429a      	cmp	r2, r3
 800b996:	d906      	bls.n	800b9a6 <tcp_write+0x37e>
 800b998:	4b8c      	ldr	r3, [pc, #560]	; (800bbcc <tcp_write+0x5a4>)
 800b99a:	f240 2266 	movw	r2, #614	; 0x266
 800b99e:	498c      	ldr	r1, [pc, #560]	; (800bbd0 <tcp_write+0x5a8>)
 800b9a0:	488c      	ldr	r0, [pc, #560]	; (800bbd4 <tcp_write+0x5ac>)
 800b9a2:	f004 f9c7 	bl	800fd34 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800b9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a8:	685a      	ldr	r2, [r3, #4]
 800b9aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b9ae:	18d0      	adds	r0, r2, r3
 800b9b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b9b4:	68ba      	ldr	r2, [r7, #8]
 800b9b6:	4413      	add	r3, r2
 800b9b8:	8b3a      	ldrh	r2, [r7, #24]
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	f004 f98a 	bl	800fcd4 <memcpy>
 800b9c0:	e02f      	b.n	800ba22 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b9c2:	8a7b      	ldrh	r3, [r7, #18]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d006      	beq.n	800b9d6 <tcp_write+0x3ae>
 800b9c8:	4b80      	ldr	r3, [pc, #512]	; (800bbcc <tcp_write+0x5a4>)
 800b9ca:	f240 2271 	movw	r2, #625	; 0x271
 800b9ce:	4982      	ldr	r1, [pc, #520]	; (800bbd8 <tcp_write+0x5b0>)
 800b9d0:	4880      	ldr	r0, [pc, #512]	; (800bbd4 <tcp_write+0x5ac>)
 800b9d2:	f004 f9af 	bl	800fd34 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b9d6:	8b3b      	ldrh	r3, [r7, #24]
 800b9d8:	2201      	movs	r2, #1
 800b9da:	4619      	mov	r1, r3
 800b9dc:	2036      	movs	r0, #54	; 0x36
 800b9de:	f7fa fd1f 	bl	8006420 <pbuf_alloc>
 800b9e2:	6178      	str	r0, [r7, #20]
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f000 814b 	beq.w	800bc82 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b9ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b9f0:	68ba      	ldr	r2, [r7, #8]
 800b9f2:	441a      	add	r2, r3
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b9f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ba02:	4619      	mov	r1, r3
 800ba04:	2036      	movs	r0, #54	; 0x36
 800ba06:	f7fa fd0b 	bl	8006420 <pbuf_alloc>
 800ba0a:	6338      	str	r0, [r7, #48]	; 0x30
 800ba0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d103      	bne.n	800ba1a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800ba12:	6978      	ldr	r0, [r7, #20]
 800ba14:	f7fa ffe8 	bl	80069e8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800ba18:	e136      	b.n	800bc88 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800ba1a:	6979      	ldr	r1, [r7, #20]
 800ba1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba1e:	f7fb f8a5 	bl	8006b6c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800ba22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba24:	f7fb f868 	bl	8006af8 <pbuf_clen>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ba30:	4413      	add	r3, r2
 800ba32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800ba36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ba3a:	2b09      	cmp	r3, #9
 800ba3c:	d903      	bls.n	800ba46 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800ba3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba40:	f7fa ffd2 	bl	80069e8 <pbuf_free>
      goto memerr;
 800ba44:	e120      	b.n	800bc88 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ba4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ba4e:	441a      	add	r2, r3
 800ba50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba54:	9300      	str	r3, [sp, #0]
 800ba56:	4613      	mov	r3, r2
 800ba58:	2200      	movs	r2, #0
 800ba5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba5c:	68f8      	ldr	r0, [r7, #12]
 800ba5e:	f7ff fc51 	bl	800b304 <tcp_create_segment>
 800ba62:	64f8      	str	r0, [r7, #76]	; 0x4c
 800ba64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	f000 810d 	beq.w	800bc86 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800ba6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d102      	bne.n	800ba78 <tcp_write+0x450>
      queue = seg;
 800ba72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba74:	647b      	str	r3, [r7, #68]	; 0x44
 800ba76:	e00c      	b.n	800ba92 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800ba78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d106      	bne.n	800ba8c <tcp_write+0x464>
 800ba7e:	4b53      	ldr	r3, [pc, #332]	; (800bbcc <tcp_write+0x5a4>)
 800ba80:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ba84:	4955      	ldr	r1, [pc, #340]	; (800bbdc <tcp_write+0x5b4>)
 800ba86:	4853      	ldr	r0, [pc, #332]	; (800bbd4 <tcp_write+0x5ac>)
 800ba88:	f004 f954 	bl	800fd34 <iprintf>
      prev_seg->next = seg;
 800ba8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba90:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800ba92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba94:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800ba96:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ba9a:	8b3b      	ldrh	r3, [r7, #24]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800baa2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800baa6:	88fb      	ldrh	r3, [r7, #6]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	f4ff af3d 	bcc.w	800b928 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800baae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d02c      	beq.n	800bb0e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800bab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800baba:	e01e      	b.n	800bafa <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800babc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babe:	891a      	ldrh	r2, [r3, #8]
 800bac0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bac2:	4413      	add	r3, r2
 800bac4:	b29a      	uxth	r2, r3
 800bac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800baca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d110      	bne.n	800baf4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800bad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad4:	685b      	ldr	r3, [r3, #4]
 800bad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bad8:	8952      	ldrh	r2, [r2, #10]
 800bada:	4413      	add	r3, r2
 800badc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800bade:	68b9      	ldr	r1, [r7, #8]
 800bae0:	4618      	mov	r0, r3
 800bae2:	f004 f8f7 	bl	800fcd4 <memcpy>
        p->len += oversize_used;
 800bae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae8:	895a      	ldrh	r2, [r3, #10]
 800baea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800baec:	4413      	add	r3, r2
 800baee:	b29a      	uxth	r2, r3
 800baf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800baf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d1dd      	bne.n	800babc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800bb00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb02:	891a      	ldrh	r2, [r3, #8]
 800bb04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bb06:	4413      	add	r3, r2
 800bb08:	b29a      	uxth	r2, r3
 800bb0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb0c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800bb0e:	8a7a      	ldrh	r2, [r7, #18]
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800bb16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d018      	beq.n	800bb4e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800bb1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d106      	bne.n	800bb30 <tcp_write+0x508>
 800bb22:	4b2a      	ldr	r3, [pc, #168]	; (800bbcc <tcp_write+0x5a4>)
 800bb24:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800bb28:	492d      	ldr	r1, [pc, #180]	; (800bbe0 <tcp_write+0x5b8>)
 800bb2a:	482a      	ldr	r0, [pc, #168]	; (800bbd4 <tcp_write+0x5ac>)
 800bb2c:	f004 f902 	bl	800fd34 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800bb30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7fb f818 	bl	8006b6c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800bb3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb3e:	891a      	ldrh	r2, [r3, #8]
 800bb40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb42:	891b      	ldrh	r3, [r3, #8]
 800bb44:	4413      	add	r3, r2
 800bb46:	b29a      	uxth	r2, r3
 800bb48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb4a:	811a      	strh	r2, [r3, #8]
 800bb4c:	e037      	b.n	800bbbe <tcp_write+0x596>
  } else if (extendlen > 0) {
 800bb4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d034      	beq.n	800bbbe <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800bb54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d003      	beq.n	800bb62 <tcp_write+0x53a>
 800bb5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d106      	bne.n	800bb70 <tcp_write+0x548>
 800bb62:	4b1a      	ldr	r3, [pc, #104]	; (800bbcc <tcp_write+0x5a4>)
 800bb64:	f240 22e6 	movw	r2, #742	; 0x2e6
 800bb68:	491e      	ldr	r1, [pc, #120]	; (800bbe4 <tcp_write+0x5bc>)
 800bb6a:	481a      	ldr	r0, [pc, #104]	; (800bbd4 <tcp_write+0x5ac>)
 800bb6c:	f004 f8e2 	bl	800fd34 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800bb70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb76:	e009      	b.n	800bb8c <tcp_write+0x564>
      p->tot_len += extendlen;
 800bb78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb7a:	891a      	ldrh	r2, [r3, #8]
 800bb7c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bb7e:	4413      	add	r3, r2
 800bb80:	b29a      	uxth	r2, r3
 800bb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb84:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800bb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d1f1      	bne.n	800bb78 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800bb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb96:	891a      	ldrh	r2, [r3, #8]
 800bb98:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bb9a:	4413      	add	r3, r2
 800bb9c:	b29a      	uxth	r2, r3
 800bb9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800bba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba4:	895a      	ldrh	r2, [r3, #10]
 800bba6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bba8:	4413      	add	r3, r2
 800bbaa:	b29a      	uxth	r2, r3
 800bbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbae:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800bbb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbb2:	891a      	ldrh	r2, [r3, #8]
 800bbb4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bbb6:	4413      	add	r3, r2
 800bbb8:	b29a      	uxth	r2, r3
 800bbba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbbc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800bbbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d111      	bne.n	800bbe8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbc8:	66da      	str	r2, [r3, #108]	; 0x6c
 800bbca:	e010      	b.n	800bbee <tcp_write+0x5c6>
 800bbcc:	080128b8 	.word	0x080128b8
 800bbd0:	08012b58 	.word	0x08012b58
 800bbd4:	0801290c 	.word	0x0801290c
 800bbd8:	08012b98 	.word	0x08012b98
 800bbdc:	08012ba8 	.word	0x08012ba8
 800bbe0:	08012bbc 	.word	0x08012bbc
 800bbe4:	08012bf4 	.word	0x08012bf4
  } else {
    last_unsent->next = queue;
 800bbe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbec:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bbf2:	88fb      	ldrh	r3, [r7, #6]
 800bbf4:	441a      	add	r2, r3
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800bc00:	88fb      	ldrh	r3, [r7, #6]
 800bc02:	1ad3      	subs	r3, r2, r3
 800bc04:	b29a      	uxth	r2, r3
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800bc12:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d00e      	beq.n	800bc3e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d10a      	bne.n	800bc3e <tcp_write+0x616>
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d106      	bne.n	800bc3e <tcp_write+0x616>
 800bc30:	4b2c      	ldr	r3, [pc, #176]	; (800bce4 <tcp_write+0x6bc>)
 800bc32:	f240 3212 	movw	r2, #786	; 0x312
 800bc36:	492c      	ldr	r1, [pc, #176]	; (800bce8 <tcp_write+0x6c0>)
 800bc38:	482c      	ldr	r0, [pc, #176]	; (800bcec <tcp_write+0x6c4>)
 800bc3a:	f004 f87b 	bl	800fd34 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800bc3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d016      	beq.n	800bc72 <tcp_write+0x64a>
 800bc44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d012      	beq.n	800bc72 <tcp_write+0x64a>
 800bc4c:	797b      	ldrb	r3, [r7, #5]
 800bc4e:	f003 0302 	and.w	r3, r3, #2
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d10d      	bne.n	800bc72 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800bc56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc58:	68db      	ldr	r3, [r3, #12]
 800bc5a:	899b      	ldrh	r3, [r3, #12]
 800bc5c:	b29c      	uxth	r4, r3
 800bc5e:	2008      	movs	r0, #8
 800bc60:	f7f9 fc0e 	bl	8005480 <lwip_htons>
 800bc64:	4603      	mov	r3, r0
 800bc66:	461a      	mov	r2, r3
 800bc68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc6a:	68db      	ldr	r3, [r3, #12]
 800bc6c:	4322      	orrs	r2, r4
 800bc6e:	b292      	uxth	r2, r2
 800bc70:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800bc72:	2300      	movs	r3, #0
 800bc74:	e031      	b.n	800bcda <tcp_write+0x6b2>
          goto memerr;
 800bc76:	bf00      	nop
 800bc78:	e006      	b.n	800bc88 <tcp_write+0x660>
            goto memerr;
 800bc7a:	bf00      	nop
 800bc7c:	e004      	b.n	800bc88 <tcp_write+0x660>
        goto memerr;
 800bc7e:	bf00      	nop
 800bc80:	e002      	b.n	800bc88 <tcp_write+0x660>
        goto memerr;
 800bc82:	bf00      	nop
 800bc84:	e000      	b.n	800bc88 <tcp_write+0x660>
      goto memerr;
 800bc86:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	8b5b      	ldrh	r3, [r3, #26]
 800bc8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc90:	b29a      	uxth	r2, r3
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800bc96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d002      	beq.n	800bca2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800bc9c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bc9e:	f7fa fea3 	bl	80069e8 <pbuf_free>
  }
  if (queue != NULL) {
 800bca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d002      	beq.n	800bcae <tcp_write+0x686>
    tcp_segs_free(queue);
 800bca8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bcaa:	f7fc fb57 	bl	800835c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d00e      	beq.n	800bcd6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d10a      	bne.n	800bcd6 <tcp_write+0x6ae>
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d106      	bne.n	800bcd6 <tcp_write+0x6ae>
 800bcc8:	4b06      	ldr	r3, [pc, #24]	; (800bce4 <tcp_write+0x6bc>)
 800bcca:	f240 3227 	movw	r2, #807	; 0x327
 800bcce:	4906      	ldr	r1, [pc, #24]	; (800bce8 <tcp_write+0x6c0>)
 800bcd0:	4806      	ldr	r0, [pc, #24]	; (800bcec <tcp_write+0x6c4>)
 800bcd2:	f004 f82f 	bl	800fd34 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800bcd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	375c      	adds	r7, #92	; 0x5c
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd90      	pop	{r4, r7, pc}
 800bce2:	bf00      	nop
 800bce4:	080128b8 	.word	0x080128b8
 800bce8:	08012c2c 	.word	0x08012c2c
 800bcec:	0801290c 	.word	0x0801290c

0800bcf0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800bcf0:	b590      	push	{r4, r7, lr}
 800bcf2:	b08b      	sub	sp, #44	; 0x2c
 800bcf4:	af02      	add	r7, sp, #8
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	61fb      	str	r3, [r7, #28]
 800bd00:	2300      	movs	r3, #0
 800bd02:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800bd04:	2300      	movs	r3, #0
 800bd06:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d106      	bne.n	800bd1c <tcp_split_unsent_seg+0x2c>
 800bd0e:	4b95      	ldr	r3, [pc, #596]	; (800bf64 <tcp_split_unsent_seg+0x274>)
 800bd10:	f240 324b 	movw	r2, #843	; 0x34b
 800bd14:	4994      	ldr	r1, [pc, #592]	; (800bf68 <tcp_split_unsent_seg+0x278>)
 800bd16:	4895      	ldr	r0, [pc, #596]	; (800bf6c <tcp_split_unsent_seg+0x27c>)
 800bd18:	f004 f80c 	bl	800fd34 <iprintf>

  useg = pcb->unsent;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd20:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d102      	bne.n	800bd2e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800bd28:	f04f 33ff 	mov.w	r3, #4294967295
 800bd2c:	e116      	b.n	800bf5c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800bd2e:	887b      	ldrh	r3, [r7, #2]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d109      	bne.n	800bd48 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800bd34:	4b8b      	ldr	r3, [pc, #556]	; (800bf64 <tcp_split_unsent_seg+0x274>)
 800bd36:	f240 3253 	movw	r2, #851	; 0x353
 800bd3a:	498d      	ldr	r1, [pc, #564]	; (800bf70 <tcp_split_unsent_seg+0x280>)
 800bd3c:	488b      	ldr	r0, [pc, #556]	; (800bf6c <tcp_split_unsent_seg+0x27c>)
 800bd3e:	f003 fff9 	bl	800fd34 <iprintf>
    return ERR_VAL;
 800bd42:	f06f 0305 	mvn.w	r3, #5
 800bd46:	e109      	b.n	800bf5c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	891b      	ldrh	r3, [r3, #8]
 800bd4c:	887a      	ldrh	r2, [r7, #2]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d301      	bcc.n	800bd56 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800bd52:	2300      	movs	r3, #0
 800bd54:	e102      	b.n	800bf5c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd5a:	887a      	ldrh	r2, [r7, #2]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d906      	bls.n	800bd6e <tcp_split_unsent_seg+0x7e>
 800bd60:	4b80      	ldr	r3, [pc, #512]	; (800bf64 <tcp_split_unsent_seg+0x274>)
 800bd62:	f240 325b 	movw	r2, #859	; 0x35b
 800bd66:	4983      	ldr	r1, [pc, #524]	; (800bf74 <tcp_split_unsent_seg+0x284>)
 800bd68:	4880      	ldr	r0, [pc, #512]	; (800bf6c <tcp_split_unsent_seg+0x27c>)
 800bd6a:	f003 ffe3 	bl	800fd34 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	891b      	ldrh	r3, [r3, #8]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d106      	bne.n	800bd84 <tcp_split_unsent_seg+0x94>
 800bd76:	4b7b      	ldr	r3, [pc, #492]	; (800bf64 <tcp_split_unsent_seg+0x274>)
 800bd78:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800bd7c:	497e      	ldr	r1, [pc, #504]	; (800bf78 <tcp_split_unsent_seg+0x288>)
 800bd7e:	487b      	ldr	r0, [pc, #492]	; (800bf6c <tcp_split_unsent_seg+0x27c>)
 800bd80:	f003 ffd8 	bl	800fd34 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	7a9b      	ldrb	r3, [r3, #10]
 800bd88:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800bd8a:	7bfb      	ldrb	r3, [r7, #15]
 800bd8c:	009b      	lsls	r3, r3, #2
 800bd8e:	b2db      	uxtb	r3, r3
 800bd90:	f003 0304 	and.w	r3, r3, #4
 800bd94:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	891a      	ldrh	r2, [r3, #8]
 800bd9a:	887b      	ldrh	r3, [r7, #2]
 800bd9c:	1ad3      	subs	r3, r2, r3
 800bd9e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800bda0:	7bbb      	ldrb	r3, [r7, #14]
 800bda2:	b29a      	uxth	r2, r3
 800bda4:	89bb      	ldrh	r3, [r7, #12]
 800bda6:	4413      	add	r3, r2
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bdae:	4619      	mov	r1, r3
 800bdb0:	2036      	movs	r0, #54	; 0x36
 800bdb2:	f7fa fb35 	bl	8006420 <pbuf_alloc>
 800bdb6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	f000 80b7 	beq.w	800bf2e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	891a      	ldrh	r2, [r3, #8]
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	891b      	ldrh	r3, [r3, #8]
 800bdca:	1ad3      	subs	r3, r2, r3
 800bdcc:	b29a      	uxth	r2, r3
 800bdce:	887b      	ldrh	r3, [r7, #2]
 800bdd0:	4413      	add	r3, r2
 800bdd2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	6858      	ldr	r0, [r3, #4]
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	685a      	ldr	r2, [r3, #4]
 800bddc:	7bbb      	ldrb	r3, [r7, #14]
 800bdde:	18d1      	adds	r1, r2, r3
 800bde0:	897b      	ldrh	r3, [r7, #10]
 800bde2:	89ba      	ldrh	r2, [r7, #12]
 800bde4:	f7fa fffa 	bl	8006ddc <pbuf_copy_partial>
 800bde8:	4603      	mov	r3, r0
 800bdea:	461a      	mov	r2, r3
 800bdec:	89bb      	ldrh	r3, [r7, #12]
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	f040 809f 	bne.w	800bf32 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	899b      	ldrh	r3, [r3, #12]
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f7f9 fb3f 	bl	8005480 <lwip_htons>
 800be02:	4603      	mov	r3, r0
 800be04:	b2db      	uxtb	r3, r3
 800be06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be0a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800be0c:	2300      	movs	r3, #0
 800be0e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800be10:	7efb      	ldrb	r3, [r7, #27]
 800be12:	f003 0308 	and.w	r3, r3, #8
 800be16:	2b00      	cmp	r3, #0
 800be18:	d007      	beq.n	800be2a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800be1a:	7efb      	ldrb	r3, [r7, #27]
 800be1c:	f023 0308 	bic.w	r3, r3, #8
 800be20:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800be22:	7ebb      	ldrb	r3, [r7, #26]
 800be24:	f043 0308 	orr.w	r3, r3, #8
 800be28:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800be2a:	7efb      	ldrb	r3, [r7, #27]
 800be2c:	f003 0301 	and.w	r3, r3, #1
 800be30:	2b00      	cmp	r3, #0
 800be32:	d007      	beq.n	800be44 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800be34:	7efb      	ldrb	r3, [r7, #27]
 800be36:	f023 0301 	bic.w	r3, r3, #1
 800be3a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800be3c:	7ebb      	ldrb	r3, [r7, #26]
 800be3e:	f043 0301 	orr.w	r3, r3, #1
 800be42:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	68db      	ldr	r3, [r3, #12]
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7f9 fb2d 	bl	80054aa <lwip_htonl>
 800be50:	4602      	mov	r2, r0
 800be52:	887b      	ldrh	r3, [r7, #2]
 800be54:	18d1      	adds	r1, r2, r3
 800be56:	7eba      	ldrb	r2, [r7, #26]
 800be58:	7bfb      	ldrb	r3, [r7, #15]
 800be5a:	9300      	str	r3, [sp, #0]
 800be5c:	460b      	mov	r3, r1
 800be5e:	6939      	ldr	r1, [r7, #16]
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f7ff fa4f 	bl	800b304 <tcp_create_segment>
 800be66:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d063      	beq.n	800bf36 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	4618      	mov	r0, r3
 800be74:	f7fa fe40 	bl	8006af8 <pbuf_clen>
 800be78:	4603      	mov	r3, r0
 800be7a:	461a      	mov	r2, r3
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800be82:	1a9b      	subs	r3, r3, r2
 800be84:	b29a      	uxth	r2, r3
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	6858      	ldr	r0, [r3, #4]
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	891a      	ldrh	r2, [r3, #8]
 800be96:	89bb      	ldrh	r3, [r7, #12]
 800be98:	1ad3      	subs	r3, r2, r3
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	4619      	mov	r1, r3
 800be9e:	f7fa fc1d 	bl	80066dc <pbuf_realloc>
  useg->len -= remainder;
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	891a      	ldrh	r2, [r3, #8]
 800bea6:	89bb      	ldrh	r3, [r7, #12]
 800bea8:	1ad3      	subs	r3, r2, r3
 800beaa:	b29a      	uxth	r2, r3
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	68db      	ldr	r3, [r3, #12]
 800beb4:	899b      	ldrh	r3, [r3, #12]
 800beb6:	b29c      	uxth	r4, r3
 800beb8:	7efb      	ldrb	r3, [r7, #27]
 800beba:	b29b      	uxth	r3, r3
 800bebc:	4618      	mov	r0, r3
 800bebe:	f7f9 fadf 	bl	8005480 <lwip_htons>
 800bec2:	4603      	mov	r3, r0
 800bec4:	461a      	mov	r2, r3
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	68db      	ldr	r3, [r3, #12]
 800beca:	4322      	orrs	r2, r4
 800becc:	b292      	uxth	r2, r2
 800bece:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7fa fe0f 	bl	8006af8 <pbuf_clen>
 800beda:	4603      	mov	r3, r0
 800bedc:	461a      	mov	r2, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bee4:	4413      	add	r3, r2
 800bee6:	b29a      	uxth	r2, r3
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800beee:	69fb      	ldr	r3, [r7, #28]
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7fa fe00 	bl	8006af8 <pbuf_clen>
 800bef8:	4603      	mov	r3, r0
 800befa:	461a      	mov	r2, r3
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bf02:	4413      	add	r3, r2
 800bf04:	b29a      	uxth	r2, r3
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	69fb      	ldr	r3, [r7, #28]
 800bf12:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	69fa      	ldr	r2, [r7, #28]
 800bf18:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800bf1a:	69fb      	ldr	r3, [r7, #28]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d103      	bne.n	800bf2a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2200      	movs	r2, #0
 800bf26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	e016      	b.n	800bf5c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800bf2e:	bf00      	nop
 800bf30:	e002      	b.n	800bf38 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800bf32:	bf00      	nop
 800bf34:	e000      	b.n	800bf38 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800bf36:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800bf38:	69fb      	ldr	r3, [r7, #28]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d006      	beq.n	800bf4c <tcp_split_unsent_seg+0x25c>
 800bf3e:	4b09      	ldr	r3, [pc, #36]	; (800bf64 <tcp_split_unsent_seg+0x274>)
 800bf40:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800bf44:	490d      	ldr	r1, [pc, #52]	; (800bf7c <tcp_split_unsent_seg+0x28c>)
 800bf46:	4809      	ldr	r0, [pc, #36]	; (800bf6c <tcp_split_unsent_seg+0x27c>)
 800bf48:	f003 fef4 	bl	800fd34 <iprintf>
  if (p != NULL) {
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d002      	beq.n	800bf58 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800bf52:	6938      	ldr	r0, [r7, #16]
 800bf54:	f7fa fd48 	bl	80069e8 <pbuf_free>
  }

  return ERR_MEM;
 800bf58:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3724      	adds	r7, #36	; 0x24
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd90      	pop	{r4, r7, pc}
 800bf64:	080128b8 	.word	0x080128b8
 800bf68:	08012c4c 	.word	0x08012c4c
 800bf6c:	0801290c 	.word	0x0801290c
 800bf70:	08012c70 	.word	0x08012c70
 800bf74:	08012c94 	.word	0x08012c94
 800bf78:	08012ca4 	.word	0x08012ca4
 800bf7c:	08012cb4 	.word	0x08012cb4

0800bf80 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800bf80:	b590      	push	{r4, r7, lr}
 800bf82:	b085      	sub	sp, #20
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d106      	bne.n	800bf9c <tcp_send_fin+0x1c>
 800bf8e:	4b21      	ldr	r3, [pc, #132]	; (800c014 <tcp_send_fin+0x94>)
 800bf90:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800bf94:	4920      	ldr	r1, [pc, #128]	; (800c018 <tcp_send_fin+0x98>)
 800bf96:	4821      	ldr	r0, [pc, #132]	; (800c01c <tcp_send_fin+0x9c>)
 800bf98:	f003 fecc 	bl	800fd34 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d02e      	beq.n	800c002 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfa8:	60fb      	str	r3, [r7, #12]
 800bfaa:	e002      	b.n	800bfb2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d1f8      	bne.n	800bfac <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	68db      	ldr	r3, [r3, #12]
 800bfbe:	899b      	ldrh	r3, [r3, #12]
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7f9 fa5c 	bl	8005480 <lwip_htons>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	b2db      	uxtb	r3, r3
 800bfcc:	f003 0307 	and.w	r3, r3, #7
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d116      	bne.n	800c002 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	68db      	ldr	r3, [r3, #12]
 800bfd8:	899b      	ldrh	r3, [r3, #12]
 800bfda:	b29c      	uxth	r4, r3
 800bfdc:	2001      	movs	r0, #1
 800bfde:	f7f9 fa4f 	bl	8005480 <lwip_htons>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	4322      	orrs	r2, r4
 800bfec:	b292      	uxth	r2, r2
 800bfee:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	8b5b      	ldrh	r3, [r3, #26]
 800bff4:	f043 0320 	orr.w	r3, r3, #32
 800bff8:	b29a      	uxth	r2, r3
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800bffe:	2300      	movs	r3, #0
 800c000:	e004      	b.n	800c00c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c002:	2101      	movs	r1, #1
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 f80b 	bl	800c020 <tcp_enqueue_flags>
 800c00a:	4603      	mov	r3, r0
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3714      	adds	r7, #20
 800c010:	46bd      	mov	sp, r7
 800c012:	bd90      	pop	{r4, r7, pc}
 800c014:	080128b8 	.word	0x080128b8
 800c018:	08012cc0 	.word	0x08012cc0
 800c01c:	0801290c 	.word	0x0801290c

0800c020 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b08a      	sub	sp, #40	; 0x28
 800c024:	af02      	add	r7, sp, #8
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	460b      	mov	r3, r1
 800c02a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c02c:	2300      	movs	r3, #0
 800c02e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c030:	2300      	movs	r3, #0
 800c032:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c034:	78fb      	ldrb	r3, [r7, #3]
 800c036:	f003 0303 	and.w	r3, r3, #3
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d106      	bne.n	800c04c <tcp_enqueue_flags+0x2c>
 800c03e:	4b67      	ldr	r3, [pc, #412]	; (800c1dc <tcp_enqueue_flags+0x1bc>)
 800c040:	f240 4211 	movw	r2, #1041	; 0x411
 800c044:	4966      	ldr	r1, [pc, #408]	; (800c1e0 <tcp_enqueue_flags+0x1c0>)
 800c046:	4867      	ldr	r0, [pc, #412]	; (800c1e4 <tcp_enqueue_flags+0x1c4>)
 800c048:	f003 fe74 	bl	800fd34 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d106      	bne.n	800c060 <tcp_enqueue_flags+0x40>
 800c052:	4b62      	ldr	r3, [pc, #392]	; (800c1dc <tcp_enqueue_flags+0x1bc>)
 800c054:	f240 4213 	movw	r2, #1043	; 0x413
 800c058:	4963      	ldr	r1, [pc, #396]	; (800c1e8 <tcp_enqueue_flags+0x1c8>)
 800c05a:	4862      	ldr	r0, [pc, #392]	; (800c1e4 <tcp_enqueue_flags+0x1c4>)
 800c05c:	f003 fe6a 	bl	800fd34 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c060:	78fb      	ldrb	r3, [r7, #3]
 800c062:	f003 0302 	and.w	r3, r3, #2
 800c066:	2b00      	cmp	r3, #0
 800c068:	d001      	beq.n	800c06e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c06a:	2301      	movs	r3, #1
 800c06c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c06e:	7ffb      	ldrb	r3, [r7, #31]
 800c070:	009b      	lsls	r3, r3, #2
 800c072:	b2db      	uxtb	r3, r3
 800c074:	f003 0304 	and.w	r3, r3, #4
 800c078:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c07a:	7dfb      	ldrb	r3, [r7, #23]
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c082:	4619      	mov	r1, r3
 800c084:	2036      	movs	r0, #54	; 0x36
 800c086:	f7fa f9cb 	bl	8006420 <pbuf_alloc>
 800c08a:	6138      	str	r0, [r7, #16]
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d109      	bne.n	800c0a6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	8b5b      	ldrh	r3, [r3, #26]
 800c096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c09a:	b29a      	uxth	r2, r3
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c0a0:	f04f 33ff 	mov.w	r3, #4294967295
 800c0a4:	e095      	b.n	800c1d2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	895a      	ldrh	r2, [r3, #10]
 800c0aa:	7dfb      	ldrb	r3, [r7, #23]
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d206      	bcs.n	800c0c0 <tcp_enqueue_flags+0xa0>
 800c0b2:	4b4a      	ldr	r3, [pc, #296]	; (800c1dc <tcp_enqueue_flags+0x1bc>)
 800c0b4:	f240 4239 	movw	r2, #1081	; 0x439
 800c0b8:	494c      	ldr	r1, [pc, #304]	; (800c1ec <tcp_enqueue_flags+0x1cc>)
 800c0ba:	484a      	ldr	r0, [pc, #296]	; (800c1e4 <tcp_enqueue_flags+0x1c4>)
 800c0bc:	f003 fe3a 	bl	800fd34 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800c0c4:	78fa      	ldrb	r2, [r7, #3]
 800c0c6:	7ffb      	ldrb	r3, [r7, #31]
 800c0c8:	9300      	str	r3, [sp, #0]
 800c0ca:	460b      	mov	r3, r1
 800c0cc:	6939      	ldr	r1, [r7, #16]
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f7ff f918 	bl	800b304 <tcp_create_segment>
 800c0d4:	60f8      	str	r0, [r7, #12]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d109      	bne.n	800c0f0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	8b5b      	ldrh	r3, [r3, #26]
 800c0e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0e4:	b29a      	uxth	r2, r3
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c0ea:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ee:	e070      	b.n	800c1d2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	f003 0303 	and.w	r3, r3, #3
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d006      	beq.n	800c10a <tcp_enqueue_flags+0xea>
 800c0fc:	4b37      	ldr	r3, [pc, #220]	; (800c1dc <tcp_enqueue_flags+0x1bc>)
 800c0fe:	f240 4242 	movw	r2, #1090	; 0x442
 800c102:	493b      	ldr	r1, [pc, #236]	; (800c1f0 <tcp_enqueue_flags+0x1d0>)
 800c104:	4837      	ldr	r0, [pc, #220]	; (800c1e4 <tcp_enqueue_flags+0x1c4>)
 800c106:	f003 fe15 	bl	800fd34 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	891b      	ldrh	r3, [r3, #8]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d006      	beq.n	800c120 <tcp_enqueue_flags+0x100>
 800c112:	4b32      	ldr	r3, [pc, #200]	; (800c1dc <tcp_enqueue_flags+0x1bc>)
 800c114:	f240 4243 	movw	r2, #1091	; 0x443
 800c118:	4936      	ldr	r1, [pc, #216]	; (800c1f4 <tcp_enqueue_flags+0x1d4>)
 800c11a:	4832      	ldr	r0, [pc, #200]	; (800c1e4 <tcp_enqueue_flags+0x1c4>)
 800c11c:	f003 fe0a 	bl	800fd34 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c124:	2b00      	cmp	r3, #0
 800c126:	d103      	bne.n	800c130 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	68fa      	ldr	r2, [r7, #12]
 800c12c:	66da      	str	r2, [r3, #108]	; 0x6c
 800c12e:	e00d      	b.n	800c14c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c134:	61bb      	str	r3, [r7, #24]
 800c136:	e002      	b.n	800c13e <tcp_enqueue_flags+0x11e>
 800c138:	69bb      	ldr	r3, [r7, #24]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	61bb      	str	r3, [r7, #24]
 800c13e:	69bb      	ldr	r3, [r7, #24]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d1f8      	bne.n	800c138 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800c146:	69bb      	ldr	r3, [r7, #24]
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2200      	movs	r2, #0
 800c150:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c154:	78fb      	ldrb	r3, [r7, #3]
 800c156:	f003 0302 	and.w	r3, r3, #2
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d104      	bne.n	800c168 <tcp_enqueue_flags+0x148>
 800c15e:	78fb      	ldrb	r3, [r7, #3]
 800c160:	f003 0301 	and.w	r3, r3, #1
 800c164:	2b00      	cmp	r3, #0
 800c166:	d004      	beq.n	800c172 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c16c:	1c5a      	adds	r2, r3, #1
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c172:	78fb      	ldrb	r3, [r7, #3]
 800c174:	f003 0301 	and.w	r3, r3, #1
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d006      	beq.n	800c18a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	8b5b      	ldrh	r3, [r3, #26]
 800c180:	f043 0320 	orr.w	r3, r3, #32
 800c184:	b29a      	uxth	r2, r3
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	685b      	ldr	r3, [r3, #4]
 800c18e:	4618      	mov	r0, r3
 800c190:	f7fa fcb2 	bl	8006af8 <pbuf_clen>
 800c194:	4603      	mov	r3, r0
 800c196:	461a      	mov	r2, r3
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c19e:	4413      	add	r3, r2
 800c1a0:	b29a      	uxth	r2, r3
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d00e      	beq.n	800c1d0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d10a      	bne.n	800c1d0 <tcp_enqueue_flags+0x1b0>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d106      	bne.n	800c1d0 <tcp_enqueue_flags+0x1b0>
 800c1c2:	4b06      	ldr	r3, [pc, #24]	; (800c1dc <tcp_enqueue_flags+0x1bc>)
 800c1c4:	f240 4265 	movw	r2, #1125	; 0x465
 800c1c8:	490b      	ldr	r1, [pc, #44]	; (800c1f8 <tcp_enqueue_flags+0x1d8>)
 800c1ca:	4806      	ldr	r0, [pc, #24]	; (800c1e4 <tcp_enqueue_flags+0x1c4>)
 800c1cc:	f003 fdb2 	bl	800fd34 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c1d0:	2300      	movs	r3, #0
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3720      	adds	r7, #32
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	080128b8 	.word	0x080128b8
 800c1e0:	08012cdc 	.word	0x08012cdc
 800c1e4:	0801290c 	.word	0x0801290c
 800c1e8:	08012d34 	.word	0x08012d34
 800c1ec:	08012d54 	.word	0x08012d54
 800c1f0:	08012d90 	.word	0x08012d90
 800c1f4:	08012da8 	.word	0x08012da8
 800c1f8:	08012dd4 	.word	0x08012dd4

0800c1fc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c1fc:	b5b0      	push	{r4, r5, r7, lr}
 800c1fe:	b08a      	sub	sp, #40	; 0x28
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d106      	bne.n	800c218 <tcp_output+0x1c>
 800c20a:	4b9e      	ldr	r3, [pc, #632]	; (800c484 <tcp_output+0x288>)
 800c20c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c210:	499d      	ldr	r1, [pc, #628]	; (800c488 <tcp_output+0x28c>)
 800c212:	489e      	ldr	r0, [pc, #632]	; (800c48c <tcp_output+0x290>)
 800c214:	f003 fd8e 	bl	800fd34 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	7d1b      	ldrb	r3, [r3, #20]
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d106      	bne.n	800c22e <tcp_output+0x32>
 800c220:	4b98      	ldr	r3, [pc, #608]	; (800c484 <tcp_output+0x288>)
 800c222:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800c226:	499a      	ldr	r1, [pc, #616]	; (800c490 <tcp_output+0x294>)
 800c228:	4898      	ldr	r0, [pc, #608]	; (800c48c <tcp_output+0x290>)
 800c22a:	f003 fd83 	bl	800fd34 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c22e:	4b99      	ldr	r3, [pc, #612]	; (800c494 <tcp_output+0x298>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	429a      	cmp	r2, r3
 800c236:	d101      	bne.n	800c23c <tcp_output+0x40>
    return ERR_OK;
 800c238:	2300      	movs	r3, #0
 800c23a:	e1ce      	b.n	800c5da <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c248:	4293      	cmp	r3, r2
 800c24a:	bf28      	it	cs
 800c24c:	4613      	movcs	r3, r2
 800c24e:	b29b      	uxth	r3, r3
 800c250:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c256:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800c258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d10b      	bne.n	800c276 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	8b5b      	ldrh	r3, [r3, #26]
 800c262:	f003 0302 	and.w	r3, r3, #2
 800c266:	2b00      	cmp	r3, #0
 800c268:	f000 81aa 	beq.w	800c5c0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f000 fdcb 	bl	800ce08 <tcp_send_empty_ack>
 800c272:	4603      	mov	r3, r0
 800c274:	e1b1      	b.n	800c5da <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c276:	6879      	ldr	r1, [r7, #4]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	3304      	adds	r3, #4
 800c27c:	461a      	mov	r2, r3
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f7ff f824 	bl	800b2cc <tcp_route>
 800c284:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d102      	bne.n	800c292 <tcp_output+0x96>
    return ERR_RTE;
 800c28c:	f06f 0303 	mvn.w	r3, #3
 800c290:	e1a3      	b.n	800c5da <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d003      	beq.n	800c2a0 <tcp_output+0xa4>
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d111      	bne.n	800c2c4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d002      	beq.n	800c2ac <tcp_output+0xb0>
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	3304      	adds	r3, #4
 800c2aa:	e000      	b.n	800c2ae <tcp_output+0xb2>
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d102      	bne.n	800c2bc <tcp_output+0xc0>
      return ERR_RTE;
 800c2b6:	f06f 0303 	mvn.w	r3, #3
 800c2ba:	e18e      	b.n	800c5da <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	681a      	ldr	r2, [r3, #0]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7f9 f8ed 	bl	80054aa <lwip_htonl>
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2d6:	1ad3      	subs	r3, r2, r3
 800c2d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2da:	8912      	ldrh	r2, [r2, #8]
 800c2dc:	4413      	add	r3, r2
 800c2de:	69ba      	ldr	r2, [r7, #24]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d227      	bcs.n	800c334 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	69bb      	ldr	r3, [r7, #24]
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d114      	bne.n	800c31c <tcp_output+0x120>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d110      	bne.n	800c31c <tcp_output+0x120>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c300:	2b00      	cmp	r3, #0
 800c302:	d10b      	bne.n	800c31c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2200      	movs	r2, #0
 800c308:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2201      	movs	r2, #1
 800c310:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2200      	movs	r2, #0
 800c318:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	8b5b      	ldrh	r3, [r3, #26]
 800c320:	f003 0302 	and.w	r3, r3, #2
 800c324:	2b00      	cmp	r3, #0
 800c326:	f000 814d 	beq.w	800c5c4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 fd6c 	bl	800ce08 <tcp_send_empty_ack>
 800c330:	4603      	mov	r3, r0
 800c332:	e152      	b.n	800c5da <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2200      	movs	r2, #0
 800c338:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c340:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c342:	6a3b      	ldr	r3, [r7, #32]
 800c344:	2b00      	cmp	r3, #0
 800c346:	f000 811c 	beq.w	800c582 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800c34a:	e002      	b.n	800c352 <tcp_output+0x156>
 800c34c:	6a3b      	ldr	r3, [r7, #32]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	623b      	str	r3, [r7, #32]
 800c352:	6a3b      	ldr	r3, [r7, #32]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d1f8      	bne.n	800c34c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c35a:	e112      	b.n	800c582 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35e:	68db      	ldr	r3, [r3, #12]
 800c360:	899b      	ldrh	r3, [r3, #12]
 800c362:	b29b      	uxth	r3, r3
 800c364:	4618      	mov	r0, r3
 800c366:	f7f9 f88b 	bl	8005480 <lwip_htons>
 800c36a:	4603      	mov	r3, r0
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	f003 0304 	and.w	r3, r3, #4
 800c372:	2b00      	cmp	r3, #0
 800c374:	d006      	beq.n	800c384 <tcp_output+0x188>
 800c376:	4b43      	ldr	r3, [pc, #268]	; (800c484 <tcp_output+0x288>)
 800c378:	f240 5236 	movw	r2, #1334	; 0x536
 800c37c:	4946      	ldr	r1, [pc, #280]	; (800c498 <tcp_output+0x29c>)
 800c37e:	4843      	ldr	r0, [pc, #268]	; (800c48c <tcp_output+0x290>)
 800c380:	f003 fcd8 	bl	800fd34 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d01f      	beq.n	800c3cc <tcp_output+0x1d0>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	8b5b      	ldrh	r3, [r3, #26]
 800c390:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c394:	2b00      	cmp	r3, #0
 800c396:	d119      	bne.n	800c3cc <tcp_output+0x1d0>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d00b      	beq.n	800c3b8 <tcp_output+0x1bc>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d110      	bne.n	800c3cc <tcp_output+0x1d0>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3ae:	891a      	ldrh	r2, [r3, #8]
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d209      	bcs.n	800c3cc <tcp_output+0x1d0>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d004      	beq.n	800c3cc <tcp_output+0x1d0>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c3c8:	2b08      	cmp	r3, #8
 800c3ca:	d901      	bls.n	800c3d0 <tcp_output+0x1d4>
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	e000      	b.n	800c3d2 <tcp_output+0x1d6>
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d106      	bne.n	800c3e4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	8b5b      	ldrh	r3, [r3, #26]
 800c3da:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	f000 80e4 	beq.w	800c5ac <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	7d1b      	ldrb	r3, [r3, #20]
 800c3e8:	2b02      	cmp	r3, #2
 800c3ea:	d00d      	beq.n	800c408 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	899b      	ldrh	r3, [r3, #12]
 800c3f2:	b29c      	uxth	r4, r3
 800c3f4:	2010      	movs	r0, #16
 800c3f6:	f7f9 f843 	bl	8005480 <lwip_htons>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	461a      	mov	r2, r3
 800c3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c400:	68db      	ldr	r3, [r3, #12]
 800c402:	4322      	orrs	r2, r4
 800c404:	b292      	uxth	r2, r2
 800c406:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c408:	697a      	ldr	r2, [r7, #20]
 800c40a:	6879      	ldr	r1, [r7, #4]
 800c40c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c40e:	f000 f909 	bl	800c624 <tcp_output_segment>
 800c412:	4603      	mov	r3, r0
 800c414:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d009      	beq.n	800c432 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	8b5b      	ldrh	r3, [r3, #26]
 800c422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c426:	b29a      	uxth	r2, r3
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	835a      	strh	r2, [r3, #26]
      return err;
 800c42c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c430:	e0d3      	b.n	800c5da <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	7d1b      	ldrb	r3, [r3, #20]
 800c43e:	2b02      	cmp	r3, #2
 800c440:	d006      	beq.n	800c450 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	8b5b      	ldrh	r3, [r3, #26]
 800c446:	f023 0303 	bic.w	r3, r3, #3
 800c44a:	b29a      	uxth	r2, r3
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c452:	68db      	ldr	r3, [r3, #12]
 800c454:	685b      	ldr	r3, [r3, #4]
 800c456:	4618      	mov	r0, r3
 800c458:	f7f9 f827 	bl	80054aa <lwip_htonl>
 800c45c:	4604      	mov	r4, r0
 800c45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c460:	891b      	ldrh	r3, [r3, #8]
 800c462:	461d      	mov	r5, r3
 800c464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	899b      	ldrh	r3, [r3, #12]
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7f9 f807 	bl	8005480 <lwip_htons>
 800c472:	4603      	mov	r3, r0
 800c474:	b2db      	uxtb	r3, r3
 800c476:	f003 0303 	and.w	r3, r3, #3
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d00e      	beq.n	800c49c <tcp_output+0x2a0>
 800c47e:	2301      	movs	r3, #1
 800c480:	e00d      	b.n	800c49e <tcp_output+0x2a2>
 800c482:	bf00      	nop
 800c484:	080128b8 	.word	0x080128b8
 800c488:	08012dfc 	.word	0x08012dfc
 800c48c:	0801290c 	.word	0x0801290c
 800c490:	08012e14 	.word	0x08012e14
 800c494:	20006a40 	.word	0x20006a40
 800c498:	08012e3c 	.word	0x08012e3c
 800c49c:	2300      	movs	r3, #0
 800c49e:	442b      	add	r3, r5
 800c4a0:	4423      	add	r3, r4
 800c4a2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	1ad3      	subs	r3, r2, r3
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	da02      	bge.n	800c4b6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	68ba      	ldr	r2, [r7, #8]
 800c4b4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b8:	891b      	ldrh	r3, [r3, #8]
 800c4ba:	461c      	mov	r4, r3
 800c4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	899b      	ldrh	r3, [r3, #12]
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f7f8 ffdb 	bl	8005480 <lwip_htons>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	f003 0303 	and.w	r3, r3, #3
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d001      	beq.n	800c4da <tcp_output+0x2de>
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e000      	b.n	800c4dc <tcp_output+0x2e0>
 800c4da:	2300      	movs	r3, #0
 800c4dc:	4423      	add	r3, r4
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d049      	beq.n	800c576 <tcp_output+0x37a>
      seg->next = NULL;
 800c4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d105      	bne.n	800c4fc <tcp_output+0x300>
        pcb->unacked = seg;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4f4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800c4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f8:	623b      	str	r3, [r7, #32]
 800c4fa:	e03f      	b.n	800c57c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fe:	68db      	ldr	r3, [r3, #12]
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	4618      	mov	r0, r3
 800c504:	f7f8 ffd1 	bl	80054aa <lwip_htonl>
 800c508:	4604      	mov	r4, r0
 800c50a:	6a3b      	ldr	r3, [r7, #32]
 800c50c:	68db      	ldr	r3, [r3, #12]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	4618      	mov	r0, r3
 800c512:	f7f8 ffca 	bl	80054aa <lwip_htonl>
 800c516:	4603      	mov	r3, r0
 800c518:	1ae3      	subs	r3, r4, r3
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	da24      	bge.n	800c568 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	3370      	adds	r3, #112	; 0x70
 800c522:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c524:	e002      	b.n	800c52c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c526:	69fb      	ldr	r3, [r7, #28]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c52c:	69fb      	ldr	r3, [r7, #28]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d011      	beq.n	800c558 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c534:	69fb      	ldr	r3, [r7, #28]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	68db      	ldr	r3, [r3, #12]
 800c53a:	685b      	ldr	r3, [r3, #4]
 800c53c:	4618      	mov	r0, r3
 800c53e:	f7f8 ffb4 	bl	80054aa <lwip_htonl>
 800c542:	4604      	mov	r4, r0
 800c544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	4618      	mov	r0, r3
 800c54c:	f7f8 ffad 	bl	80054aa <lwip_htonl>
 800c550:	4603      	mov	r3, r0
 800c552:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c554:	2b00      	cmp	r3, #0
 800c556:	dbe6      	blt.n	800c526 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800c558:	69fb      	ldr	r3, [r7, #28]
 800c55a:	681a      	ldr	r2, [r3, #0]
 800c55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c560:	69fb      	ldr	r3, [r7, #28]
 800c562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c564:	601a      	str	r2, [r3, #0]
 800c566:	e009      	b.n	800c57c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c568:	6a3b      	ldr	r3, [r7, #32]
 800c56a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c56c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c56e:	6a3b      	ldr	r3, [r7, #32]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	623b      	str	r3, [r7, #32]
 800c574:	e002      	b.n	800c57c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c576:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c578:	f7fb ff05 	bl	8008386 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c580:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c584:	2b00      	cmp	r3, #0
 800c586:	d012      	beq.n	800c5ae <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58a:	68db      	ldr	r3, [r3, #12]
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	4618      	mov	r0, r3
 800c590:	f7f8 ff8b 	bl	80054aa <lwip_htonl>
 800c594:	4602      	mov	r2, r0
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c59a:	1ad3      	subs	r3, r2, r3
 800c59c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c59e:	8912      	ldrh	r2, [r2, #8]
 800c5a0:	4413      	add	r3, r2
  while (seg != NULL &&
 800c5a2:	69ba      	ldr	r2, [r7, #24]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	f4bf aed9 	bcs.w	800c35c <tcp_output+0x160>
 800c5aa:	e000      	b.n	800c5ae <tcp_output+0x3b2>
      break;
 800c5ac:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d108      	bne.n	800c5c8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800c5be:	e004      	b.n	800c5ca <tcp_output+0x3ce>
    goto output_done;
 800c5c0:	bf00      	nop
 800c5c2:	e002      	b.n	800c5ca <tcp_output+0x3ce>
    goto output_done;
 800c5c4:	bf00      	nop
 800c5c6:	e000      	b.n	800c5ca <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800c5c8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	8b5b      	ldrh	r3, [r3, #26]
 800c5ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c5d2:	b29a      	uxth	r2, r3
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c5d8:	2300      	movs	r3, #0
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3728      	adds	r7, #40	; 0x28
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bdb0      	pop	{r4, r5, r7, pc}
 800c5e2:	bf00      	nop

0800c5e4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d106      	bne.n	800c600 <tcp_output_segment_busy+0x1c>
 800c5f2:	4b09      	ldr	r3, [pc, #36]	; (800c618 <tcp_output_segment_busy+0x34>)
 800c5f4:	f240 529a 	movw	r2, #1434	; 0x59a
 800c5f8:	4908      	ldr	r1, [pc, #32]	; (800c61c <tcp_output_segment_busy+0x38>)
 800c5fa:	4809      	ldr	r0, [pc, #36]	; (800c620 <tcp_output_segment_busy+0x3c>)
 800c5fc:	f003 fb9a 	bl	800fd34 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	685b      	ldr	r3, [r3, #4]
 800c604:	7b9b      	ldrb	r3, [r3, #14]
 800c606:	2b01      	cmp	r3, #1
 800c608:	d001      	beq.n	800c60e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800c60a:	2301      	movs	r3, #1
 800c60c:	e000      	b.n	800c610 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800c60e:	2300      	movs	r3, #0
}
 800c610:	4618      	mov	r0, r3
 800c612:	3708      	adds	r7, #8
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}
 800c618:	080128b8 	.word	0x080128b8
 800c61c:	08012e54 	.word	0x08012e54
 800c620:	0801290c 	.word	0x0801290c

0800c624 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c624:	b5b0      	push	{r4, r5, r7, lr}
 800c626:	b08c      	sub	sp, #48	; 0x30
 800c628:	af04      	add	r7, sp, #16
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d106      	bne.n	800c644 <tcp_output_segment+0x20>
 800c636:	4b63      	ldr	r3, [pc, #396]	; (800c7c4 <tcp_output_segment+0x1a0>)
 800c638:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800c63c:	4962      	ldr	r1, [pc, #392]	; (800c7c8 <tcp_output_segment+0x1a4>)
 800c63e:	4863      	ldr	r0, [pc, #396]	; (800c7cc <tcp_output_segment+0x1a8>)
 800c640:	f003 fb78 	bl	800fd34 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d106      	bne.n	800c658 <tcp_output_segment+0x34>
 800c64a:	4b5e      	ldr	r3, [pc, #376]	; (800c7c4 <tcp_output_segment+0x1a0>)
 800c64c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800c650:	495f      	ldr	r1, [pc, #380]	; (800c7d0 <tcp_output_segment+0x1ac>)
 800c652:	485e      	ldr	r0, [pc, #376]	; (800c7cc <tcp_output_segment+0x1a8>)
 800c654:	f003 fb6e 	bl	800fd34 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d106      	bne.n	800c66c <tcp_output_segment+0x48>
 800c65e:	4b59      	ldr	r3, [pc, #356]	; (800c7c4 <tcp_output_segment+0x1a0>)
 800c660:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800c664:	495b      	ldr	r1, [pc, #364]	; (800c7d4 <tcp_output_segment+0x1b0>)
 800c666:	4859      	ldr	r0, [pc, #356]	; (800c7cc <tcp_output_segment+0x1a8>)
 800c668:	f003 fb64 	bl	800fd34 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800c66c:	68f8      	ldr	r0, [r7, #12]
 800c66e:	f7ff ffb9 	bl	800c5e4 <tcp_output_segment_busy>
 800c672:	4603      	mov	r3, r0
 800c674:	2b00      	cmp	r3, #0
 800c676:	d001      	beq.n	800c67c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800c678:	2300      	movs	r3, #0
 800c67a:	e09f      	b.n	800c7bc <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	68dc      	ldr	r4, [r3, #12]
 800c684:	4610      	mov	r0, r2
 800c686:	f7f8 ff10 	bl	80054aa <lwip_htonl>
 800c68a:	4603      	mov	r3, r0
 800c68c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	68dc      	ldr	r4, [r3, #12]
 800c696:	4610      	mov	r0, r2
 800c698:	f7f8 fef2 	bl	8005480 <lwip_htons>
 800c69c:	4603      	mov	r3, r0
 800c69e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6a4:	68ba      	ldr	r2, [r7, #8]
 800c6a6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c6a8:	441a      	add	r2, r3
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	68db      	ldr	r3, [r3, #12]
 800c6b2:	3314      	adds	r3, #20
 800c6b4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	7a9b      	ldrb	r3, [r3, #10]
 800c6ba:	f003 0301 	and.w	r3, r3, #1
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d015      	beq.n	800c6ee <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	3304      	adds	r3, #4
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	6879      	ldr	r1, [r7, #4]
 800c6ca:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c6ce:	f7fc fa37 	bl	8008b40 <tcp_eff_send_mss_netif>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c6d6:	8b7b      	ldrh	r3, [r7, #26]
 800c6d8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7f8 fee4 	bl	80054aa <lwip_htonl>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	69fb      	ldr	r3, [r7, #28]
 800c6e6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c6e8:	69fb      	ldr	r3, [r7, #28]
 800c6ea:	3304      	adds	r3, #4
 800c6ec:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	da02      	bge.n	800c6fe <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c702:	2b00      	cmp	r3, #0
 800c704:	d10c      	bne.n	800c720 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800c706:	4b34      	ldr	r3, [pc, #208]	; (800c7d8 <tcp_output_segment+0x1b4>)
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	4618      	mov	r0, r3
 800c716:	f7f8 fec8 	bl	80054aa <lwip_htonl>
 800c71a:	4602      	mov	r2, r0
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	68da      	ldr	r2, [r3, #12]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	1ad3      	subs	r3, r2, r3
 800c72c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	8959      	ldrh	r1, [r3, #10]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	8b3a      	ldrh	r2, [r7, #24]
 800c73a:	1a8a      	subs	r2, r1, r2
 800c73c:	b292      	uxth	r2, r2
 800c73e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	8919      	ldrh	r1, [r3, #8]
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	8b3a      	ldrh	r2, [r7, #24]
 800c74c:	1a8a      	subs	r2, r1, r2
 800c74e:	b292      	uxth	r2, r2
 800c750:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	685b      	ldr	r3, [r3, #4]
 800c756:	68fa      	ldr	r2, [r7, #12]
 800c758:	68d2      	ldr	r2, [r2, #12]
 800c75a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	68db      	ldr	r3, [r3, #12]
 800c760:	2200      	movs	r2, #0
 800c762:	741a      	strb	r2, [r3, #16]
 800c764:	2200      	movs	r2, #0
 800c766:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	68db      	ldr	r3, [r3, #12]
 800c76c:	f103 0214 	add.w	r2, r3, #20
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	7a9b      	ldrb	r3, [r3, #10]
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	f003 0304 	and.w	r3, r3, #4
 800c77a:	4413      	add	r3, r2
 800c77c:	69fa      	ldr	r2, [r7, #28]
 800c77e:	429a      	cmp	r2, r3
 800c780:	d006      	beq.n	800c790 <tcp_output_segment+0x16c>
 800c782:	4b10      	ldr	r3, [pc, #64]	; (800c7c4 <tcp_output_segment+0x1a0>)
 800c784:	f240 621c 	movw	r2, #1564	; 0x61c
 800c788:	4914      	ldr	r1, [pc, #80]	; (800c7dc <tcp_output_segment+0x1b8>)
 800c78a:	4810      	ldr	r0, [pc, #64]	; (800c7cc <tcp_output_segment+0x1a8>)
 800c78c:	f003 fad2 	bl	800fd34 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	6858      	ldr	r0, [r3, #4]
 800c794:	68b9      	ldr	r1, [r7, #8]
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	1d1c      	adds	r4, r3, #4
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	7add      	ldrb	r5, [r3, #11]
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	7a9b      	ldrb	r3, [r3, #10]
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	9202      	str	r2, [sp, #8]
 800c7a6:	2206      	movs	r2, #6
 800c7a8:	9201      	str	r2, [sp, #4]
 800c7aa:	9300      	str	r3, [sp, #0]
 800c7ac:	462b      	mov	r3, r5
 800c7ae:	4622      	mov	r2, r4
 800c7b0:	f002 fa36 	bl	800ec20 <ip4_output_if>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800c7b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3720      	adds	r7, #32
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bdb0      	pop	{r4, r5, r7, pc}
 800c7c4:	080128b8 	.word	0x080128b8
 800c7c8:	08012e7c 	.word	0x08012e7c
 800c7cc:	0801290c 	.word	0x0801290c
 800c7d0:	08012e9c 	.word	0x08012e9c
 800c7d4:	08012ebc 	.word	0x08012ebc
 800c7d8:	20006a30 	.word	0x20006a30
 800c7dc:	08012ee0 	.word	0x08012ee0

0800c7e0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800c7e0:	b5b0      	push	{r4, r5, r7, lr}
 800c7e2:	b084      	sub	sp, #16
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d106      	bne.n	800c7fc <tcp_rexmit_rto_prepare+0x1c>
 800c7ee:	4b31      	ldr	r3, [pc, #196]	; (800c8b4 <tcp_rexmit_rto_prepare+0xd4>)
 800c7f0:	f240 6263 	movw	r2, #1635	; 0x663
 800c7f4:	4930      	ldr	r1, [pc, #192]	; (800c8b8 <tcp_rexmit_rto_prepare+0xd8>)
 800c7f6:	4831      	ldr	r0, [pc, #196]	; (800c8bc <tcp_rexmit_rto_prepare+0xdc>)
 800c7f8:	f003 fa9c 	bl	800fd34 <iprintf>

  if (pcb->unacked == NULL) {
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c800:	2b00      	cmp	r3, #0
 800c802:	d102      	bne.n	800c80a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800c804:	f06f 0305 	mvn.w	r3, #5
 800c808:	e050      	b.n	800c8ac <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c80e:	60fb      	str	r3, [r7, #12]
 800c810:	e00b      	b.n	800c82a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800c812:	68f8      	ldr	r0, [r7, #12]
 800c814:	f7ff fee6 	bl	800c5e4 <tcp_output_segment_busy>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d002      	beq.n	800c824 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800c81e:	f06f 0305 	mvn.w	r3, #5
 800c822:	e043      	b.n	800c8ac <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	60fb      	str	r3, [r7, #12]
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d1ef      	bne.n	800c812 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800c832:	68f8      	ldr	r0, [r7, #12]
 800c834:	f7ff fed6 	bl	800c5e4 <tcp_output_segment_busy>
 800c838:	4603      	mov	r3, r0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d002      	beq.n	800c844 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800c83e:	f06f 0305 	mvn.w	r3, #5
 800c842:	e033      	b.n	800c8ac <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2200      	movs	r2, #0
 800c858:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	8b5b      	ldrh	r3, [r3, #26]
 800c85e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c862:	b29a      	uxth	r2, r3
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	4618      	mov	r0, r3
 800c870:	f7f8 fe1b 	bl	80054aa <lwip_htonl>
 800c874:	4604      	mov	r4, r0
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	891b      	ldrh	r3, [r3, #8]
 800c87a:	461d      	mov	r5, r3
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	899b      	ldrh	r3, [r3, #12]
 800c882:	b29b      	uxth	r3, r3
 800c884:	4618      	mov	r0, r3
 800c886:	f7f8 fdfb 	bl	8005480 <lwip_htons>
 800c88a:	4603      	mov	r3, r0
 800c88c:	b2db      	uxtb	r3, r3
 800c88e:	f003 0303 	and.w	r3, r3, #3
 800c892:	2b00      	cmp	r3, #0
 800c894:	d001      	beq.n	800c89a <tcp_rexmit_rto_prepare+0xba>
 800c896:	2301      	movs	r3, #1
 800c898:	e000      	b.n	800c89c <tcp_rexmit_rto_prepare+0xbc>
 800c89a:	2300      	movs	r3, #0
 800c89c:	442b      	add	r3, r5
 800c89e:	18e2      	adds	r2, r4, r3
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800c8aa:	2300      	movs	r3, #0
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3710      	adds	r7, #16
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bdb0      	pop	{r4, r5, r7, pc}
 800c8b4:	080128b8 	.word	0x080128b8
 800c8b8:	08012ef4 	.word	0x08012ef4
 800c8bc:	0801290c 	.word	0x0801290c

0800c8c0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b082      	sub	sp, #8
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d106      	bne.n	800c8dc <tcp_rexmit_rto_commit+0x1c>
 800c8ce:	4b0d      	ldr	r3, [pc, #52]	; (800c904 <tcp_rexmit_rto_commit+0x44>)
 800c8d0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c8d4:	490c      	ldr	r1, [pc, #48]	; (800c908 <tcp_rexmit_rto_commit+0x48>)
 800c8d6:	480d      	ldr	r0, [pc, #52]	; (800c90c <tcp_rexmit_rto_commit+0x4c>)
 800c8d8:	f003 fa2c 	bl	800fd34 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c8e2:	2bff      	cmp	r3, #255	; 0xff
 800c8e4:	d007      	beq.n	800c8f6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	b2da      	uxtb	r2, r3
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f7ff fc80 	bl	800c1fc <tcp_output>
}
 800c8fc:	bf00      	nop
 800c8fe:	3708      	adds	r7, #8
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}
 800c904:	080128b8 	.word	0x080128b8
 800c908:	08012f18 	.word	0x08012f18
 800c90c:	0801290c 	.word	0x0801290c

0800c910 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d106      	bne.n	800c92c <tcp_rexmit_rto+0x1c>
 800c91e:	4b0a      	ldr	r3, [pc, #40]	; (800c948 <tcp_rexmit_rto+0x38>)
 800c920:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800c924:	4909      	ldr	r1, [pc, #36]	; (800c94c <tcp_rexmit_rto+0x3c>)
 800c926:	480a      	ldr	r0, [pc, #40]	; (800c950 <tcp_rexmit_rto+0x40>)
 800c928:	f003 fa04 	bl	800fd34 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f7ff ff57 	bl	800c7e0 <tcp_rexmit_rto_prepare>
 800c932:	4603      	mov	r3, r0
 800c934:	2b00      	cmp	r3, #0
 800c936:	d102      	bne.n	800c93e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f7ff ffc1 	bl	800c8c0 <tcp_rexmit_rto_commit>
  }
}
 800c93e:	bf00      	nop
 800c940:	3708      	adds	r7, #8
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
 800c946:	bf00      	nop
 800c948:	080128b8 	.word	0x080128b8
 800c94c:	08012f3c 	.word	0x08012f3c
 800c950:	0801290c 	.word	0x0801290c

0800c954 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c954:	b590      	push	{r4, r7, lr}
 800c956:	b085      	sub	sp, #20
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d106      	bne.n	800c970 <tcp_rexmit+0x1c>
 800c962:	4b2f      	ldr	r3, [pc, #188]	; (800ca20 <tcp_rexmit+0xcc>)
 800c964:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800c968:	492e      	ldr	r1, [pc, #184]	; (800ca24 <tcp_rexmit+0xd0>)
 800c96a:	482f      	ldr	r0, [pc, #188]	; (800ca28 <tcp_rexmit+0xd4>)
 800c96c:	f003 f9e2 	bl	800fd34 <iprintf>

  if (pcb->unacked == NULL) {
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c974:	2b00      	cmp	r3, #0
 800c976:	d102      	bne.n	800c97e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800c978:	f06f 0305 	mvn.w	r3, #5
 800c97c:	e04c      	b.n	800ca18 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c982:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800c984:	68b8      	ldr	r0, [r7, #8]
 800c986:	f7ff fe2d 	bl	800c5e4 <tcp_output_segment_busy>
 800c98a:	4603      	mov	r3, r0
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d002      	beq.n	800c996 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800c990:	f06f 0305 	mvn.w	r3, #5
 800c994:	e040      	b.n	800ca18 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	681a      	ldr	r2, [r3, #0]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	336c      	adds	r3, #108	; 0x6c
 800c9a2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c9a4:	e002      	b.n	800c9ac <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d011      	beq.n	800c9d8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	68db      	ldr	r3, [r3, #12]
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7f8 fd74 	bl	80054aa <lwip_htonl>
 800c9c2:	4604      	mov	r4, r0
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	68db      	ldr	r3, [r3, #12]
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7f8 fd6d 	bl	80054aa <lwip_htonl>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	dbe6      	blt.n	800c9a6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	68ba      	ldr	r2, [r7, #8]
 800c9e4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d103      	bne.n	800c9f6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9fc:	2bff      	cmp	r3, #255	; 0xff
 800c9fe:	d007      	beq.n	800ca10 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca06:	3301      	adds	r3, #1
 800ca08:	b2da      	uxtb	r2, r3
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2200      	movs	r2, #0
 800ca14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ca16:	2300      	movs	r3, #0
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3714      	adds	r7, #20
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd90      	pop	{r4, r7, pc}
 800ca20:	080128b8 	.word	0x080128b8
 800ca24:	08012f58 	.word	0x08012f58
 800ca28:	0801290c 	.word	0x0801290c

0800ca2c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b082      	sub	sp, #8
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d106      	bne.n	800ca48 <tcp_rexmit_fast+0x1c>
 800ca3a:	4b2a      	ldr	r3, [pc, #168]	; (800cae4 <tcp_rexmit_fast+0xb8>)
 800ca3c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ca40:	4929      	ldr	r1, [pc, #164]	; (800cae8 <tcp_rexmit_fast+0xbc>)
 800ca42:	482a      	ldr	r0, [pc, #168]	; (800caec <tcp_rexmit_fast+0xc0>)
 800ca44:	f003 f976 	bl	800fd34 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d044      	beq.n	800cada <tcp_rexmit_fast+0xae>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	8b5b      	ldrh	r3, [r3, #26]
 800ca54:	f003 0304 	and.w	r3, r3, #4
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d13e      	bne.n	800cada <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f7ff ff79 	bl	800c954 <tcp_rexmit>
 800ca62:	4603      	mov	r3, r0
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d138      	bne.n	800cada <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ca74:	4293      	cmp	r3, r2
 800ca76:	bf28      	it	cs
 800ca78:	4613      	movcs	r3, r2
 800ca7a:	b29b      	uxth	r3, r3
 800ca7c:	0fda      	lsrs	r2, r3, #31
 800ca7e:	4413      	add	r3, r2
 800ca80:	105b      	asrs	r3, r3, #1
 800ca82:	b29a      	uxth	r2, r3
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ca90:	461a      	mov	r2, r3
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca96:	005b      	lsls	r3, r3, #1
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d206      	bcs.n	800caaa <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800caa0:	005b      	lsls	r3, r3, #1
 800caa2:	b29a      	uxth	r2, r3
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cab4:	4619      	mov	r1, r3
 800cab6:	0049      	lsls	r1, r1, #1
 800cab8:	440b      	add	r3, r1
 800caba:	b29b      	uxth	r3, r3
 800cabc:	4413      	add	r3, r2
 800cabe:	b29a      	uxth	r2, r3
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	8b5b      	ldrh	r3, [r3, #26]
 800caca:	f043 0304 	orr.w	r3, r3, #4
 800cace:	b29a      	uxth	r2, r3
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2200      	movs	r2, #0
 800cad8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800cada:	bf00      	nop
 800cadc:	3708      	adds	r7, #8
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
 800cae2:	bf00      	nop
 800cae4:	080128b8 	.word	0x080128b8
 800cae8:	08012f70 	.word	0x08012f70
 800caec:	0801290c 	.word	0x0801290c

0800caf0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b086      	sub	sp, #24
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	60f8      	str	r0, [r7, #12]
 800caf8:	607b      	str	r3, [r7, #4]
 800cafa:	460b      	mov	r3, r1
 800cafc:	817b      	strh	r3, [r7, #10]
 800cafe:	4613      	mov	r3, r2
 800cb00:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cb02:	897a      	ldrh	r2, [r7, #10]
 800cb04:	893b      	ldrh	r3, [r7, #8]
 800cb06:	4413      	add	r3, r2
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	3314      	adds	r3, #20
 800cb0c:	b29b      	uxth	r3, r3
 800cb0e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cb12:	4619      	mov	r1, r3
 800cb14:	2022      	movs	r0, #34	; 0x22
 800cb16:	f7f9 fc83 	bl	8006420 <pbuf_alloc>
 800cb1a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d04d      	beq.n	800cbbe <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cb22:	897b      	ldrh	r3, [r7, #10]
 800cb24:	3313      	adds	r3, #19
 800cb26:	697a      	ldr	r2, [r7, #20]
 800cb28:	8952      	ldrh	r2, [r2, #10]
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	db06      	blt.n	800cb3c <tcp_output_alloc_header_common+0x4c>
 800cb2e:	4b26      	ldr	r3, [pc, #152]	; (800cbc8 <tcp_output_alloc_header_common+0xd8>)
 800cb30:	f240 7223 	movw	r2, #1827	; 0x723
 800cb34:	4925      	ldr	r1, [pc, #148]	; (800cbcc <tcp_output_alloc_header_common+0xdc>)
 800cb36:	4826      	ldr	r0, [pc, #152]	; (800cbd0 <tcp_output_alloc_header_common+0xe0>)
 800cb38:	f003 f8fc 	bl	800fd34 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800cb42:	8c3b      	ldrh	r3, [r7, #32]
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7f8 fc9b 	bl	8005480 <lwip_htons>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800cb52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb54:	4618      	mov	r0, r3
 800cb56:	f7f8 fc93 	bl	8005480 <lwip_htons>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	461a      	mov	r2, r3
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	687a      	ldr	r2, [r7, #4]
 800cb66:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800cb68:	68f8      	ldr	r0, [r7, #12]
 800cb6a:	f7f8 fc9e 	bl	80054aa <lwip_htonl>
 800cb6e:	4602      	mov	r2, r0
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800cb74:	897b      	ldrh	r3, [r7, #10]
 800cb76:	089b      	lsrs	r3, r3, #2
 800cb78:	b29b      	uxth	r3, r3
 800cb7a:	3305      	adds	r3, #5
 800cb7c:	b29b      	uxth	r3, r3
 800cb7e:	031b      	lsls	r3, r3, #12
 800cb80:	b29a      	uxth	r2, r3
 800cb82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	4313      	orrs	r3, r2
 800cb8a:	b29b      	uxth	r3, r3
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7f8 fc77 	bl	8005480 <lwip_htons>
 800cb92:	4603      	mov	r3, r0
 800cb94:	461a      	mov	r2, r3
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800cb9a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f7f8 fc6f 	bl	8005480 <lwip_htons>
 800cba2:	4603      	mov	r3, r0
 800cba4:	461a      	mov	r2, r3
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	2200      	movs	r2, #0
 800cbae:	741a      	strb	r2, [r3, #16]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	749a      	strb	r2, [r3, #18]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800cbbe:	697b      	ldr	r3, [r7, #20]
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3718      	adds	r7, #24
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}
 800cbc8:	080128b8 	.word	0x080128b8
 800cbcc:	08012f90 	.word	0x08012f90
 800cbd0:	0801290c 	.word	0x0801290c

0800cbd4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800cbd4:	b5b0      	push	{r4, r5, r7, lr}
 800cbd6:	b08a      	sub	sp, #40	; 0x28
 800cbd8:	af04      	add	r7, sp, #16
 800cbda:	60f8      	str	r0, [r7, #12]
 800cbdc:	607b      	str	r3, [r7, #4]
 800cbde:	460b      	mov	r3, r1
 800cbe0:	817b      	strh	r3, [r7, #10]
 800cbe2:	4613      	mov	r3, r2
 800cbe4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d106      	bne.n	800cbfa <tcp_output_alloc_header+0x26>
 800cbec:	4b15      	ldr	r3, [pc, #84]	; (800cc44 <tcp_output_alloc_header+0x70>)
 800cbee:	f240 7242 	movw	r2, #1858	; 0x742
 800cbf2:	4915      	ldr	r1, [pc, #84]	; (800cc48 <tcp_output_alloc_header+0x74>)
 800cbf4:	4815      	ldr	r0, [pc, #84]	; (800cc4c <tcp_output_alloc_header+0x78>)
 800cbf6:	f003 f89d 	bl	800fd34 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	8adb      	ldrh	r3, [r3, #22]
 800cc02:	68fa      	ldr	r2, [r7, #12]
 800cc04:	8b12      	ldrh	r2, [r2, #24]
 800cc06:	68f9      	ldr	r1, [r7, #12]
 800cc08:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800cc0a:	893d      	ldrh	r5, [r7, #8]
 800cc0c:	897c      	ldrh	r4, [r7, #10]
 800cc0e:	9103      	str	r1, [sp, #12]
 800cc10:	2110      	movs	r1, #16
 800cc12:	9102      	str	r1, [sp, #8]
 800cc14:	9201      	str	r2, [sp, #4]
 800cc16:	9300      	str	r3, [sp, #0]
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	462a      	mov	r2, r5
 800cc1c:	4621      	mov	r1, r4
 800cc1e:	f7ff ff67 	bl	800caf0 <tcp_output_alloc_header_common>
 800cc22:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d006      	beq.n	800cc38 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc2e:	68fa      	ldr	r2, [r7, #12]
 800cc30:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cc32:	441a      	add	r2, r3
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800cc38:	697b      	ldr	r3, [r7, #20]
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3718      	adds	r7, #24
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bdb0      	pop	{r4, r5, r7, pc}
 800cc42:	bf00      	nop
 800cc44:	080128b8 	.word	0x080128b8
 800cc48:	08012fc0 	.word	0x08012fc0
 800cc4c:	0801290c 	.word	0x0801290c

0800cc50 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b088      	sub	sp, #32
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	60f8      	str	r0, [r7, #12]
 800cc58:	60b9      	str	r1, [r7, #8]
 800cc5a:	4611      	mov	r1, r2
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	460b      	mov	r3, r1
 800cc60:	71fb      	strb	r3, [r7, #7]
 800cc62:	4613      	mov	r3, r2
 800cc64:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800cc66:	2300      	movs	r3, #0
 800cc68:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d106      	bne.n	800cc7e <tcp_output_fill_options+0x2e>
 800cc70:	4b13      	ldr	r3, [pc, #76]	; (800ccc0 <tcp_output_fill_options+0x70>)
 800cc72:	f240 7256 	movw	r2, #1878	; 0x756
 800cc76:	4913      	ldr	r1, [pc, #76]	; (800ccc4 <tcp_output_fill_options+0x74>)
 800cc78:	4813      	ldr	r0, [pc, #76]	; (800ccc8 <tcp_output_fill_options+0x78>)
 800cc7a:	f003 f85b 	bl	800fd34 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800cc84:	69bb      	ldr	r3, [r7, #24]
 800cc86:	3314      	adds	r3, #20
 800cc88:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800cc8a:	69bb      	ldr	r3, [r7, #24]
 800cc8c:	f103 0214 	add.w	r2, r3, #20
 800cc90:	8bfb      	ldrh	r3, [r7, #30]
 800cc92:	009b      	lsls	r3, r3, #2
 800cc94:	4619      	mov	r1, r3
 800cc96:	79fb      	ldrb	r3, [r7, #7]
 800cc98:	009b      	lsls	r3, r3, #2
 800cc9a:	f003 0304 	and.w	r3, r3, #4
 800cc9e:	440b      	add	r3, r1
 800cca0:	4413      	add	r3, r2
 800cca2:	697a      	ldr	r2, [r7, #20]
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d006      	beq.n	800ccb6 <tcp_output_fill_options+0x66>
 800cca8:	4b05      	ldr	r3, [pc, #20]	; (800ccc0 <tcp_output_fill_options+0x70>)
 800ccaa:	f240 7275 	movw	r2, #1909	; 0x775
 800ccae:	4907      	ldr	r1, [pc, #28]	; (800cccc <tcp_output_fill_options+0x7c>)
 800ccb0:	4805      	ldr	r0, [pc, #20]	; (800ccc8 <tcp_output_fill_options+0x78>)
 800ccb2:	f003 f83f 	bl	800fd34 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ccb6:	bf00      	nop
 800ccb8:	3720      	adds	r7, #32
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
 800ccbe:	bf00      	nop
 800ccc0:	080128b8 	.word	0x080128b8
 800ccc4:	08012fe8 	.word	0x08012fe8
 800ccc8:	0801290c 	.word	0x0801290c
 800cccc:	08012ee0 	.word	0x08012ee0

0800ccd0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b08a      	sub	sp, #40	; 0x28
 800ccd4:	af04      	add	r7, sp, #16
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	60b9      	str	r1, [r7, #8]
 800ccda:	607a      	str	r2, [r7, #4]
 800ccdc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d106      	bne.n	800ccf2 <tcp_output_control_segment+0x22>
 800cce4:	4b1c      	ldr	r3, [pc, #112]	; (800cd58 <tcp_output_control_segment+0x88>)
 800cce6:	f240 7287 	movw	r2, #1927	; 0x787
 800ccea:	491c      	ldr	r1, [pc, #112]	; (800cd5c <tcp_output_control_segment+0x8c>)
 800ccec:	481c      	ldr	r0, [pc, #112]	; (800cd60 <tcp_output_control_segment+0x90>)
 800ccee:	f003 f821 	bl	800fd34 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800ccf2:	683a      	ldr	r2, [r7, #0]
 800ccf4:	6879      	ldr	r1, [r7, #4]
 800ccf6:	68f8      	ldr	r0, [r7, #12]
 800ccf8:	f7fe fae8 	bl	800b2cc <tcp_route>
 800ccfc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d102      	bne.n	800cd0a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800cd04:	23fc      	movs	r3, #252	; 0xfc
 800cd06:	75fb      	strb	r3, [r7, #23]
 800cd08:	e01c      	b.n	800cd44 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d006      	beq.n	800cd1e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	7adb      	ldrb	r3, [r3, #11]
 800cd14:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	7a9b      	ldrb	r3, [r3, #10]
 800cd1a:	757b      	strb	r3, [r7, #21]
 800cd1c:	e003      	b.n	800cd26 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800cd1e:	23ff      	movs	r3, #255	; 0xff
 800cd20:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800cd22:	2300      	movs	r3, #0
 800cd24:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800cd26:	7dba      	ldrb	r2, [r7, #22]
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	9302      	str	r3, [sp, #8]
 800cd2c:	2306      	movs	r3, #6
 800cd2e:	9301      	str	r3, [sp, #4]
 800cd30:	7d7b      	ldrb	r3, [r7, #21]
 800cd32:	9300      	str	r3, [sp, #0]
 800cd34:	4613      	mov	r3, r2
 800cd36:	683a      	ldr	r2, [r7, #0]
 800cd38:	6879      	ldr	r1, [r7, #4]
 800cd3a:	68b8      	ldr	r0, [r7, #8]
 800cd3c:	f001 ff70 	bl	800ec20 <ip4_output_if>
 800cd40:	4603      	mov	r3, r0
 800cd42:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800cd44:	68b8      	ldr	r0, [r7, #8]
 800cd46:	f7f9 fe4f 	bl	80069e8 <pbuf_free>
  return err;
 800cd4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3718      	adds	r7, #24
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}
 800cd56:	bf00      	nop
 800cd58:	080128b8 	.word	0x080128b8
 800cd5c:	08013010 	.word	0x08013010
 800cd60:	0801290c 	.word	0x0801290c

0800cd64 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800cd64:	b590      	push	{r4, r7, lr}
 800cd66:	b08b      	sub	sp, #44	; 0x2c
 800cd68:	af04      	add	r7, sp, #16
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	60b9      	str	r1, [r7, #8]
 800cd6e:	607a      	str	r2, [r7, #4]
 800cd70:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d106      	bne.n	800cd86 <tcp_rst+0x22>
 800cd78:	4b1f      	ldr	r3, [pc, #124]	; (800cdf8 <tcp_rst+0x94>)
 800cd7a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800cd7e:	491f      	ldr	r1, [pc, #124]	; (800cdfc <tcp_rst+0x98>)
 800cd80:	481f      	ldr	r0, [pc, #124]	; (800ce00 <tcp_rst+0x9c>)
 800cd82:	f002 ffd7 	bl	800fd34 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800cd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d106      	bne.n	800cd9a <tcp_rst+0x36>
 800cd8c:	4b1a      	ldr	r3, [pc, #104]	; (800cdf8 <tcp_rst+0x94>)
 800cd8e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800cd92:	491c      	ldr	r1, [pc, #112]	; (800ce04 <tcp_rst+0xa0>)
 800cd94:	481a      	ldr	r0, [pc, #104]	; (800ce00 <tcp_rst+0x9c>)
 800cd96:	f002 ffcd 	bl	800fd34 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800cd9e:	f246 0308 	movw	r3, #24584	; 0x6008
 800cda2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800cda4:	7dfb      	ldrb	r3, [r7, #23]
 800cda6:	b29c      	uxth	r4, r3
 800cda8:	68b8      	ldr	r0, [r7, #8]
 800cdaa:	f7f8 fb7e 	bl	80054aa <lwip_htonl>
 800cdae:	4602      	mov	r2, r0
 800cdb0:	8abb      	ldrh	r3, [r7, #20]
 800cdb2:	9303      	str	r3, [sp, #12]
 800cdb4:	2314      	movs	r3, #20
 800cdb6:	9302      	str	r3, [sp, #8]
 800cdb8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cdba:	9301      	str	r3, [sp, #4]
 800cdbc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cdbe:	9300      	str	r3, [sp, #0]
 800cdc0:	4613      	mov	r3, r2
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	4621      	mov	r1, r4
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f7ff fe92 	bl	800caf0 <tcp_output_alloc_header_common>
 800cdcc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d00c      	beq.n	800cdee <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cdd4:	7dfb      	ldrb	r3, [r7, #23]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	6939      	ldr	r1, [r7, #16]
 800cdda:	68f8      	ldr	r0, [r7, #12]
 800cddc:	f7ff ff38 	bl	800cc50 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800cde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde2:	683a      	ldr	r2, [r7, #0]
 800cde4:	6939      	ldr	r1, [r7, #16]
 800cde6:	68f8      	ldr	r0, [r7, #12]
 800cde8:	f7ff ff72 	bl	800ccd0 <tcp_output_control_segment>
 800cdec:	e000      	b.n	800cdf0 <tcp_rst+0x8c>
    return;
 800cdee:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800cdf0:	371c      	adds	r7, #28
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd90      	pop	{r4, r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	080128b8 	.word	0x080128b8
 800cdfc:	0801303c 	.word	0x0801303c
 800ce00:	0801290c 	.word	0x0801290c
 800ce04:	08013058 	.word	0x08013058

0800ce08 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ce08:	b590      	push	{r4, r7, lr}
 800ce0a:	b087      	sub	sp, #28
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800ce10:	2300      	movs	r3, #0
 800ce12:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800ce14:	2300      	movs	r3, #0
 800ce16:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d106      	bne.n	800ce2c <tcp_send_empty_ack+0x24>
 800ce1e:	4b28      	ldr	r3, [pc, #160]	; (800cec0 <tcp_send_empty_ack+0xb8>)
 800ce20:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800ce24:	4927      	ldr	r1, [pc, #156]	; (800cec4 <tcp_send_empty_ack+0xbc>)
 800ce26:	4828      	ldr	r0, [pc, #160]	; (800cec8 <tcp_send_empty_ack+0xc0>)
 800ce28:	f002 ff84 	bl	800fd34 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ce2c:	7dfb      	ldrb	r3, [r7, #23]
 800ce2e:	009b      	lsls	r3, r3, #2
 800ce30:	b2db      	uxtb	r3, r3
 800ce32:	f003 0304 	and.w	r3, r3, #4
 800ce36:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ce38:	7d7b      	ldrb	r3, [r7, #21]
 800ce3a:	b29c      	uxth	r4, r3
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7f8 fb32 	bl	80054aa <lwip_htonl>
 800ce46:	4603      	mov	r3, r0
 800ce48:	2200      	movs	r2, #0
 800ce4a:	4621      	mov	r1, r4
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f7ff fec1 	bl	800cbd4 <tcp_output_alloc_header>
 800ce52:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d109      	bne.n	800ce6e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	8b5b      	ldrh	r3, [r3, #26]
 800ce5e:	f043 0303 	orr.w	r3, r3, #3
 800ce62:	b29a      	uxth	r2, r3
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ce68:	f06f 0301 	mvn.w	r3, #1
 800ce6c:	e023      	b.n	800ceb6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ce6e:	7dbb      	ldrb	r3, [r7, #22]
 800ce70:	7dfa      	ldrb	r2, [r7, #23]
 800ce72:	6939      	ldr	r1, [r7, #16]
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f7ff feeb 	bl	800cc50 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ce7a:	687a      	ldr	r2, [r7, #4]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	3304      	adds	r3, #4
 800ce80:	6939      	ldr	r1, [r7, #16]
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f7ff ff24 	bl	800ccd0 <tcp_output_control_segment>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ce8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d007      	beq.n	800cea4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	8b5b      	ldrh	r3, [r3, #26]
 800ce98:	f043 0303 	orr.w	r3, r3, #3
 800ce9c:	b29a      	uxth	r2, r3
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	835a      	strh	r2, [r3, #26]
 800cea2:	e006      	b.n	800ceb2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	8b5b      	ldrh	r3, [r3, #26]
 800cea8:	f023 0303 	bic.w	r3, r3, #3
 800ceac:	b29a      	uxth	r2, r3
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ceb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	371c      	adds	r7, #28
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd90      	pop	{r4, r7, pc}
 800cebe:	bf00      	nop
 800cec0:	080128b8 	.word	0x080128b8
 800cec4:	08013074 	.word	0x08013074
 800cec8:	0801290c 	.word	0x0801290c

0800cecc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800cecc:	b590      	push	{r4, r7, lr}
 800cece:	b087      	sub	sp, #28
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ced4:	2300      	movs	r3, #0
 800ced6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d106      	bne.n	800ceec <tcp_keepalive+0x20>
 800cede:	4b18      	ldr	r3, [pc, #96]	; (800cf40 <tcp_keepalive+0x74>)
 800cee0:	f640 0224 	movw	r2, #2084	; 0x824
 800cee4:	4917      	ldr	r1, [pc, #92]	; (800cf44 <tcp_keepalive+0x78>)
 800cee6:	4818      	ldr	r0, [pc, #96]	; (800cf48 <tcp_keepalive+0x7c>)
 800cee8:	f002 ff24 	bl	800fd34 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ceec:	7dfb      	ldrb	r3, [r7, #23]
 800ceee:	b29c      	uxth	r4, r3
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cef4:	3b01      	subs	r3, #1
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7f8 fad7 	bl	80054aa <lwip_htonl>
 800cefc:	4603      	mov	r3, r0
 800cefe:	2200      	movs	r2, #0
 800cf00:	4621      	mov	r1, r4
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f7ff fe66 	bl	800cbd4 <tcp_output_alloc_header>
 800cf08:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d102      	bne.n	800cf16 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800cf10:	f04f 33ff 	mov.w	r3, #4294967295
 800cf14:	e010      	b.n	800cf38 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cf16:	7dfb      	ldrb	r3, [r7, #23]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	6939      	ldr	r1, [r7, #16]
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f7ff fe97 	bl	800cc50 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	3304      	adds	r3, #4
 800cf28:	6939      	ldr	r1, [r7, #16]
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f7ff fed0 	bl	800ccd0 <tcp_output_control_segment>
 800cf30:	4603      	mov	r3, r0
 800cf32:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800cf34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	371c      	adds	r7, #28
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd90      	pop	{r4, r7, pc}
 800cf40:	080128b8 	.word	0x080128b8
 800cf44:	08013094 	.word	0x08013094
 800cf48:	0801290c 	.word	0x0801290c

0800cf4c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800cf4c:	b590      	push	{r4, r7, lr}
 800cf4e:	b08b      	sub	sp, #44	; 0x2c
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cf54:	2300      	movs	r3, #0
 800cf56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d106      	bne.n	800cf6e <tcp_zero_window_probe+0x22>
 800cf60:	4b4c      	ldr	r3, [pc, #304]	; (800d094 <tcp_zero_window_probe+0x148>)
 800cf62:	f640 024f 	movw	r2, #2127	; 0x84f
 800cf66:	494c      	ldr	r1, [pc, #304]	; (800d098 <tcp_zero_window_probe+0x14c>)
 800cf68:	484c      	ldr	r0, [pc, #304]	; (800d09c <tcp_zero_window_probe+0x150>)
 800cf6a:	f002 fee3 	bl	800fd34 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf72:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800cf74:	6a3b      	ldr	r3, [r7, #32]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d101      	bne.n	800cf7e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	e086      	b.n	800d08c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cf84:	2bff      	cmp	r3, #255	; 0xff
 800cf86:	d007      	beq.n	800cf98 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cf8e:	3301      	adds	r3, #1
 800cf90:	b2da      	uxtb	r2, r3
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800cf98:	6a3b      	ldr	r3, [r7, #32]
 800cf9a:	68db      	ldr	r3, [r3, #12]
 800cf9c:	899b      	ldrh	r3, [r3, #12]
 800cf9e:	b29b      	uxth	r3, r3
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f7f8 fa6d 	bl	8005480 <lwip_htons>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	b2db      	uxtb	r3, r3
 800cfaa:	f003 0301 	and.w	r3, r3, #1
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d005      	beq.n	800cfbe <tcp_zero_window_probe+0x72>
 800cfb2:	6a3b      	ldr	r3, [r7, #32]
 800cfb4:	891b      	ldrh	r3, [r3, #8]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d101      	bne.n	800cfbe <tcp_zero_window_probe+0x72>
 800cfba:	2301      	movs	r3, #1
 800cfbc:	e000      	b.n	800cfc0 <tcp_zero_window_probe+0x74>
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800cfc2:	7ffb      	ldrb	r3, [r7, #31]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	bf0c      	ite	eq
 800cfc8:	2301      	moveq	r3, #1
 800cfca:	2300      	movne	r3, #0
 800cfcc:	b2db      	uxtb	r3, r3
 800cfce:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800cfd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfd4:	b299      	uxth	r1, r3
 800cfd6:	6a3b      	ldr	r3, [r7, #32]
 800cfd8:	68db      	ldr	r3, [r3, #12]
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	8bba      	ldrh	r2, [r7, #28]
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f7ff fdf8 	bl	800cbd4 <tcp_output_alloc_header>
 800cfe4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800cfe6:	69bb      	ldr	r3, [r7, #24]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d102      	bne.n	800cff2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800cfec:	f04f 33ff 	mov.w	r3, #4294967295
 800cff0:	e04c      	b.n	800d08c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800cff2:	69bb      	ldr	r3, [r7, #24]
 800cff4:	685b      	ldr	r3, [r3, #4]
 800cff6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800cff8:	7ffb      	ldrb	r3, [r7, #31]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d011      	beq.n	800d022 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	899b      	ldrh	r3, [r3, #12]
 800d002:	b29b      	uxth	r3, r3
 800d004:	b21b      	sxth	r3, r3
 800d006:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d00a:	b21c      	sxth	r4, r3
 800d00c:	2011      	movs	r0, #17
 800d00e:	f7f8 fa37 	bl	8005480 <lwip_htons>
 800d012:	4603      	mov	r3, r0
 800d014:	b21b      	sxth	r3, r3
 800d016:	4323      	orrs	r3, r4
 800d018:	b21b      	sxth	r3, r3
 800d01a:	b29a      	uxth	r2, r3
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	819a      	strh	r2, [r3, #12]
 800d020:	e010      	b.n	800d044 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	3314      	adds	r3, #20
 800d028:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d02a:	6a3b      	ldr	r3, [r7, #32]
 800d02c:	6858      	ldr	r0, [r3, #4]
 800d02e:	6a3b      	ldr	r3, [r7, #32]
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	891a      	ldrh	r2, [r3, #8]
 800d034:	6a3b      	ldr	r3, [r7, #32]
 800d036:	891b      	ldrh	r3, [r3, #8]
 800d038:	1ad3      	subs	r3, r2, r3
 800d03a:	b29b      	uxth	r3, r3
 800d03c:	2201      	movs	r2, #1
 800d03e:	6939      	ldr	r1, [r7, #16]
 800d040:	f7f9 fecc 	bl	8006ddc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d044:	6a3b      	ldr	r3, [r7, #32]
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	685b      	ldr	r3, [r3, #4]
 800d04a:	4618      	mov	r0, r3
 800d04c:	f7f8 fa2d 	bl	80054aa <lwip_htonl>
 800d050:	4603      	mov	r3, r0
 800d052:	3301      	adds	r3, #1
 800d054:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	1ad3      	subs	r3, r2, r3
 800d05e:	2b00      	cmp	r3, #0
 800d060:	da02      	bge.n	800d068 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	68fa      	ldr	r2, [r7, #12]
 800d066:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d06c:	2200      	movs	r2, #0
 800d06e:	69b9      	ldr	r1, [r7, #24]
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f7ff fded 	bl	800cc50 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d076:	687a      	ldr	r2, [r7, #4]
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	3304      	adds	r3, #4
 800d07c:	69b9      	ldr	r1, [r7, #24]
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f7ff fe26 	bl	800ccd0 <tcp_output_control_segment>
 800d084:	4603      	mov	r3, r0
 800d086:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d088:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	372c      	adds	r7, #44	; 0x2c
 800d090:	46bd      	mov	sp, r7
 800d092:	bd90      	pop	{r4, r7, pc}
 800d094:	080128b8 	.word	0x080128b8
 800d098:	080130b0 	.word	0x080130b0
 800d09c:	0801290c 	.word	0x0801290c

0800d0a0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d0a8:	f7fa f818 	bl	80070dc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d0ac:	4b0a      	ldr	r3, [pc, #40]	; (800d0d8 <tcpip_tcp_timer+0x38>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d103      	bne.n	800d0bc <tcpip_tcp_timer+0x1c>
 800d0b4:	4b09      	ldr	r3, [pc, #36]	; (800d0dc <tcpip_tcp_timer+0x3c>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d005      	beq.n	800d0c8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d0bc:	2200      	movs	r2, #0
 800d0be:	4908      	ldr	r1, [pc, #32]	; (800d0e0 <tcpip_tcp_timer+0x40>)
 800d0c0:	20fa      	movs	r0, #250	; 0xfa
 800d0c2:	f000 f8f3 	bl	800d2ac <sys_timeout>
 800d0c6:	e003      	b.n	800d0d0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d0c8:	4b06      	ldr	r3, [pc, #24]	; (800d0e4 <tcpip_tcp_timer+0x44>)
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	601a      	str	r2, [r3, #0]
  }
}
 800d0ce:	bf00      	nop
 800d0d0:	bf00      	nop
 800d0d2:	3708      	adds	r7, #8
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	20006a2c 	.word	0x20006a2c
 800d0dc:	20006a3c 	.word	0x20006a3c
 800d0e0:	0800d0a1 	.word	0x0800d0a1
 800d0e4:	2000011c 	.word	0x2000011c

0800d0e8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d0ec:	4b0a      	ldr	r3, [pc, #40]	; (800d118 <tcp_timer_needed+0x30>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d10f      	bne.n	800d114 <tcp_timer_needed+0x2c>
 800d0f4:	4b09      	ldr	r3, [pc, #36]	; (800d11c <tcp_timer_needed+0x34>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d103      	bne.n	800d104 <tcp_timer_needed+0x1c>
 800d0fc:	4b08      	ldr	r3, [pc, #32]	; (800d120 <tcp_timer_needed+0x38>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d007      	beq.n	800d114 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d104:	4b04      	ldr	r3, [pc, #16]	; (800d118 <tcp_timer_needed+0x30>)
 800d106:	2201      	movs	r2, #1
 800d108:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d10a:	2200      	movs	r2, #0
 800d10c:	4905      	ldr	r1, [pc, #20]	; (800d124 <tcp_timer_needed+0x3c>)
 800d10e:	20fa      	movs	r0, #250	; 0xfa
 800d110:	f000 f8cc 	bl	800d2ac <sys_timeout>
  }
}
 800d114:	bf00      	nop
 800d116:	bd80      	pop	{r7, pc}
 800d118:	2000011c 	.word	0x2000011c
 800d11c:	20006a2c 	.word	0x20006a2c
 800d120:	20006a3c 	.word	0x20006a3c
 800d124:	0800d0a1 	.word	0x0800d0a1

0800d128 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b086      	sub	sp, #24
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	60f8      	str	r0, [r7, #12]
 800d130:	60b9      	str	r1, [r7, #8]
 800d132:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d134:	2006      	movs	r0, #6
 800d136:	f7f8 fdf9 	bl	8005d2c <memp_malloc>
 800d13a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d109      	bne.n	800d156 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d151      	bne.n	800d1ec <sys_timeout_abs+0xc4>
 800d148:	4b2a      	ldr	r3, [pc, #168]	; (800d1f4 <sys_timeout_abs+0xcc>)
 800d14a:	22be      	movs	r2, #190	; 0xbe
 800d14c:	492a      	ldr	r1, [pc, #168]	; (800d1f8 <sys_timeout_abs+0xd0>)
 800d14e:	482b      	ldr	r0, [pc, #172]	; (800d1fc <sys_timeout_abs+0xd4>)
 800d150:	f002 fdf0 	bl	800fd34 <iprintf>
    return;
 800d154:	e04a      	b.n	800d1ec <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	2200      	movs	r2, #0
 800d15a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	68ba      	ldr	r2, [r7, #8]
 800d160:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	687a      	ldr	r2, [r7, #4]
 800d166:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	68fa      	ldr	r2, [r7, #12]
 800d16c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d16e:	4b24      	ldr	r3, [pc, #144]	; (800d200 <sys_timeout_abs+0xd8>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d103      	bne.n	800d17e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d176:	4a22      	ldr	r2, [pc, #136]	; (800d200 <sys_timeout_abs+0xd8>)
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	6013      	str	r3, [r2, #0]
    return;
 800d17c:	e037      	b.n	800d1ee <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	685a      	ldr	r2, [r3, #4]
 800d182:	4b1f      	ldr	r3, [pc, #124]	; (800d200 <sys_timeout_abs+0xd8>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	1ad3      	subs	r3, r2, r3
 800d18a:	0fdb      	lsrs	r3, r3, #31
 800d18c:	f003 0301 	and.w	r3, r3, #1
 800d190:	b2db      	uxtb	r3, r3
 800d192:	2b00      	cmp	r3, #0
 800d194:	d007      	beq.n	800d1a6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d196:	4b1a      	ldr	r3, [pc, #104]	; (800d200 <sys_timeout_abs+0xd8>)
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d19e:	4a18      	ldr	r2, [pc, #96]	; (800d200 <sys_timeout_abs+0xd8>)
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	6013      	str	r3, [r2, #0]
 800d1a4:	e023      	b.n	800d1ee <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d1a6:	4b16      	ldr	r3, [pc, #88]	; (800d200 <sys_timeout_abs+0xd8>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	617b      	str	r3, [r7, #20]
 800d1ac:	e01a      	b.n	800d1e4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d00b      	beq.n	800d1ce <sys_timeout_abs+0xa6>
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	685a      	ldr	r2, [r3, #4]
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	685b      	ldr	r3, [r3, #4]
 800d1c0:	1ad3      	subs	r3, r2, r3
 800d1c2:	0fdb      	lsrs	r3, r3, #31
 800d1c4:	f003 0301 	and.w	r3, r3, #1
 800d1c8:	b2db      	uxtb	r3, r3
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d007      	beq.n	800d1de <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	681a      	ldr	r2, [r3, #0]
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	693a      	ldr	r2, [r7, #16]
 800d1da:	601a      	str	r2, [r3, #0]
        break;
 800d1dc:	e007      	b.n	800d1ee <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	617b      	str	r3, [r7, #20]
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d1e1      	bne.n	800d1ae <sys_timeout_abs+0x86>
 800d1ea:	e000      	b.n	800d1ee <sys_timeout_abs+0xc6>
    return;
 800d1ec:	bf00      	nop
      }
    }
  }
}
 800d1ee:	3718      	adds	r7, #24
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}
 800d1f4:	080130d4 	.word	0x080130d4
 800d1f8:	08013108 	.word	0x08013108
 800d1fc:	08013148 	.word	0x08013148
 800d200:	20000114 	.word	0x20000114

0800d204 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b086      	sub	sp, #24
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	4798      	blx	r3

  now = sys_now();
 800d216:	f7f8 f8a5 	bl	8005364 <sys_now>
 800d21a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	4b0f      	ldr	r3, [pc, #60]	; (800d260 <lwip_cyclic_timer+0x5c>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4413      	add	r3, r2
 800d226:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d228:	68fa      	ldr	r2, [r7, #12]
 800d22a:	693b      	ldr	r3, [r7, #16]
 800d22c:	1ad3      	subs	r3, r2, r3
 800d22e:	0fdb      	lsrs	r3, r3, #31
 800d230:	f003 0301 	and.w	r3, r3, #1
 800d234:	b2db      	uxtb	r3, r3
 800d236:	2b00      	cmp	r3, #0
 800d238:	d009      	beq.n	800d24e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	681a      	ldr	r2, [r3, #0]
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	4413      	add	r3, r2
 800d242:	687a      	ldr	r2, [r7, #4]
 800d244:	4907      	ldr	r1, [pc, #28]	; (800d264 <lwip_cyclic_timer+0x60>)
 800d246:	4618      	mov	r0, r3
 800d248:	f7ff ff6e 	bl	800d128 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d24c:	e004      	b.n	800d258 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	4904      	ldr	r1, [pc, #16]	; (800d264 <lwip_cyclic_timer+0x60>)
 800d252:	68f8      	ldr	r0, [r7, #12]
 800d254:	f7ff ff68 	bl	800d128 <sys_timeout_abs>
}
 800d258:	bf00      	nop
 800d25a:	3718      	adds	r7, #24
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	20000118 	.word	0x20000118
 800d264:	0800d205 	.word	0x0800d205

0800d268 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b082      	sub	sp, #8
 800d26c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d26e:	2301      	movs	r3, #1
 800d270:	607b      	str	r3, [r7, #4]
 800d272:	e00e      	b.n	800d292 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d274:	4a0b      	ldr	r2, [pc, #44]	; (800d2a4 <sys_timeouts_init+0x3c>)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	00db      	lsls	r3, r3, #3
 800d280:	4a08      	ldr	r2, [pc, #32]	; (800d2a4 <sys_timeouts_init+0x3c>)
 800d282:	4413      	add	r3, r2
 800d284:	461a      	mov	r2, r3
 800d286:	4908      	ldr	r1, [pc, #32]	; (800d2a8 <sys_timeouts_init+0x40>)
 800d288:	f000 f810 	bl	800d2ac <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	3301      	adds	r3, #1
 800d290:	607b      	str	r3, [r7, #4]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2b02      	cmp	r3, #2
 800d296:	d9ed      	bls.n	800d274 <sys_timeouts_init+0xc>
  }
}
 800d298:	bf00      	nop
 800d29a:	bf00      	nop
 800d29c:	3708      	adds	r7, #8
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop
 800d2a4:	08013cac 	.word	0x08013cac
 800d2a8:	0800d205 	.word	0x0800d205

0800d2ac <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b086      	sub	sp, #24
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	60f8      	str	r0, [r7, #12]
 800d2b4:	60b9      	str	r1, [r7, #8]
 800d2b6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2be:	d306      	bcc.n	800d2ce <sys_timeout+0x22>
 800d2c0:	4b0a      	ldr	r3, [pc, #40]	; (800d2ec <sys_timeout+0x40>)
 800d2c2:	f240 1229 	movw	r2, #297	; 0x129
 800d2c6:	490a      	ldr	r1, [pc, #40]	; (800d2f0 <sys_timeout+0x44>)
 800d2c8:	480a      	ldr	r0, [pc, #40]	; (800d2f4 <sys_timeout+0x48>)
 800d2ca:	f002 fd33 	bl	800fd34 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d2ce:	f7f8 f849 	bl	8005364 <sys_now>
 800d2d2:	4602      	mov	r2, r0
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	4413      	add	r3, r2
 800d2d8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d2da:	687a      	ldr	r2, [r7, #4]
 800d2dc:	68b9      	ldr	r1, [r7, #8]
 800d2de:	6978      	ldr	r0, [r7, #20]
 800d2e0:	f7ff ff22 	bl	800d128 <sys_timeout_abs>
#endif
}
 800d2e4:	bf00      	nop
 800d2e6:	3718      	adds	r7, #24
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}
 800d2ec:	080130d4 	.word	0x080130d4
 800d2f0:	08013170 	.word	0x08013170
 800d2f4:	08013148 	.word	0x08013148

0800d2f8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b084      	sub	sp, #16
 800d2fc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d2fe:	f7f8 f831 	bl	8005364 <sys_now>
 800d302:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d304:	4b1a      	ldr	r3, [pc, #104]	; (800d370 <sys_check_timeouts+0x78>)
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d001      	beq.n	800d312 <sys_check_timeouts+0x1a>
 800d30e:	f7f9 f831 	bl	8006374 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d312:	4b18      	ldr	r3, [pc, #96]	; (800d374 <sys_check_timeouts+0x7c>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d022      	beq.n	800d364 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	68fa      	ldr	r2, [r7, #12]
 800d324:	1ad3      	subs	r3, r2, r3
 800d326:	0fdb      	lsrs	r3, r3, #31
 800d328:	f003 0301 	and.w	r3, r3, #1
 800d32c:	b2db      	uxtb	r3, r3
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d11a      	bne.n	800d368 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	4a0f      	ldr	r2, [pc, #60]	; (800d374 <sys_check_timeouts+0x7c>)
 800d338:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	689b      	ldr	r3, [r3, #8]
 800d33e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	68db      	ldr	r3, [r3, #12]
 800d344:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	685b      	ldr	r3, [r3, #4]
 800d34a:	4a0b      	ldr	r2, [pc, #44]	; (800d378 <sys_check_timeouts+0x80>)
 800d34c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d34e:	68b9      	ldr	r1, [r7, #8]
 800d350:	2006      	movs	r0, #6
 800d352:	f7f8 fd37 	bl	8005dc4 <memp_free>
    if (handler != NULL) {
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d0d3      	beq.n	800d304 <sys_check_timeouts+0xc>
      handler(arg);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6838      	ldr	r0, [r7, #0]
 800d360:	4798      	blx	r3
  do {
 800d362:	e7cf      	b.n	800d304 <sys_check_timeouts+0xc>
      return;
 800d364:	bf00      	nop
 800d366:	e000      	b.n	800d36a <sys_check_timeouts+0x72>
      return;
 800d368:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d36a:	3710      	adds	r7, #16
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}
 800d370:	20006a24 	.word	0x20006a24
 800d374:	20000114 	.word	0x20000114
 800d378:	20000118 	.word	0x20000118

0800d37c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d380:	f002 fcf0 	bl	800fd64 <rand>
 800d384:	4603      	mov	r3, r0
 800d386:	b29b      	uxth	r3, r3
 800d388:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d392:	b29a      	uxth	r2, r3
 800d394:	4b01      	ldr	r3, [pc, #4]	; (800d39c <udp_init+0x20>)
 800d396:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d398:	bf00      	nop
 800d39a:	bd80      	pop	{r7, pc}
 800d39c:	2000001c 	.word	0x2000001c

0800d3a0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b084      	sub	sp, #16
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	60f8      	str	r0, [r7, #12]
 800d3a8:	60b9      	str	r1, [r7, #8]
 800d3aa:	4613      	mov	r3, r2
 800d3ac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d105      	bne.n	800d3c0 <udp_input_local_match+0x20>
 800d3b4:	4b27      	ldr	r3, [pc, #156]	; (800d454 <udp_input_local_match+0xb4>)
 800d3b6:	2287      	movs	r2, #135	; 0x87
 800d3b8:	4927      	ldr	r1, [pc, #156]	; (800d458 <udp_input_local_match+0xb8>)
 800d3ba:	4828      	ldr	r0, [pc, #160]	; (800d45c <udp_input_local_match+0xbc>)
 800d3bc:	f002 fcba 	bl	800fd34 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d105      	bne.n	800d3d2 <udp_input_local_match+0x32>
 800d3c6:	4b23      	ldr	r3, [pc, #140]	; (800d454 <udp_input_local_match+0xb4>)
 800d3c8:	2288      	movs	r2, #136	; 0x88
 800d3ca:	4925      	ldr	r1, [pc, #148]	; (800d460 <udp_input_local_match+0xc0>)
 800d3cc:	4823      	ldr	r0, [pc, #140]	; (800d45c <udp_input_local_match+0xbc>)
 800d3ce:	f002 fcb1 	bl	800fd34 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	7a1b      	ldrb	r3, [r3, #8]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d00b      	beq.n	800d3f2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	7a1a      	ldrb	r2, [r3, #8]
 800d3de:	4b21      	ldr	r3, [pc, #132]	; (800d464 <udp_input_local_match+0xc4>)
 800d3e0:	685b      	ldr	r3, [r3, #4]
 800d3e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d3e6:	3301      	adds	r3, #1
 800d3e8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	d001      	beq.n	800d3f2 <udp_input_local_match+0x52>
    return 0;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	e02b      	b.n	800d44a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d3f2:	79fb      	ldrb	r3, [r7, #7]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d018      	beq.n	800d42a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d013      	beq.n	800d426 <udp_input_local_match+0x86>
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d00f      	beq.n	800d426 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d406:	4b17      	ldr	r3, [pc, #92]	; (800d464 <udp_input_local_match+0xc4>)
 800d408:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d40a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d40e:	d00a      	beq.n	800d426 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	681a      	ldr	r2, [r3, #0]
 800d414:	4b13      	ldr	r3, [pc, #76]	; (800d464 <udp_input_local_match+0xc4>)
 800d416:	695b      	ldr	r3, [r3, #20]
 800d418:	405a      	eors	r2, r3
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	3308      	adds	r3, #8
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d422:	2b00      	cmp	r3, #0
 800d424:	d110      	bne.n	800d448 <udp_input_local_match+0xa8>
          return 1;
 800d426:	2301      	movs	r3, #1
 800d428:	e00f      	b.n	800d44a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d009      	beq.n	800d444 <udp_input_local_match+0xa4>
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d005      	beq.n	800d444 <udp_input_local_match+0xa4>
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681a      	ldr	r2, [r3, #0]
 800d43c:	4b09      	ldr	r3, [pc, #36]	; (800d464 <udp_input_local_match+0xc4>)
 800d43e:	695b      	ldr	r3, [r3, #20]
 800d440:	429a      	cmp	r2, r3
 800d442:	d101      	bne.n	800d448 <udp_input_local_match+0xa8>
        return 1;
 800d444:	2301      	movs	r3, #1
 800d446:	e000      	b.n	800d44a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800d448:	2300      	movs	r3, #0
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3710      	adds	r7, #16
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}
 800d452:	bf00      	nop
 800d454:	080131bc 	.word	0x080131bc
 800d458:	080131ec 	.word	0x080131ec
 800d45c:	08013210 	.word	0x08013210
 800d460:	08013238 	.word	0x08013238
 800d464:	200034e8 	.word	0x200034e8

0800d468 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d468:	b590      	push	{r4, r7, lr}
 800d46a:	b08d      	sub	sp, #52	; 0x34
 800d46c:	af02      	add	r7, sp, #8
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d472:	2300      	movs	r3, #0
 800d474:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d105      	bne.n	800d488 <udp_input+0x20>
 800d47c:	4b7c      	ldr	r3, [pc, #496]	; (800d670 <udp_input+0x208>)
 800d47e:	22cf      	movs	r2, #207	; 0xcf
 800d480:	497c      	ldr	r1, [pc, #496]	; (800d674 <udp_input+0x20c>)
 800d482:	487d      	ldr	r0, [pc, #500]	; (800d678 <udp_input+0x210>)
 800d484:	f002 fc56 	bl	800fd34 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d105      	bne.n	800d49a <udp_input+0x32>
 800d48e:	4b78      	ldr	r3, [pc, #480]	; (800d670 <udp_input+0x208>)
 800d490:	22d0      	movs	r2, #208	; 0xd0
 800d492:	497a      	ldr	r1, [pc, #488]	; (800d67c <udp_input+0x214>)
 800d494:	4878      	ldr	r0, [pc, #480]	; (800d678 <udp_input+0x210>)
 800d496:	f002 fc4d 	bl	800fd34 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	895b      	ldrh	r3, [r3, #10]
 800d49e:	2b07      	cmp	r3, #7
 800d4a0:	d803      	bhi.n	800d4aa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f7f9 faa0 	bl	80069e8 <pbuf_free>
    goto end;
 800d4a8:	e0de      	b.n	800d668 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d4b0:	4b73      	ldr	r3, [pc, #460]	; (800d680 <udp_input+0x218>)
 800d4b2:	695b      	ldr	r3, [r3, #20]
 800d4b4:	4a72      	ldr	r2, [pc, #456]	; (800d680 <udp_input+0x218>)
 800d4b6:	6812      	ldr	r2, [r2, #0]
 800d4b8:	4611      	mov	r1, r2
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f001 fc88 	bl	800edd0 <ip4_addr_isbroadcast_u32>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	881b      	ldrh	r3, [r3, #0]
 800d4c8:	b29b      	uxth	r3, r3
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7f7 ffd8 	bl	8005480 <lwip_htons>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	885b      	ldrh	r3, [r3, #2]
 800d4d8:	b29b      	uxth	r3, r3
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7f7 ffd0 	bl	8005480 <lwip_htons>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d4f0:	4b64      	ldr	r3, [pc, #400]	; (800d684 <udp_input+0x21c>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	627b      	str	r3, [r7, #36]	; 0x24
 800d4f6:	e054      	b.n	800d5a2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4fa:	8a5b      	ldrh	r3, [r3, #18]
 800d4fc:	89fa      	ldrh	r2, [r7, #14]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d14a      	bne.n	800d598 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d502:	7cfb      	ldrb	r3, [r7, #19]
 800d504:	461a      	mov	r2, r3
 800d506:	6839      	ldr	r1, [r7, #0]
 800d508:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d50a:	f7ff ff49 	bl	800d3a0 <udp_input_local_match>
 800d50e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d510:	2b00      	cmp	r3, #0
 800d512:	d041      	beq.n	800d598 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d516:	7c1b      	ldrb	r3, [r3, #16]
 800d518:	f003 0304 	and.w	r3, r3, #4
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d11d      	bne.n	800d55c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800d520:	69fb      	ldr	r3, [r7, #28]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d102      	bne.n	800d52c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800d526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d528:	61fb      	str	r3, [r7, #28]
 800d52a:	e017      	b.n	800d55c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d52c:	7cfb      	ldrb	r3, [r7, #19]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d014      	beq.n	800d55c <udp_input+0xf4>
 800d532:	4b53      	ldr	r3, [pc, #332]	; (800d680 <udp_input+0x218>)
 800d534:	695b      	ldr	r3, [r3, #20]
 800d536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d53a:	d10f      	bne.n	800d55c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d53c:	69fb      	ldr	r3, [r7, #28]
 800d53e:	681a      	ldr	r2, [r3, #0]
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	3304      	adds	r3, #4
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	429a      	cmp	r2, r3
 800d548:	d008      	beq.n	800d55c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d54c:	681a      	ldr	r2, [r3, #0]
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	3304      	adds	r3, #4
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	429a      	cmp	r2, r3
 800d556:	d101      	bne.n	800d55c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800d558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d55a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d55e:	8a9b      	ldrh	r3, [r3, #20]
 800d560:	8a3a      	ldrh	r2, [r7, #16]
 800d562:	429a      	cmp	r2, r3
 800d564:	d118      	bne.n	800d598 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d568:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d005      	beq.n	800d57a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d570:	685a      	ldr	r2, [r3, #4]
 800d572:	4b43      	ldr	r3, [pc, #268]	; (800d680 <udp_input+0x218>)
 800d574:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d576:	429a      	cmp	r2, r3
 800d578:	d10e      	bne.n	800d598 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d57a:	6a3b      	ldr	r3, [r7, #32]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d014      	beq.n	800d5aa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d582:	68da      	ldr	r2, [r3, #12]
 800d584:	6a3b      	ldr	r3, [r7, #32]
 800d586:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d588:	4b3e      	ldr	r3, [pc, #248]	; (800d684 <udp_input+0x21c>)
 800d58a:	681a      	ldr	r2, [r3, #0]
 800d58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d58e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d590:	4a3c      	ldr	r2, [pc, #240]	; (800d684 <udp_input+0x21c>)
 800d592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d594:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d596:	e008      	b.n	800d5aa <udp_input+0x142>
      }
    }

    prev = pcb;
 800d598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59e:	68db      	ldr	r3, [r3, #12]
 800d5a0:	627b      	str	r3, [r7, #36]	; 0x24
 800d5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d1a7      	bne.n	800d4f8 <udp_input+0x90>
 800d5a8:	e000      	b.n	800d5ac <udp_input+0x144>
        break;
 800d5aa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800d5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d101      	bne.n	800d5b6 <udp_input+0x14e>
    pcb = uncon_pcb;
 800d5b2:	69fb      	ldr	r3, [r7, #28]
 800d5b4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d002      	beq.n	800d5c2 <udp_input+0x15a>
    for_us = 1;
 800d5bc:	2301      	movs	r3, #1
 800d5be:	76fb      	strb	r3, [r7, #27]
 800d5c0:	e00a      	b.n	800d5d8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	3304      	adds	r3, #4
 800d5c6:	681a      	ldr	r2, [r3, #0]
 800d5c8:	4b2d      	ldr	r3, [pc, #180]	; (800d680 <udp_input+0x218>)
 800d5ca:	695b      	ldr	r3, [r3, #20]
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	bf0c      	ite	eq
 800d5d0:	2301      	moveq	r3, #1
 800d5d2:	2300      	movne	r3, #0
 800d5d4:	b2db      	uxtb	r3, r3
 800d5d6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d5d8:	7efb      	ldrb	r3, [r7, #27]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d041      	beq.n	800d662 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d5de:	2108      	movs	r1, #8
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f7f9 f97b 	bl	80068dc <pbuf_remove_header>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d00a      	beq.n	800d602 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d5ec:	4b20      	ldr	r3, [pc, #128]	; (800d670 <udp_input+0x208>)
 800d5ee:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800d5f2:	4925      	ldr	r1, [pc, #148]	; (800d688 <udp_input+0x220>)
 800d5f4:	4820      	ldr	r0, [pc, #128]	; (800d678 <udp_input+0x210>)
 800d5f6:	f002 fb9d 	bl	800fd34 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f7f9 f9f4 	bl	80069e8 <pbuf_free>
      goto end;
 800d600:	e032      	b.n	800d668 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800d602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d604:	2b00      	cmp	r3, #0
 800d606:	d012      	beq.n	800d62e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60a:	699b      	ldr	r3, [r3, #24]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d00a      	beq.n	800d626 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d612:	699c      	ldr	r4, [r3, #24]
 800d614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d616:	69d8      	ldr	r0, [r3, #28]
 800d618:	8a3b      	ldrh	r3, [r7, #16]
 800d61a:	9300      	str	r3, [sp, #0]
 800d61c:	4b1b      	ldr	r3, [pc, #108]	; (800d68c <udp_input+0x224>)
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d622:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800d624:	e021      	b.n	800d66a <udp_input+0x202>
        pbuf_free(p);
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f7f9 f9de 	bl	80069e8 <pbuf_free>
        goto end;
 800d62c:	e01c      	b.n	800d668 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d62e:	7cfb      	ldrb	r3, [r7, #19]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d112      	bne.n	800d65a <udp_input+0x1f2>
 800d634:	4b12      	ldr	r3, [pc, #72]	; (800d680 <udp_input+0x218>)
 800d636:	695b      	ldr	r3, [r3, #20]
 800d638:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d63c:	2be0      	cmp	r3, #224	; 0xe0
 800d63e:	d00c      	beq.n	800d65a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d640:	4b0f      	ldr	r3, [pc, #60]	; (800d680 <udp_input+0x218>)
 800d642:	899b      	ldrh	r3, [r3, #12]
 800d644:	3308      	adds	r3, #8
 800d646:	b29b      	uxth	r3, r3
 800d648:	b21b      	sxth	r3, r3
 800d64a:	4619      	mov	r1, r3
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f7f9 f9b8 	bl	80069c2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d652:	2103      	movs	r1, #3
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f001 f89b 	bl	800e790 <icmp_dest_unreach>
      pbuf_free(p);
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f7f9 f9c4 	bl	80069e8 <pbuf_free>
  return;
 800d660:	e003      	b.n	800d66a <udp_input+0x202>
    pbuf_free(p);
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f7f9 f9c0 	bl	80069e8 <pbuf_free>
  return;
 800d668:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d66a:	372c      	adds	r7, #44	; 0x2c
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd90      	pop	{r4, r7, pc}
 800d670:	080131bc 	.word	0x080131bc
 800d674:	08013260 	.word	0x08013260
 800d678:	08013210 	.word	0x08013210
 800d67c:	08013278 	.word	0x08013278
 800d680:	200034e8 	.word	0x200034e8
 800d684:	20006a44 	.word	0x20006a44
 800d688:	08013294 	.word	0x08013294
 800d68c:	200034f8 	.word	0x200034f8

0800d690 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d690:	b480      	push	{r7}
 800d692:	b085      	sub	sp, #20
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d01e      	beq.n	800d6de <udp_netif_ip_addr_changed+0x4e>
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d01a      	beq.n	800d6de <udp_netif_ip_addr_changed+0x4e>
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d017      	beq.n	800d6de <udp_netif_ip_addr_changed+0x4e>
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d013      	beq.n	800d6de <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d6b6:	4b0d      	ldr	r3, [pc, #52]	; (800d6ec <udp_netif_ip_addr_changed+0x5c>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	60fb      	str	r3, [r7, #12]
 800d6bc:	e00c      	b.n	800d6d8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	681a      	ldr	r2, [r3, #0]
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d103      	bne.n	800d6d2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	681a      	ldr	r2, [r3, #0]
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	68db      	ldr	r3, [r3, #12]
 800d6d6:	60fb      	str	r3, [r7, #12]
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d1ef      	bne.n	800d6be <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d6de:	bf00      	nop
 800d6e0:	3714      	adds	r7, #20
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr
 800d6ea:	bf00      	nop
 800d6ec:	20006a44 	.word	0x20006a44

0800d6f0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b082      	sub	sp, #8
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d6f8:	4915      	ldr	r1, [pc, #84]	; (800d750 <etharp_free_entry+0x60>)
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	4613      	mov	r3, r2
 800d6fe:	005b      	lsls	r3, r3, #1
 800d700:	4413      	add	r3, r2
 800d702:	00db      	lsls	r3, r3, #3
 800d704:	440b      	add	r3, r1
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d013      	beq.n	800d734 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d70c:	4910      	ldr	r1, [pc, #64]	; (800d750 <etharp_free_entry+0x60>)
 800d70e:	687a      	ldr	r2, [r7, #4]
 800d710:	4613      	mov	r3, r2
 800d712:	005b      	lsls	r3, r3, #1
 800d714:	4413      	add	r3, r2
 800d716:	00db      	lsls	r3, r3, #3
 800d718:	440b      	add	r3, r1
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	4618      	mov	r0, r3
 800d71e:	f7f9 f963 	bl	80069e8 <pbuf_free>
    arp_table[i].q = NULL;
 800d722:	490b      	ldr	r1, [pc, #44]	; (800d750 <etharp_free_entry+0x60>)
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	4613      	mov	r3, r2
 800d728:	005b      	lsls	r3, r3, #1
 800d72a:	4413      	add	r3, r2
 800d72c:	00db      	lsls	r3, r3, #3
 800d72e:	440b      	add	r3, r1
 800d730:	2200      	movs	r2, #0
 800d732:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d734:	4906      	ldr	r1, [pc, #24]	; (800d750 <etharp_free_entry+0x60>)
 800d736:	687a      	ldr	r2, [r7, #4]
 800d738:	4613      	mov	r3, r2
 800d73a:	005b      	lsls	r3, r3, #1
 800d73c:	4413      	add	r3, r2
 800d73e:	00db      	lsls	r3, r3, #3
 800d740:	440b      	add	r3, r1
 800d742:	3314      	adds	r3, #20
 800d744:	2200      	movs	r2, #0
 800d746:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d748:	bf00      	nop
 800d74a:	3708      	adds	r7, #8
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}
 800d750:	20000120 	.word	0x20000120

0800d754 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b082      	sub	sp, #8
 800d758:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d75a:	2300      	movs	r3, #0
 800d75c:	607b      	str	r3, [r7, #4]
 800d75e:	e096      	b.n	800d88e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d760:	494f      	ldr	r1, [pc, #316]	; (800d8a0 <etharp_tmr+0x14c>)
 800d762:	687a      	ldr	r2, [r7, #4]
 800d764:	4613      	mov	r3, r2
 800d766:	005b      	lsls	r3, r3, #1
 800d768:	4413      	add	r3, r2
 800d76a:	00db      	lsls	r3, r3, #3
 800d76c:	440b      	add	r3, r1
 800d76e:	3314      	adds	r3, #20
 800d770:	781b      	ldrb	r3, [r3, #0]
 800d772:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800d774:	78fb      	ldrb	r3, [r7, #3]
 800d776:	2b00      	cmp	r3, #0
 800d778:	f000 8086 	beq.w	800d888 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800d77c:	4948      	ldr	r1, [pc, #288]	; (800d8a0 <etharp_tmr+0x14c>)
 800d77e:	687a      	ldr	r2, [r7, #4]
 800d780:	4613      	mov	r3, r2
 800d782:	005b      	lsls	r3, r3, #1
 800d784:	4413      	add	r3, r2
 800d786:	00db      	lsls	r3, r3, #3
 800d788:	440b      	add	r3, r1
 800d78a:	3312      	adds	r3, #18
 800d78c:	881b      	ldrh	r3, [r3, #0]
 800d78e:	3301      	adds	r3, #1
 800d790:	b298      	uxth	r0, r3
 800d792:	4943      	ldr	r1, [pc, #268]	; (800d8a0 <etharp_tmr+0x14c>)
 800d794:	687a      	ldr	r2, [r7, #4]
 800d796:	4613      	mov	r3, r2
 800d798:	005b      	lsls	r3, r3, #1
 800d79a:	4413      	add	r3, r2
 800d79c:	00db      	lsls	r3, r3, #3
 800d79e:	440b      	add	r3, r1
 800d7a0:	3312      	adds	r3, #18
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d7a6:	493e      	ldr	r1, [pc, #248]	; (800d8a0 <etharp_tmr+0x14c>)
 800d7a8:	687a      	ldr	r2, [r7, #4]
 800d7aa:	4613      	mov	r3, r2
 800d7ac:	005b      	lsls	r3, r3, #1
 800d7ae:	4413      	add	r3, r2
 800d7b0:	00db      	lsls	r3, r3, #3
 800d7b2:	440b      	add	r3, r1
 800d7b4:	3312      	adds	r3, #18
 800d7b6:	881b      	ldrh	r3, [r3, #0]
 800d7b8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d7bc:	d215      	bcs.n	800d7ea <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d7be:	4938      	ldr	r1, [pc, #224]	; (800d8a0 <etharp_tmr+0x14c>)
 800d7c0:	687a      	ldr	r2, [r7, #4]
 800d7c2:	4613      	mov	r3, r2
 800d7c4:	005b      	lsls	r3, r3, #1
 800d7c6:	4413      	add	r3, r2
 800d7c8:	00db      	lsls	r3, r3, #3
 800d7ca:	440b      	add	r3, r1
 800d7cc:	3314      	adds	r3, #20
 800d7ce:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d10e      	bne.n	800d7f2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d7d4:	4932      	ldr	r1, [pc, #200]	; (800d8a0 <etharp_tmr+0x14c>)
 800d7d6:	687a      	ldr	r2, [r7, #4]
 800d7d8:	4613      	mov	r3, r2
 800d7da:	005b      	lsls	r3, r3, #1
 800d7dc:	4413      	add	r3, r2
 800d7de:	00db      	lsls	r3, r3, #3
 800d7e0:	440b      	add	r3, r1
 800d7e2:	3312      	adds	r3, #18
 800d7e4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d7e6:	2b04      	cmp	r3, #4
 800d7e8:	d903      	bls.n	800d7f2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f7ff ff80 	bl	800d6f0 <etharp_free_entry>
 800d7f0:	e04a      	b.n	800d888 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d7f2:	492b      	ldr	r1, [pc, #172]	; (800d8a0 <etharp_tmr+0x14c>)
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	4613      	mov	r3, r2
 800d7f8:	005b      	lsls	r3, r3, #1
 800d7fa:	4413      	add	r3, r2
 800d7fc:	00db      	lsls	r3, r3, #3
 800d7fe:	440b      	add	r3, r1
 800d800:	3314      	adds	r3, #20
 800d802:	781b      	ldrb	r3, [r3, #0]
 800d804:	2b03      	cmp	r3, #3
 800d806:	d10a      	bne.n	800d81e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d808:	4925      	ldr	r1, [pc, #148]	; (800d8a0 <etharp_tmr+0x14c>)
 800d80a:	687a      	ldr	r2, [r7, #4]
 800d80c:	4613      	mov	r3, r2
 800d80e:	005b      	lsls	r3, r3, #1
 800d810:	4413      	add	r3, r2
 800d812:	00db      	lsls	r3, r3, #3
 800d814:	440b      	add	r3, r1
 800d816:	3314      	adds	r3, #20
 800d818:	2204      	movs	r2, #4
 800d81a:	701a      	strb	r2, [r3, #0]
 800d81c:	e034      	b.n	800d888 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d81e:	4920      	ldr	r1, [pc, #128]	; (800d8a0 <etharp_tmr+0x14c>)
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	4613      	mov	r3, r2
 800d824:	005b      	lsls	r3, r3, #1
 800d826:	4413      	add	r3, r2
 800d828:	00db      	lsls	r3, r3, #3
 800d82a:	440b      	add	r3, r1
 800d82c:	3314      	adds	r3, #20
 800d82e:	781b      	ldrb	r3, [r3, #0]
 800d830:	2b04      	cmp	r3, #4
 800d832:	d10a      	bne.n	800d84a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d834:	491a      	ldr	r1, [pc, #104]	; (800d8a0 <etharp_tmr+0x14c>)
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	4613      	mov	r3, r2
 800d83a:	005b      	lsls	r3, r3, #1
 800d83c:	4413      	add	r3, r2
 800d83e:	00db      	lsls	r3, r3, #3
 800d840:	440b      	add	r3, r1
 800d842:	3314      	adds	r3, #20
 800d844:	2202      	movs	r2, #2
 800d846:	701a      	strb	r2, [r3, #0]
 800d848:	e01e      	b.n	800d888 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d84a:	4915      	ldr	r1, [pc, #84]	; (800d8a0 <etharp_tmr+0x14c>)
 800d84c:	687a      	ldr	r2, [r7, #4]
 800d84e:	4613      	mov	r3, r2
 800d850:	005b      	lsls	r3, r3, #1
 800d852:	4413      	add	r3, r2
 800d854:	00db      	lsls	r3, r3, #3
 800d856:	440b      	add	r3, r1
 800d858:	3314      	adds	r3, #20
 800d85a:	781b      	ldrb	r3, [r3, #0]
 800d85c:	2b01      	cmp	r3, #1
 800d85e:	d113      	bne.n	800d888 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d860:	490f      	ldr	r1, [pc, #60]	; (800d8a0 <etharp_tmr+0x14c>)
 800d862:	687a      	ldr	r2, [r7, #4]
 800d864:	4613      	mov	r3, r2
 800d866:	005b      	lsls	r3, r3, #1
 800d868:	4413      	add	r3, r2
 800d86a:	00db      	lsls	r3, r3, #3
 800d86c:	440b      	add	r3, r1
 800d86e:	3308      	adds	r3, #8
 800d870:	6818      	ldr	r0, [r3, #0]
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	4613      	mov	r3, r2
 800d876:	005b      	lsls	r3, r3, #1
 800d878:	4413      	add	r3, r2
 800d87a:	00db      	lsls	r3, r3, #3
 800d87c:	4a08      	ldr	r2, [pc, #32]	; (800d8a0 <etharp_tmr+0x14c>)
 800d87e:	4413      	add	r3, r2
 800d880:	3304      	adds	r3, #4
 800d882:	4619      	mov	r1, r3
 800d884:	f000 fe6e 	bl	800e564 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	3301      	adds	r3, #1
 800d88c:	607b      	str	r3, [r7, #4]
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2b09      	cmp	r3, #9
 800d892:	f77f af65 	ble.w	800d760 <etharp_tmr+0xc>
      }
    }
  }
}
 800d896:	bf00      	nop
 800d898:	bf00      	nop
 800d89a:	3708      	adds	r7, #8
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}
 800d8a0:	20000120 	.word	0x20000120

0800d8a4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b08a      	sub	sp, #40	; 0x28
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	60f8      	str	r0, [r7, #12]
 800d8ac:	460b      	mov	r3, r1
 800d8ae:	607a      	str	r2, [r7, #4]
 800d8b0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d8b2:	230a      	movs	r3, #10
 800d8b4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d8b6:	230a      	movs	r3, #10
 800d8b8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800d8ba:	230a      	movs	r3, #10
 800d8bc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d8c2:	230a      	movs	r3, #10
 800d8c4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	83bb      	strh	r3, [r7, #28]
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	837b      	strh	r3, [r7, #26]
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	843b      	strh	r3, [r7, #32]
 800d8d6:	e0ae      	b.n	800da36 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800d8d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8dc:	49a6      	ldr	r1, [pc, #664]	; (800db78 <etharp_find_entry+0x2d4>)
 800d8de:	4613      	mov	r3, r2
 800d8e0:	005b      	lsls	r3, r3, #1
 800d8e2:	4413      	add	r3, r2
 800d8e4:	00db      	lsls	r3, r3, #3
 800d8e6:	440b      	add	r3, r1
 800d8e8:	3314      	adds	r3, #20
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d8ee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d8f2:	2b0a      	cmp	r3, #10
 800d8f4:	d105      	bne.n	800d902 <etharp_find_entry+0x5e>
 800d8f6:	7dfb      	ldrb	r3, [r7, #23]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d102      	bne.n	800d902 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800d8fc:	8c3b      	ldrh	r3, [r7, #32]
 800d8fe:	847b      	strh	r3, [r7, #34]	; 0x22
 800d900:	e095      	b.n	800da2e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d902:	7dfb      	ldrb	r3, [r7, #23]
 800d904:	2b00      	cmp	r3, #0
 800d906:	f000 8092 	beq.w	800da2e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d90a:	7dfb      	ldrb	r3, [r7, #23]
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	d009      	beq.n	800d924 <etharp_find_entry+0x80>
 800d910:	7dfb      	ldrb	r3, [r7, #23]
 800d912:	2b01      	cmp	r3, #1
 800d914:	d806      	bhi.n	800d924 <etharp_find_entry+0x80>
 800d916:	4b99      	ldr	r3, [pc, #612]	; (800db7c <etharp_find_entry+0x2d8>)
 800d918:	f240 1223 	movw	r2, #291	; 0x123
 800d91c:	4998      	ldr	r1, [pc, #608]	; (800db80 <etharp_find_entry+0x2dc>)
 800d91e:	4899      	ldr	r0, [pc, #612]	; (800db84 <etharp_find_entry+0x2e0>)
 800d920:	f002 fa08 	bl	800fd34 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d020      	beq.n	800d96c <etharp_find_entry+0xc8>
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	6819      	ldr	r1, [r3, #0]
 800d92e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d932:	4891      	ldr	r0, [pc, #580]	; (800db78 <etharp_find_entry+0x2d4>)
 800d934:	4613      	mov	r3, r2
 800d936:	005b      	lsls	r3, r3, #1
 800d938:	4413      	add	r3, r2
 800d93a:	00db      	lsls	r3, r3, #3
 800d93c:	4403      	add	r3, r0
 800d93e:	3304      	adds	r3, #4
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	4299      	cmp	r1, r3
 800d944:	d112      	bne.n	800d96c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d00c      	beq.n	800d966 <etharp_find_entry+0xc2>
 800d94c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d950:	4989      	ldr	r1, [pc, #548]	; (800db78 <etharp_find_entry+0x2d4>)
 800d952:	4613      	mov	r3, r2
 800d954:	005b      	lsls	r3, r3, #1
 800d956:	4413      	add	r3, r2
 800d958:	00db      	lsls	r3, r3, #3
 800d95a:	440b      	add	r3, r1
 800d95c:	3308      	adds	r3, #8
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	687a      	ldr	r2, [r7, #4]
 800d962:	429a      	cmp	r2, r3
 800d964:	d102      	bne.n	800d96c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d966:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d96a:	e100      	b.n	800db6e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d96c:	7dfb      	ldrb	r3, [r7, #23]
 800d96e:	2b01      	cmp	r3, #1
 800d970:	d140      	bne.n	800d9f4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d972:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d976:	4980      	ldr	r1, [pc, #512]	; (800db78 <etharp_find_entry+0x2d4>)
 800d978:	4613      	mov	r3, r2
 800d97a:	005b      	lsls	r3, r3, #1
 800d97c:	4413      	add	r3, r2
 800d97e:	00db      	lsls	r3, r3, #3
 800d980:	440b      	add	r3, r1
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d01a      	beq.n	800d9be <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800d988:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d98c:	497a      	ldr	r1, [pc, #488]	; (800db78 <etharp_find_entry+0x2d4>)
 800d98e:	4613      	mov	r3, r2
 800d990:	005b      	lsls	r3, r3, #1
 800d992:	4413      	add	r3, r2
 800d994:	00db      	lsls	r3, r3, #3
 800d996:	440b      	add	r3, r1
 800d998:	3312      	adds	r3, #18
 800d99a:	881b      	ldrh	r3, [r3, #0]
 800d99c:	8bba      	ldrh	r2, [r7, #28]
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d845      	bhi.n	800da2e <etharp_find_entry+0x18a>
            old_queue = i;
 800d9a2:	8c3b      	ldrh	r3, [r7, #32]
 800d9a4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800d9a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d9aa:	4973      	ldr	r1, [pc, #460]	; (800db78 <etharp_find_entry+0x2d4>)
 800d9ac:	4613      	mov	r3, r2
 800d9ae:	005b      	lsls	r3, r3, #1
 800d9b0:	4413      	add	r3, r2
 800d9b2:	00db      	lsls	r3, r3, #3
 800d9b4:	440b      	add	r3, r1
 800d9b6:	3312      	adds	r3, #18
 800d9b8:	881b      	ldrh	r3, [r3, #0]
 800d9ba:	83bb      	strh	r3, [r7, #28]
 800d9bc:	e037      	b.n	800da2e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d9be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d9c2:	496d      	ldr	r1, [pc, #436]	; (800db78 <etharp_find_entry+0x2d4>)
 800d9c4:	4613      	mov	r3, r2
 800d9c6:	005b      	lsls	r3, r3, #1
 800d9c8:	4413      	add	r3, r2
 800d9ca:	00db      	lsls	r3, r3, #3
 800d9cc:	440b      	add	r3, r1
 800d9ce:	3312      	adds	r3, #18
 800d9d0:	881b      	ldrh	r3, [r3, #0]
 800d9d2:	8b7a      	ldrh	r2, [r7, #26]
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d82a      	bhi.n	800da2e <etharp_find_entry+0x18a>
            old_pending = i;
 800d9d8:	8c3b      	ldrh	r3, [r7, #32]
 800d9da:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800d9dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d9e0:	4965      	ldr	r1, [pc, #404]	; (800db78 <etharp_find_entry+0x2d4>)
 800d9e2:	4613      	mov	r3, r2
 800d9e4:	005b      	lsls	r3, r3, #1
 800d9e6:	4413      	add	r3, r2
 800d9e8:	00db      	lsls	r3, r3, #3
 800d9ea:	440b      	add	r3, r1
 800d9ec:	3312      	adds	r3, #18
 800d9ee:	881b      	ldrh	r3, [r3, #0]
 800d9f0:	837b      	strh	r3, [r7, #26]
 800d9f2:	e01c      	b.n	800da2e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d9f4:	7dfb      	ldrb	r3, [r7, #23]
 800d9f6:	2b01      	cmp	r3, #1
 800d9f8:	d919      	bls.n	800da2e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d9fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d9fe:	495e      	ldr	r1, [pc, #376]	; (800db78 <etharp_find_entry+0x2d4>)
 800da00:	4613      	mov	r3, r2
 800da02:	005b      	lsls	r3, r3, #1
 800da04:	4413      	add	r3, r2
 800da06:	00db      	lsls	r3, r3, #3
 800da08:	440b      	add	r3, r1
 800da0a:	3312      	adds	r3, #18
 800da0c:	881b      	ldrh	r3, [r3, #0]
 800da0e:	8b3a      	ldrh	r2, [r7, #24]
 800da10:	429a      	cmp	r2, r3
 800da12:	d80c      	bhi.n	800da2e <etharp_find_entry+0x18a>
            old_stable = i;
 800da14:	8c3b      	ldrh	r3, [r7, #32]
 800da16:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800da18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800da1c:	4956      	ldr	r1, [pc, #344]	; (800db78 <etharp_find_entry+0x2d4>)
 800da1e:	4613      	mov	r3, r2
 800da20:	005b      	lsls	r3, r3, #1
 800da22:	4413      	add	r3, r2
 800da24:	00db      	lsls	r3, r3, #3
 800da26:	440b      	add	r3, r1
 800da28:	3312      	adds	r3, #18
 800da2a:	881b      	ldrh	r3, [r3, #0]
 800da2c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800da2e:	8c3b      	ldrh	r3, [r7, #32]
 800da30:	3301      	adds	r3, #1
 800da32:	b29b      	uxth	r3, r3
 800da34:	843b      	strh	r3, [r7, #32]
 800da36:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800da3a:	2b09      	cmp	r3, #9
 800da3c:	f77f af4c 	ble.w	800d8d8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800da40:	7afb      	ldrb	r3, [r7, #11]
 800da42:	f003 0302 	and.w	r3, r3, #2
 800da46:	2b00      	cmp	r3, #0
 800da48:	d108      	bne.n	800da5c <etharp_find_entry+0x1b8>
 800da4a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800da4e:	2b0a      	cmp	r3, #10
 800da50:	d107      	bne.n	800da62 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800da52:	7afb      	ldrb	r3, [r7, #11]
 800da54:	f003 0301 	and.w	r3, r3, #1
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d102      	bne.n	800da62 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800da5c:	f04f 33ff 	mov.w	r3, #4294967295
 800da60:	e085      	b.n	800db6e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800da62:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800da66:	2b09      	cmp	r3, #9
 800da68:	dc02      	bgt.n	800da70 <etharp_find_entry+0x1cc>
    i = empty;
 800da6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da6c:	843b      	strh	r3, [r7, #32]
 800da6e:	e039      	b.n	800dae4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800da70:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800da74:	2b09      	cmp	r3, #9
 800da76:	dc14      	bgt.n	800daa2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800da78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da7a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800da7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800da80:	493d      	ldr	r1, [pc, #244]	; (800db78 <etharp_find_entry+0x2d4>)
 800da82:	4613      	mov	r3, r2
 800da84:	005b      	lsls	r3, r3, #1
 800da86:	4413      	add	r3, r2
 800da88:	00db      	lsls	r3, r3, #3
 800da8a:	440b      	add	r3, r1
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d018      	beq.n	800dac4 <etharp_find_entry+0x220>
 800da92:	4b3a      	ldr	r3, [pc, #232]	; (800db7c <etharp_find_entry+0x2d8>)
 800da94:	f240 126d 	movw	r2, #365	; 0x16d
 800da98:	493b      	ldr	r1, [pc, #236]	; (800db88 <etharp_find_entry+0x2e4>)
 800da9a:	483a      	ldr	r0, [pc, #232]	; (800db84 <etharp_find_entry+0x2e0>)
 800da9c:	f002 f94a 	bl	800fd34 <iprintf>
 800daa0:	e010      	b.n	800dac4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800daa2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800daa6:	2b09      	cmp	r3, #9
 800daa8:	dc02      	bgt.n	800dab0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800daaa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800daac:	843b      	strh	r3, [r7, #32]
 800daae:	e009      	b.n	800dac4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800dab0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800dab4:	2b09      	cmp	r3, #9
 800dab6:	dc02      	bgt.n	800dabe <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800dab8:	8bfb      	ldrh	r3, [r7, #30]
 800daba:	843b      	strh	r3, [r7, #32]
 800dabc:	e002      	b.n	800dac4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800dabe:	f04f 33ff 	mov.w	r3, #4294967295
 800dac2:	e054      	b.n	800db6e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800dac4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dac8:	2b09      	cmp	r3, #9
 800daca:	dd06      	ble.n	800dada <etharp_find_entry+0x236>
 800dacc:	4b2b      	ldr	r3, [pc, #172]	; (800db7c <etharp_find_entry+0x2d8>)
 800dace:	f240 127f 	movw	r2, #383	; 0x17f
 800dad2:	492e      	ldr	r1, [pc, #184]	; (800db8c <etharp_find_entry+0x2e8>)
 800dad4:	482b      	ldr	r0, [pc, #172]	; (800db84 <etharp_find_entry+0x2e0>)
 800dad6:	f002 f92d 	bl	800fd34 <iprintf>
    etharp_free_entry(i);
 800dada:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dade:	4618      	mov	r0, r3
 800dae0:	f7ff fe06 	bl	800d6f0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800dae4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dae8:	2b09      	cmp	r3, #9
 800daea:	dd06      	ble.n	800dafa <etharp_find_entry+0x256>
 800daec:	4b23      	ldr	r3, [pc, #140]	; (800db7c <etharp_find_entry+0x2d8>)
 800daee:	f240 1283 	movw	r2, #387	; 0x183
 800daf2:	4926      	ldr	r1, [pc, #152]	; (800db8c <etharp_find_entry+0x2e8>)
 800daf4:	4823      	ldr	r0, [pc, #140]	; (800db84 <etharp_find_entry+0x2e0>)
 800daf6:	f002 f91d 	bl	800fd34 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800dafa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dafe:	491e      	ldr	r1, [pc, #120]	; (800db78 <etharp_find_entry+0x2d4>)
 800db00:	4613      	mov	r3, r2
 800db02:	005b      	lsls	r3, r3, #1
 800db04:	4413      	add	r3, r2
 800db06:	00db      	lsls	r3, r3, #3
 800db08:	440b      	add	r3, r1
 800db0a:	3314      	adds	r3, #20
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d006      	beq.n	800db20 <etharp_find_entry+0x27c>
 800db12:	4b1a      	ldr	r3, [pc, #104]	; (800db7c <etharp_find_entry+0x2d8>)
 800db14:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800db18:	491d      	ldr	r1, [pc, #116]	; (800db90 <etharp_find_entry+0x2ec>)
 800db1a:	481a      	ldr	r0, [pc, #104]	; (800db84 <etharp_find_entry+0x2e0>)
 800db1c:	f002 f90a 	bl	800fd34 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d00b      	beq.n	800db3e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800db26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	6819      	ldr	r1, [r3, #0]
 800db2e:	4812      	ldr	r0, [pc, #72]	; (800db78 <etharp_find_entry+0x2d4>)
 800db30:	4613      	mov	r3, r2
 800db32:	005b      	lsls	r3, r3, #1
 800db34:	4413      	add	r3, r2
 800db36:	00db      	lsls	r3, r3, #3
 800db38:	4403      	add	r3, r0
 800db3a:	3304      	adds	r3, #4
 800db3c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800db3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800db42:	490d      	ldr	r1, [pc, #52]	; (800db78 <etharp_find_entry+0x2d4>)
 800db44:	4613      	mov	r3, r2
 800db46:	005b      	lsls	r3, r3, #1
 800db48:	4413      	add	r3, r2
 800db4a:	00db      	lsls	r3, r3, #3
 800db4c:	440b      	add	r3, r1
 800db4e:	3312      	adds	r3, #18
 800db50:	2200      	movs	r2, #0
 800db52:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800db54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800db58:	4907      	ldr	r1, [pc, #28]	; (800db78 <etharp_find_entry+0x2d4>)
 800db5a:	4613      	mov	r3, r2
 800db5c:	005b      	lsls	r3, r3, #1
 800db5e:	4413      	add	r3, r2
 800db60:	00db      	lsls	r3, r3, #3
 800db62:	440b      	add	r3, r1
 800db64:	3308      	adds	r3, #8
 800db66:	687a      	ldr	r2, [r7, #4]
 800db68:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800db6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3728      	adds	r7, #40	; 0x28
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
 800db76:	bf00      	nop
 800db78:	20000120 	.word	0x20000120
 800db7c:	08013520 	.word	0x08013520
 800db80:	08013558 	.word	0x08013558
 800db84:	08013598 	.word	0x08013598
 800db88:	080135c0 	.word	0x080135c0
 800db8c:	080135d8 	.word	0x080135d8
 800db90:	080135ec 	.word	0x080135ec

0800db94 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b088      	sub	sp, #32
 800db98:	af02      	add	r7, sp, #8
 800db9a:	60f8      	str	r0, [r7, #12]
 800db9c:	60b9      	str	r1, [r7, #8]
 800db9e:	607a      	str	r2, [r7, #4]
 800dba0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dba8:	2b06      	cmp	r3, #6
 800dbaa:	d006      	beq.n	800dbba <etharp_update_arp_entry+0x26>
 800dbac:	4b48      	ldr	r3, [pc, #288]	; (800dcd0 <etharp_update_arp_entry+0x13c>)
 800dbae:	f240 12a9 	movw	r2, #425	; 0x1a9
 800dbb2:	4948      	ldr	r1, [pc, #288]	; (800dcd4 <etharp_update_arp_entry+0x140>)
 800dbb4:	4848      	ldr	r0, [pc, #288]	; (800dcd8 <etharp_update_arp_entry+0x144>)
 800dbb6:	f002 f8bd 	bl	800fd34 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d012      	beq.n	800dbe6 <etharp_update_arp_entry+0x52>
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d00e      	beq.n	800dbe6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	68f9      	ldr	r1, [r7, #12]
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f001 f8fe 	bl	800edd0 <ip4_addr_isbroadcast_u32>
 800dbd4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d105      	bne.n	800dbe6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800dbe2:	2be0      	cmp	r3, #224	; 0xe0
 800dbe4:	d102      	bne.n	800dbec <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800dbe6:	f06f 030f 	mvn.w	r3, #15
 800dbea:	e06c      	b.n	800dcc6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800dbec:	78fb      	ldrb	r3, [r7, #3]
 800dbee:	68fa      	ldr	r2, [r7, #12]
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	68b8      	ldr	r0, [r7, #8]
 800dbf4:	f7ff fe56 	bl	800d8a4 <etharp_find_entry>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800dbfc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	da02      	bge.n	800dc0a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800dc04:	8afb      	ldrh	r3, [r7, #22]
 800dc06:	b25b      	sxtb	r3, r3
 800dc08:	e05d      	b.n	800dcc6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800dc0a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dc0e:	4933      	ldr	r1, [pc, #204]	; (800dcdc <etharp_update_arp_entry+0x148>)
 800dc10:	4613      	mov	r3, r2
 800dc12:	005b      	lsls	r3, r3, #1
 800dc14:	4413      	add	r3, r2
 800dc16:	00db      	lsls	r3, r3, #3
 800dc18:	440b      	add	r3, r1
 800dc1a:	3314      	adds	r3, #20
 800dc1c:	2202      	movs	r2, #2
 800dc1e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800dc20:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dc24:	492d      	ldr	r1, [pc, #180]	; (800dcdc <etharp_update_arp_entry+0x148>)
 800dc26:	4613      	mov	r3, r2
 800dc28:	005b      	lsls	r3, r3, #1
 800dc2a:	4413      	add	r3, r2
 800dc2c:	00db      	lsls	r3, r3, #3
 800dc2e:	440b      	add	r3, r1
 800dc30:	3308      	adds	r3, #8
 800dc32:	68fa      	ldr	r2, [r7, #12]
 800dc34:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800dc36:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dc3a:	4613      	mov	r3, r2
 800dc3c:	005b      	lsls	r3, r3, #1
 800dc3e:	4413      	add	r3, r2
 800dc40:	00db      	lsls	r3, r3, #3
 800dc42:	3308      	adds	r3, #8
 800dc44:	4a25      	ldr	r2, [pc, #148]	; (800dcdc <etharp_update_arp_entry+0x148>)
 800dc46:	4413      	add	r3, r2
 800dc48:	3304      	adds	r3, #4
 800dc4a:	2206      	movs	r2, #6
 800dc4c:	6879      	ldr	r1, [r7, #4]
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f002 f840 	bl	800fcd4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800dc54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dc58:	4920      	ldr	r1, [pc, #128]	; (800dcdc <etharp_update_arp_entry+0x148>)
 800dc5a:	4613      	mov	r3, r2
 800dc5c:	005b      	lsls	r3, r3, #1
 800dc5e:	4413      	add	r3, r2
 800dc60:	00db      	lsls	r3, r3, #3
 800dc62:	440b      	add	r3, r1
 800dc64:	3312      	adds	r3, #18
 800dc66:	2200      	movs	r2, #0
 800dc68:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800dc6a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dc6e:	491b      	ldr	r1, [pc, #108]	; (800dcdc <etharp_update_arp_entry+0x148>)
 800dc70:	4613      	mov	r3, r2
 800dc72:	005b      	lsls	r3, r3, #1
 800dc74:	4413      	add	r3, r2
 800dc76:	00db      	lsls	r3, r3, #3
 800dc78:	440b      	add	r3, r1
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d021      	beq.n	800dcc4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800dc80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dc84:	4915      	ldr	r1, [pc, #84]	; (800dcdc <etharp_update_arp_entry+0x148>)
 800dc86:	4613      	mov	r3, r2
 800dc88:	005b      	lsls	r3, r3, #1
 800dc8a:	4413      	add	r3, r2
 800dc8c:	00db      	lsls	r3, r3, #3
 800dc8e:	440b      	add	r3, r1
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800dc94:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dc98:	4910      	ldr	r1, [pc, #64]	; (800dcdc <etharp_update_arp_entry+0x148>)
 800dc9a:	4613      	mov	r3, r2
 800dc9c:	005b      	lsls	r3, r3, #1
 800dc9e:	4413      	add	r3, r2
 800dca0:	00db      	lsls	r3, r3, #3
 800dca2:	440b      	add	r3, r1
 800dca4:	2200      	movs	r2, #0
 800dca6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800dcae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dcb2:	9300      	str	r3, [sp, #0]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	6939      	ldr	r1, [r7, #16]
 800dcb8:	68f8      	ldr	r0, [r7, #12]
 800dcba:	f001 ff91 	bl	800fbe0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800dcbe:	6938      	ldr	r0, [r7, #16]
 800dcc0:	f7f8 fe92 	bl	80069e8 <pbuf_free>
  }
  return ERR_OK;
 800dcc4:	2300      	movs	r3, #0
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3718      	adds	r7, #24
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	08013520 	.word	0x08013520
 800dcd4:	08013618 	.word	0x08013618
 800dcd8:	08013598 	.word	0x08013598
 800dcdc:	20000120 	.word	0x20000120

0800dce0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b084      	sub	sp, #16
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dce8:	2300      	movs	r3, #0
 800dcea:	60fb      	str	r3, [r7, #12]
 800dcec:	e01e      	b.n	800dd2c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800dcee:	4913      	ldr	r1, [pc, #76]	; (800dd3c <etharp_cleanup_netif+0x5c>)
 800dcf0:	68fa      	ldr	r2, [r7, #12]
 800dcf2:	4613      	mov	r3, r2
 800dcf4:	005b      	lsls	r3, r3, #1
 800dcf6:	4413      	add	r3, r2
 800dcf8:	00db      	lsls	r3, r3, #3
 800dcfa:	440b      	add	r3, r1
 800dcfc:	3314      	adds	r3, #20
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800dd02:	7afb      	ldrb	r3, [r7, #11]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d00e      	beq.n	800dd26 <etharp_cleanup_netif+0x46>
 800dd08:	490c      	ldr	r1, [pc, #48]	; (800dd3c <etharp_cleanup_netif+0x5c>)
 800dd0a:	68fa      	ldr	r2, [r7, #12]
 800dd0c:	4613      	mov	r3, r2
 800dd0e:	005b      	lsls	r3, r3, #1
 800dd10:	4413      	add	r3, r2
 800dd12:	00db      	lsls	r3, r3, #3
 800dd14:	440b      	add	r3, r1
 800dd16:	3308      	adds	r3, #8
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	687a      	ldr	r2, [r7, #4]
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d102      	bne.n	800dd26 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800dd20:	68f8      	ldr	r0, [r7, #12]
 800dd22:	f7ff fce5 	bl	800d6f0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	3301      	adds	r3, #1
 800dd2a:	60fb      	str	r3, [r7, #12]
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	2b09      	cmp	r3, #9
 800dd30:	dddd      	ble.n	800dcee <etharp_cleanup_netif+0xe>
    }
  }
}
 800dd32:	bf00      	nop
 800dd34:	bf00      	nop
 800dd36:	3710      	adds	r7, #16
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	20000120 	.word	0x20000120

0800dd40 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800dd40:	b5b0      	push	{r4, r5, r7, lr}
 800dd42:	b08a      	sub	sp, #40	; 0x28
 800dd44:	af04      	add	r7, sp, #16
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d107      	bne.n	800dd60 <etharp_input+0x20>
 800dd50:	4b3d      	ldr	r3, [pc, #244]	; (800de48 <etharp_input+0x108>)
 800dd52:	f240 228a 	movw	r2, #650	; 0x28a
 800dd56:	493d      	ldr	r1, [pc, #244]	; (800de4c <etharp_input+0x10c>)
 800dd58:	483d      	ldr	r0, [pc, #244]	; (800de50 <etharp_input+0x110>)
 800dd5a:	f001 ffeb 	bl	800fd34 <iprintf>
 800dd5e:	e06f      	b.n	800de40 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	685b      	ldr	r3, [r3, #4]
 800dd64:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	881b      	ldrh	r3, [r3, #0]
 800dd6a:	b29b      	uxth	r3, r3
 800dd6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd70:	d10c      	bne.n	800dd8c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800dd76:	2b06      	cmp	r3, #6
 800dd78:	d108      	bne.n	800dd8c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dd7e:	2b04      	cmp	r3, #4
 800dd80:	d104      	bne.n	800dd8c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800dd82:	693b      	ldr	r3, [r7, #16]
 800dd84:	885b      	ldrh	r3, [r3, #2]
 800dd86:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800dd88:	2b08      	cmp	r3, #8
 800dd8a:	d003      	beq.n	800dd94 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f7f8 fe2b 	bl	80069e8 <pbuf_free>
    return;
 800dd92:	e055      	b.n	800de40 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	330e      	adds	r3, #14
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	3318      	adds	r3, #24
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	3304      	adds	r3, #4
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d102      	bne.n	800ddb4 <etharp_input+0x74>
    for_us = 0;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	75fb      	strb	r3, [r7, #23]
 800ddb2:	e009      	b.n	800ddc8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800ddb4:	68ba      	ldr	r2, [r7, #8]
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	3304      	adds	r3, #4
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	429a      	cmp	r2, r3
 800ddbe:	bf0c      	ite	eq
 800ddc0:	2301      	moveq	r3, #1
 800ddc2:	2300      	movne	r3, #0
 800ddc4:	b2db      	uxtb	r3, r3
 800ddc6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	f103 0208 	add.w	r2, r3, #8
 800ddce:	7dfb      	ldrb	r3, [r7, #23]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d001      	beq.n	800ddd8 <etharp_input+0x98>
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	e000      	b.n	800ddda <etharp_input+0x9a>
 800ddd8:	2302      	movs	r3, #2
 800ddda:	f107 010c 	add.w	r1, r7, #12
 800ddde:	6838      	ldr	r0, [r7, #0]
 800dde0:	f7ff fed8 	bl	800db94 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	88db      	ldrh	r3, [r3, #6]
 800dde8:	b29b      	uxth	r3, r3
 800ddea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ddee:	d003      	beq.n	800ddf8 <etharp_input+0xb8>
 800ddf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ddf4:	d01e      	beq.n	800de34 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800ddf6:	e020      	b.n	800de3a <etharp_input+0xfa>
      if (for_us) {
 800ddf8:	7dfb      	ldrb	r3, [r7, #23]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d01c      	beq.n	800de38 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800de14:	693a      	ldr	r2, [r7, #16]
 800de16:	3208      	adds	r2, #8
        etharp_raw(netif,
 800de18:	2102      	movs	r1, #2
 800de1a:	9103      	str	r1, [sp, #12]
 800de1c:	f107 010c 	add.w	r1, r7, #12
 800de20:	9102      	str	r1, [sp, #8]
 800de22:	9201      	str	r2, [sp, #4]
 800de24:	9300      	str	r3, [sp, #0]
 800de26:	462b      	mov	r3, r5
 800de28:	4622      	mov	r2, r4
 800de2a:	4601      	mov	r1, r0
 800de2c:	6838      	ldr	r0, [r7, #0]
 800de2e:	f000 faeb 	bl	800e408 <etharp_raw>
      break;
 800de32:	e001      	b.n	800de38 <etharp_input+0xf8>
      break;
 800de34:	bf00      	nop
 800de36:	e000      	b.n	800de3a <etharp_input+0xfa>
      break;
 800de38:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f7f8 fdd4 	bl	80069e8 <pbuf_free>
}
 800de40:	3718      	adds	r7, #24
 800de42:	46bd      	mov	sp, r7
 800de44:	bdb0      	pop	{r4, r5, r7, pc}
 800de46:	bf00      	nop
 800de48:	08013520 	.word	0x08013520
 800de4c:	08013670 	.word	0x08013670
 800de50:	08013598 	.word	0x08013598

0800de54 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b086      	sub	sp, #24
 800de58:	af02      	add	r7, sp, #8
 800de5a:	60f8      	str	r0, [r7, #12]
 800de5c:	60b9      	str	r1, [r7, #8]
 800de5e:	4613      	mov	r3, r2
 800de60:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800de62:	79fa      	ldrb	r2, [r7, #7]
 800de64:	4944      	ldr	r1, [pc, #272]	; (800df78 <etharp_output_to_arp_index+0x124>)
 800de66:	4613      	mov	r3, r2
 800de68:	005b      	lsls	r3, r3, #1
 800de6a:	4413      	add	r3, r2
 800de6c:	00db      	lsls	r3, r3, #3
 800de6e:	440b      	add	r3, r1
 800de70:	3314      	adds	r3, #20
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	2b01      	cmp	r3, #1
 800de76:	d806      	bhi.n	800de86 <etharp_output_to_arp_index+0x32>
 800de78:	4b40      	ldr	r3, [pc, #256]	; (800df7c <etharp_output_to_arp_index+0x128>)
 800de7a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800de7e:	4940      	ldr	r1, [pc, #256]	; (800df80 <etharp_output_to_arp_index+0x12c>)
 800de80:	4840      	ldr	r0, [pc, #256]	; (800df84 <etharp_output_to_arp_index+0x130>)
 800de82:	f001 ff57 	bl	800fd34 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800de86:	79fa      	ldrb	r2, [r7, #7]
 800de88:	493b      	ldr	r1, [pc, #236]	; (800df78 <etharp_output_to_arp_index+0x124>)
 800de8a:	4613      	mov	r3, r2
 800de8c:	005b      	lsls	r3, r3, #1
 800de8e:	4413      	add	r3, r2
 800de90:	00db      	lsls	r3, r3, #3
 800de92:	440b      	add	r3, r1
 800de94:	3314      	adds	r3, #20
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	2b02      	cmp	r3, #2
 800de9a:	d153      	bne.n	800df44 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800de9c:	79fa      	ldrb	r2, [r7, #7]
 800de9e:	4936      	ldr	r1, [pc, #216]	; (800df78 <etharp_output_to_arp_index+0x124>)
 800dea0:	4613      	mov	r3, r2
 800dea2:	005b      	lsls	r3, r3, #1
 800dea4:	4413      	add	r3, r2
 800dea6:	00db      	lsls	r3, r3, #3
 800dea8:	440b      	add	r3, r1
 800deaa:	3312      	adds	r3, #18
 800deac:	881b      	ldrh	r3, [r3, #0]
 800deae:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800deb2:	d919      	bls.n	800dee8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800deb4:	79fa      	ldrb	r2, [r7, #7]
 800deb6:	4613      	mov	r3, r2
 800deb8:	005b      	lsls	r3, r3, #1
 800deba:	4413      	add	r3, r2
 800debc:	00db      	lsls	r3, r3, #3
 800debe:	4a2e      	ldr	r2, [pc, #184]	; (800df78 <etharp_output_to_arp_index+0x124>)
 800dec0:	4413      	add	r3, r2
 800dec2:	3304      	adds	r3, #4
 800dec4:	4619      	mov	r1, r3
 800dec6:	68f8      	ldr	r0, [r7, #12]
 800dec8:	f000 fb4c 	bl	800e564 <etharp_request>
 800decc:	4603      	mov	r3, r0
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d138      	bne.n	800df44 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ded2:	79fa      	ldrb	r2, [r7, #7]
 800ded4:	4928      	ldr	r1, [pc, #160]	; (800df78 <etharp_output_to_arp_index+0x124>)
 800ded6:	4613      	mov	r3, r2
 800ded8:	005b      	lsls	r3, r3, #1
 800deda:	4413      	add	r3, r2
 800dedc:	00db      	lsls	r3, r3, #3
 800dede:	440b      	add	r3, r1
 800dee0:	3314      	adds	r3, #20
 800dee2:	2203      	movs	r2, #3
 800dee4:	701a      	strb	r2, [r3, #0]
 800dee6:	e02d      	b.n	800df44 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800dee8:	79fa      	ldrb	r2, [r7, #7]
 800deea:	4923      	ldr	r1, [pc, #140]	; (800df78 <etharp_output_to_arp_index+0x124>)
 800deec:	4613      	mov	r3, r2
 800deee:	005b      	lsls	r3, r3, #1
 800def0:	4413      	add	r3, r2
 800def2:	00db      	lsls	r3, r3, #3
 800def4:	440b      	add	r3, r1
 800def6:	3312      	adds	r3, #18
 800def8:	881b      	ldrh	r3, [r3, #0]
 800defa:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800defe:	d321      	bcc.n	800df44 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800df00:	79fa      	ldrb	r2, [r7, #7]
 800df02:	4613      	mov	r3, r2
 800df04:	005b      	lsls	r3, r3, #1
 800df06:	4413      	add	r3, r2
 800df08:	00db      	lsls	r3, r3, #3
 800df0a:	4a1b      	ldr	r2, [pc, #108]	; (800df78 <etharp_output_to_arp_index+0x124>)
 800df0c:	4413      	add	r3, r2
 800df0e:	1d19      	adds	r1, r3, #4
 800df10:	79fa      	ldrb	r2, [r7, #7]
 800df12:	4613      	mov	r3, r2
 800df14:	005b      	lsls	r3, r3, #1
 800df16:	4413      	add	r3, r2
 800df18:	00db      	lsls	r3, r3, #3
 800df1a:	3308      	adds	r3, #8
 800df1c:	4a16      	ldr	r2, [pc, #88]	; (800df78 <etharp_output_to_arp_index+0x124>)
 800df1e:	4413      	add	r3, r2
 800df20:	3304      	adds	r3, #4
 800df22:	461a      	mov	r2, r3
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f000 fafb 	bl	800e520 <etharp_request_dst>
 800df2a:	4603      	mov	r3, r0
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d109      	bne.n	800df44 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800df30:	79fa      	ldrb	r2, [r7, #7]
 800df32:	4911      	ldr	r1, [pc, #68]	; (800df78 <etharp_output_to_arp_index+0x124>)
 800df34:	4613      	mov	r3, r2
 800df36:	005b      	lsls	r3, r3, #1
 800df38:	4413      	add	r3, r2
 800df3a:	00db      	lsls	r3, r3, #3
 800df3c:	440b      	add	r3, r1
 800df3e:	3314      	adds	r3, #20
 800df40:	2203      	movs	r2, #3
 800df42:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800df4a:	79fa      	ldrb	r2, [r7, #7]
 800df4c:	4613      	mov	r3, r2
 800df4e:	005b      	lsls	r3, r3, #1
 800df50:	4413      	add	r3, r2
 800df52:	00db      	lsls	r3, r3, #3
 800df54:	3308      	adds	r3, #8
 800df56:	4a08      	ldr	r2, [pc, #32]	; (800df78 <etharp_output_to_arp_index+0x124>)
 800df58:	4413      	add	r3, r2
 800df5a:	3304      	adds	r3, #4
 800df5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df60:	9200      	str	r2, [sp, #0]
 800df62:	460a      	mov	r2, r1
 800df64:	68b9      	ldr	r1, [r7, #8]
 800df66:	68f8      	ldr	r0, [r7, #12]
 800df68:	f001 fe3a 	bl	800fbe0 <ethernet_output>
 800df6c:	4603      	mov	r3, r0
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3710      	adds	r7, #16
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}
 800df76:	bf00      	nop
 800df78:	20000120 	.word	0x20000120
 800df7c:	08013520 	.word	0x08013520
 800df80:	08013690 	.word	0x08013690
 800df84:	08013598 	.word	0x08013598

0800df88 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b08a      	sub	sp, #40	; 0x28
 800df8c:	af02      	add	r7, sp, #8
 800df8e:	60f8      	str	r0, [r7, #12]
 800df90:	60b9      	str	r1, [r7, #8]
 800df92:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d106      	bne.n	800dfac <etharp_output+0x24>
 800df9e:	4b73      	ldr	r3, [pc, #460]	; (800e16c <etharp_output+0x1e4>)
 800dfa0:	f240 321e 	movw	r2, #798	; 0x31e
 800dfa4:	4972      	ldr	r1, [pc, #456]	; (800e170 <etharp_output+0x1e8>)
 800dfa6:	4873      	ldr	r0, [pc, #460]	; (800e174 <etharp_output+0x1ec>)
 800dfa8:	f001 fec4 	bl	800fd34 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d106      	bne.n	800dfc0 <etharp_output+0x38>
 800dfb2:	4b6e      	ldr	r3, [pc, #440]	; (800e16c <etharp_output+0x1e4>)
 800dfb4:	f240 321f 	movw	r2, #799	; 0x31f
 800dfb8:	496f      	ldr	r1, [pc, #444]	; (800e178 <etharp_output+0x1f0>)
 800dfba:	486e      	ldr	r0, [pc, #440]	; (800e174 <etharp_output+0x1ec>)
 800dfbc:	f001 feba 	bl	800fd34 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d106      	bne.n	800dfd4 <etharp_output+0x4c>
 800dfc6:	4b69      	ldr	r3, [pc, #420]	; (800e16c <etharp_output+0x1e4>)
 800dfc8:	f44f 7248 	mov.w	r2, #800	; 0x320
 800dfcc:	496b      	ldr	r1, [pc, #428]	; (800e17c <etharp_output+0x1f4>)
 800dfce:	4869      	ldr	r0, [pc, #420]	; (800e174 <etharp_output+0x1ec>)
 800dfd0:	f001 feb0 	bl	800fd34 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	68f9      	ldr	r1, [r7, #12]
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f000 fef8 	bl	800edd0 <ip4_addr_isbroadcast_u32>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d002      	beq.n	800dfec <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800dfe6:	4b66      	ldr	r3, [pc, #408]	; (800e180 <etharp_output+0x1f8>)
 800dfe8:	61fb      	str	r3, [r7, #28]
 800dfea:	e0af      	b.n	800e14c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dff4:	2be0      	cmp	r3, #224	; 0xe0
 800dff6:	d118      	bne.n	800e02a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800dff8:	2301      	movs	r3, #1
 800dffa:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800dffc:	2300      	movs	r3, #0
 800dffe:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e000:	235e      	movs	r3, #94	; 0x5e
 800e002:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	3301      	adds	r3, #1
 800e008:	781b      	ldrb	r3, [r3, #0]
 800e00a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e00e:	b2db      	uxtb	r3, r3
 800e010:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	3302      	adds	r3, #2
 800e016:	781b      	ldrb	r3, [r3, #0]
 800e018:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	3303      	adds	r3, #3
 800e01e:	781b      	ldrb	r3, [r3, #0]
 800e020:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e022:	f107 0310 	add.w	r3, r7, #16
 800e026:	61fb      	str	r3, [r7, #28]
 800e028:	e090      	b.n	800e14c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681a      	ldr	r2, [r3, #0]
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	3304      	adds	r3, #4
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	405a      	eors	r2, r3
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	3308      	adds	r3, #8
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	4013      	ands	r3, r2
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d012      	beq.n	800e068 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e048:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e04c:	4293      	cmp	r3, r2
 800e04e:	d00b      	beq.n	800e068 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	330c      	adds	r3, #12
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d003      	beq.n	800e062 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	330c      	adds	r3, #12
 800e05e:	61bb      	str	r3, [r7, #24]
 800e060:	e002      	b.n	800e068 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e062:	f06f 0303 	mvn.w	r3, #3
 800e066:	e07d      	b.n	800e164 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e068:	4b46      	ldr	r3, [pc, #280]	; (800e184 <etharp_output+0x1fc>)
 800e06a:	781b      	ldrb	r3, [r3, #0]
 800e06c:	4619      	mov	r1, r3
 800e06e:	4a46      	ldr	r2, [pc, #280]	; (800e188 <etharp_output+0x200>)
 800e070:	460b      	mov	r3, r1
 800e072:	005b      	lsls	r3, r3, #1
 800e074:	440b      	add	r3, r1
 800e076:	00db      	lsls	r3, r3, #3
 800e078:	4413      	add	r3, r2
 800e07a:	3314      	adds	r3, #20
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	2b01      	cmp	r3, #1
 800e080:	d925      	bls.n	800e0ce <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e082:	4b40      	ldr	r3, [pc, #256]	; (800e184 <etharp_output+0x1fc>)
 800e084:	781b      	ldrb	r3, [r3, #0]
 800e086:	4619      	mov	r1, r3
 800e088:	4a3f      	ldr	r2, [pc, #252]	; (800e188 <etharp_output+0x200>)
 800e08a:	460b      	mov	r3, r1
 800e08c:	005b      	lsls	r3, r3, #1
 800e08e:	440b      	add	r3, r1
 800e090:	00db      	lsls	r3, r3, #3
 800e092:	4413      	add	r3, r2
 800e094:	3308      	adds	r3, #8
 800e096:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e098:	68fa      	ldr	r2, [r7, #12]
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d117      	bne.n	800e0ce <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e09e:	69bb      	ldr	r3, [r7, #24]
 800e0a0:	681a      	ldr	r2, [r3, #0]
 800e0a2:	4b38      	ldr	r3, [pc, #224]	; (800e184 <etharp_output+0x1fc>)
 800e0a4:	781b      	ldrb	r3, [r3, #0]
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	4937      	ldr	r1, [pc, #220]	; (800e188 <etharp_output+0x200>)
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	005b      	lsls	r3, r3, #1
 800e0ae:	4403      	add	r3, r0
 800e0b0:	00db      	lsls	r3, r3, #3
 800e0b2:	440b      	add	r3, r1
 800e0b4:	3304      	adds	r3, #4
 800e0b6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d108      	bne.n	800e0ce <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e0bc:	4b31      	ldr	r3, [pc, #196]	; (800e184 <etharp_output+0x1fc>)
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	461a      	mov	r2, r3
 800e0c2:	68b9      	ldr	r1, [r7, #8]
 800e0c4:	68f8      	ldr	r0, [r7, #12]
 800e0c6:	f7ff fec5 	bl	800de54 <etharp_output_to_arp_index>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	e04a      	b.n	800e164 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	75fb      	strb	r3, [r7, #23]
 800e0d2:	e031      	b.n	800e138 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e0d4:	7dfa      	ldrb	r2, [r7, #23]
 800e0d6:	492c      	ldr	r1, [pc, #176]	; (800e188 <etharp_output+0x200>)
 800e0d8:	4613      	mov	r3, r2
 800e0da:	005b      	lsls	r3, r3, #1
 800e0dc:	4413      	add	r3, r2
 800e0de:	00db      	lsls	r3, r3, #3
 800e0e0:	440b      	add	r3, r1
 800e0e2:	3314      	adds	r3, #20
 800e0e4:	781b      	ldrb	r3, [r3, #0]
 800e0e6:	2b01      	cmp	r3, #1
 800e0e8:	d923      	bls.n	800e132 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800e0ea:	7dfa      	ldrb	r2, [r7, #23]
 800e0ec:	4926      	ldr	r1, [pc, #152]	; (800e188 <etharp_output+0x200>)
 800e0ee:	4613      	mov	r3, r2
 800e0f0:	005b      	lsls	r3, r3, #1
 800e0f2:	4413      	add	r3, r2
 800e0f4:	00db      	lsls	r3, r3, #3
 800e0f6:	440b      	add	r3, r1
 800e0f8:	3308      	adds	r3, #8
 800e0fa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e0fc:	68fa      	ldr	r2, [r7, #12]
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d117      	bne.n	800e132 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e102:	69bb      	ldr	r3, [r7, #24]
 800e104:	6819      	ldr	r1, [r3, #0]
 800e106:	7dfa      	ldrb	r2, [r7, #23]
 800e108:	481f      	ldr	r0, [pc, #124]	; (800e188 <etharp_output+0x200>)
 800e10a:	4613      	mov	r3, r2
 800e10c:	005b      	lsls	r3, r3, #1
 800e10e:	4413      	add	r3, r2
 800e110:	00db      	lsls	r3, r3, #3
 800e112:	4403      	add	r3, r0
 800e114:	3304      	adds	r3, #4
 800e116:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800e118:	4299      	cmp	r1, r3
 800e11a:	d10a      	bne.n	800e132 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800e11c:	4a19      	ldr	r2, [pc, #100]	; (800e184 <etharp_output+0x1fc>)
 800e11e:	7dfb      	ldrb	r3, [r7, #23]
 800e120:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e122:	7dfb      	ldrb	r3, [r7, #23]
 800e124:	461a      	mov	r2, r3
 800e126:	68b9      	ldr	r1, [r7, #8]
 800e128:	68f8      	ldr	r0, [r7, #12]
 800e12a:	f7ff fe93 	bl	800de54 <etharp_output_to_arp_index>
 800e12e:	4603      	mov	r3, r0
 800e130:	e018      	b.n	800e164 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e132:	7dfb      	ldrb	r3, [r7, #23]
 800e134:	3301      	adds	r3, #1
 800e136:	75fb      	strb	r3, [r7, #23]
 800e138:	7dfb      	ldrb	r3, [r7, #23]
 800e13a:	2b09      	cmp	r3, #9
 800e13c:	d9ca      	bls.n	800e0d4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e13e:	68ba      	ldr	r2, [r7, #8]
 800e140:	69b9      	ldr	r1, [r7, #24]
 800e142:	68f8      	ldr	r0, [r7, #12]
 800e144:	f000 f822 	bl	800e18c <etharp_query>
 800e148:	4603      	mov	r3, r0
 800e14a:	e00b      	b.n	800e164 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e152:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e156:	9300      	str	r3, [sp, #0]
 800e158:	69fb      	ldr	r3, [r7, #28]
 800e15a:	68b9      	ldr	r1, [r7, #8]
 800e15c:	68f8      	ldr	r0, [r7, #12]
 800e15e:	f001 fd3f 	bl	800fbe0 <ethernet_output>
 800e162:	4603      	mov	r3, r0
}
 800e164:	4618      	mov	r0, r3
 800e166:	3720      	adds	r7, #32
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	08013520 	.word	0x08013520
 800e170:	08013670 	.word	0x08013670
 800e174:	08013598 	.word	0x08013598
 800e178:	080136c0 	.word	0x080136c0
 800e17c:	08013660 	.word	0x08013660
 800e180:	08013cc8 	.word	0x08013cc8
 800e184:	20000210 	.word	0x20000210
 800e188:	20000120 	.word	0x20000120

0800e18c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b08c      	sub	sp, #48	; 0x30
 800e190:	af02      	add	r7, sp, #8
 800e192:	60f8      	str	r0, [r7, #12]
 800e194:	60b9      	str	r1, [r7, #8]
 800e196:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	3326      	adds	r3, #38	; 0x26
 800e19c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e19e:	23ff      	movs	r3, #255	; 0xff
 800e1a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	68f9      	ldr	r1, [r7, #12]
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f000 fe0e 	bl	800edd0 <ip4_addr_isbroadcast_u32>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d10c      	bne.n	800e1d4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e1c2:	2be0      	cmp	r3, #224	; 0xe0
 800e1c4:	d006      	beq.n	800e1d4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d003      	beq.n	800e1d4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d102      	bne.n	800e1da <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e1d4:	f06f 030f 	mvn.w	r3, #15
 800e1d8:	e101      	b.n	800e3de <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e1da:	68fa      	ldr	r2, [r7, #12]
 800e1dc:	2101      	movs	r1, #1
 800e1de:	68b8      	ldr	r0, [r7, #8]
 800e1e0:	f7ff fb60 	bl	800d8a4 <etharp_find_entry>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800e1e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	da02      	bge.n	800e1f6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800e1f0:	8a7b      	ldrh	r3, [r7, #18]
 800e1f2:	b25b      	sxtb	r3, r3
 800e1f4:	e0f3      	b.n	800e3de <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e1f6:	8a7b      	ldrh	r3, [r7, #18]
 800e1f8:	2b7e      	cmp	r3, #126	; 0x7e
 800e1fa:	d906      	bls.n	800e20a <etharp_query+0x7e>
 800e1fc:	4b7a      	ldr	r3, [pc, #488]	; (800e3e8 <etharp_query+0x25c>)
 800e1fe:	f240 32c1 	movw	r2, #961	; 0x3c1
 800e202:	497a      	ldr	r1, [pc, #488]	; (800e3ec <etharp_query+0x260>)
 800e204:	487a      	ldr	r0, [pc, #488]	; (800e3f0 <etharp_query+0x264>)
 800e206:	f001 fd95 	bl	800fd34 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800e20a:	8a7b      	ldrh	r3, [r7, #18]
 800e20c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e20e:	7c7a      	ldrb	r2, [r7, #17]
 800e210:	4978      	ldr	r1, [pc, #480]	; (800e3f4 <etharp_query+0x268>)
 800e212:	4613      	mov	r3, r2
 800e214:	005b      	lsls	r3, r3, #1
 800e216:	4413      	add	r3, r2
 800e218:	00db      	lsls	r3, r3, #3
 800e21a:	440b      	add	r3, r1
 800e21c:	3314      	adds	r3, #20
 800e21e:	781b      	ldrb	r3, [r3, #0]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d115      	bne.n	800e250 <etharp_query+0xc4>
    is_new_entry = 1;
 800e224:	2301      	movs	r3, #1
 800e226:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e228:	7c7a      	ldrb	r2, [r7, #17]
 800e22a:	4972      	ldr	r1, [pc, #456]	; (800e3f4 <etharp_query+0x268>)
 800e22c:	4613      	mov	r3, r2
 800e22e:	005b      	lsls	r3, r3, #1
 800e230:	4413      	add	r3, r2
 800e232:	00db      	lsls	r3, r3, #3
 800e234:	440b      	add	r3, r1
 800e236:	3314      	adds	r3, #20
 800e238:	2201      	movs	r2, #1
 800e23a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e23c:	7c7a      	ldrb	r2, [r7, #17]
 800e23e:	496d      	ldr	r1, [pc, #436]	; (800e3f4 <etharp_query+0x268>)
 800e240:	4613      	mov	r3, r2
 800e242:	005b      	lsls	r3, r3, #1
 800e244:	4413      	add	r3, r2
 800e246:	00db      	lsls	r3, r3, #3
 800e248:	440b      	add	r3, r1
 800e24a:	3308      	adds	r3, #8
 800e24c:	68fa      	ldr	r2, [r7, #12]
 800e24e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e250:	7c7a      	ldrb	r2, [r7, #17]
 800e252:	4968      	ldr	r1, [pc, #416]	; (800e3f4 <etharp_query+0x268>)
 800e254:	4613      	mov	r3, r2
 800e256:	005b      	lsls	r3, r3, #1
 800e258:	4413      	add	r3, r2
 800e25a:	00db      	lsls	r3, r3, #3
 800e25c:	440b      	add	r3, r1
 800e25e:	3314      	adds	r3, #20
 800e260:	781b      	ldrb	r3, [r3, #0]
 800e262:	2b01      	cmp	r3, #1
 800e264:	d011      	beq.n	800e28a <etharp_query+0xfe>
 800e266:	7c7a      	ldrb	r2, [r7, #17]
 800e268:	4962      	ldr	r1, [pc, #392]	; (800e3f4 <etharp_query+0x268>)
 800e26a:	4613      	mov	r3, r2
 800e26c:	005b      	lsls	r3, r3, #1
 800e26e:	4413      	add	r3, r2
 800e270:	00db      	lsls	r3, r3, #3
 800e272:	440b      	add	r3, r1
 800e274:	3314      	adds	r3, #20
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	2b01      	cmp	r3, #1
 800e27a:	d806      	bhi.n	800e28a <etharp_query+0xfe>
 800e27c:	4b5a      	ldr	r3, [pc, #360]	; (800e3e8 <etharp_query+0x25c>)
 800e27e:	f240 32cd 	movw	r2, #973	; 0x3cd
 800e282:	495d      	ldr	r1, [pc, #372]	; (800e3f8 <etharp_query+0x26c>)
 800e284:	485a      	ldr	r0, [pc, #360]	; (800e3f0 <etharp_query+0x264>)
 800e286:	f001 fd55 	bl	800fd34 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e28a:	6a3b      	ldr	r3, [r7, #32]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d102      	bne.n	800e296 <etharp_query+0x10a>
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d10c      	bne.n	800e2b0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e296:	68b9      	ldr	r1, [r7, #8]
 800e298:	68f8      	ldr	r0, [r7, #12]
 800e29a:	f000 f963 	bl	800e564 <etharp_request>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d102      	bne.n	800e2b0 <etharp_query+0x124>
      return result;
 800e2aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e2ae:	e096      	b.n	800e3de <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d106      	bne.n	800e2c4 <etharp_query+0x138>
 800e2b6:	4b4c      	ldr	r3, [pc, #304]	; (800e3e8 <etharp_query+0x25c>)
 800e2b8:	f240 32e1 	movw	r2, #993	; 0x3e1
 800e2bc:	494f      	ldr	r1, [pc, #316]	; (800e3fc <etharp_query+0x270>)
 800e2be:	484c      	ldr	r0, [pc, #304]	; (800e3f0 <etharp_query+0x264>)
 800e2c0:	f001 fd38 	bl	800fd34 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e2c4:	7c7a      	ldrb	r2, [r7, #17]
 800e2c6:	494b      	ldr	r1, [pc, #300]	; (800e3f4 <etharp_query+0x268>)
 800e2c8:	4613      	mov	r3, r2
 800e2ca:	005b      	lsls	r3, r3, #1
 800e2cc:	4413      	add	r3, r2
 800e2ce:	00db      	lsls	r3, r3, #3
 800e2d0:	440b      	add	r3, r1
 800e2d2:	3314      	adds	r3, #20
 800e2d4:	781b      	ldrb	r3, [r3, #0]
 800e2d6:	2b01      	cmp	r3, #1
 800e2d8:	d917      	bls.n	800e30a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e2da:	4a49      	ldr	r2, [pc, #292]	; (800e400 <etharp_query+0x274>)
 800e2dc:	7c7b      	ldrb	r3, [r7, #17]
 800e2de:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e2e0:	7c7a      	ldrb	r2, [r7, #17]
 800e2e2:	4613      	mov	r3, r2
 800e2e4:	005b      	lsls	r3, r3, #1
 800e2e6:	4413      	add	r3, r2
 800e2e8:	00db      	lsls	r3, r3, #3
 800e2ea:	3308      	adds	r3, #8
 800e2ec:	4a41      	ldr	r2, [pc, #260]	; (800e3f4 <etharp_query+0x268>)
 800e2ee:	4413      	add	r3, r2
 800e2f0:	3304      	adds	r3, #4
 800e2f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e2f6:	9200      	str	r2, [sp, #0]
 800e2f8:	697a      	ldr	r2, [r7, #20]
 800e2fa:	6879      	ldr	r1, [r7, #4]
 800e2fc:	68f8      	ldr	r0, [r7, #12]
 800e2fe:	f001 fc6f 	bl	800fbe0 <ethernet_output>
 800e302:	4603      	mov	r3, r0
 800e304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e308:	e067      	b.n	800e3da <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e30a:	7c7a      	ldrb	r2, [r7, #17]
 800e30c:	4939      	ldr	r1, [pc, #228]	; (800e3f4 <etharp_query+0x268>)
 800e30e:	4613      	mov	r3, r2
 800e310:	005b      	lsls	r3, r3, #1
 800e312:	4413      	add	r3, r2
 800e314:	00db      	lsls	r3, r3, #3
 800e316:	440b      	add	r3, r1
 800e318:	3314      	adds	r3, #20
 800e31a:	781b      	ldrb	r3, [r3, #0]
 800e31c:	2b01      	cmp	r3, #1
 800e31e:	d15c      	bne.n	800e3da <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e320:	2300      	movs	r3, #0
 800e322:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e328:	e01c      	b.n	800e364 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e32a:	69fb      	ldr	r3, [r7, #28]
 800e32c:	895a      	ldrh	r2, [r3, #10]
 800e32e:	69fb      	ldr	r3, [r7, #28]
 800e330:	891b      	ldrh	r3, [r3, #8]
 800e332:	429a      	cmp	r2, r3
 800e334:	d10a      	bne.n	800e34c <etharp_query+0x1c0>
 800e336:	69fb      	ldr	r3, [r7, #28]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d006      	beq.n	800e34c <etharp_query+0x1c0>
 800e33e:	4b2a      	ldr	r3, [pc, #168]	; (800e3e8 <etharp_query+0x25c>)
 800e340:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e344:	492f      	ldr	r1, [pc, #188]	; (800e404 <etharp_query+0x278>)
 800e346:	482a      	ldr	r0, [pc, #168]	; (800e3f0 <etharp_query+0x264>)
 800e348:	f001 fcf4 	bl	800fd34 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e34c:	69fb      	ldr	r3, [r7, #28]
 800e34e:	7b1b      	ldrb	r3, [r3, #12]
 800e350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e354:	2b00      	cmp	r3, #0
 800e356:	d002      	beq.n	800e35e <etharp_query+0x1d2>
        copy_needed = 1;
 800e358:	2301      	movs	r3, #1
 800e35a:	61bb      	str	r3, [r7, #24]
        break;
 800e35c:	e005      	b.n	800e36a <etharp_query+0x1de>
      }
      p = p->next;
 800e35e:	69fb      	ldr	r3, [r7, #28]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d1df      	bne.n	800e32a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e36a:	69bb      	ldr	r3, [r7, #24]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d007      	beq.n	800e380 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e370:	687a      	ldr	r2, [r7, #4]
 800e372:	f44f 7120 	mov.w	r1, #640	; 0x280
 800e376:	200e      	movs	r0, #14
 800e378:	f7f8 fe34 	bl	8006fe4 <pbuf_clone>
 800e37c:	61f8      	str	r0, [r7, #28]
 800e37e:	e004      	b.n	800e38a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e384:	69f8      	ldr	r0, [r7, #28]
 800e386:	f7f8 fbcf 	bl	8006b28 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e38a:	69fb      	ldr	r3, [r7, #28]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d021      	beq.n	800e3d4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e390:	7c7a      	ldrb	r2, [r7, #17]
 800e392:	4918      	ldr	r1, [pc, #96]	; (800e3f4 <etharp_query+0x268>)
 800e394:	4613      	mov	r3, r2
 800e396:	005b      	lsls	r3, r3, #1
 800e398:	4413      	add	r3, r2
 800e39a:	00db      	lsls	r3, r3, #3
 800e39c:	440b      	add	r3, r1
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d00a      	beq.n	800e3ba <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e3a4:	7c7a      	ldrb	r2, [r7, #17]
 800e3a6:	4913      	ldr	r1, [pc, #76]	; (800e3f4 <etharp_query+0x268>)
 800e3a8:	4613      	mov	r3, r2
 800e3aa:	005b      	lsls	r3, r3, #1
 800e3ac:	4413      	add	r3, r2
 800e3ae:	00db      	lsls	r3, r3, #3
 800e3b0:	440b      	add	r3, r1
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f7f8 fb17 	bl	80069e8 <pbuf_free>
      }
      arp_table[i].q = p;
 800e3ba:	7c7a      	ldrb	r2, [r7, #17]
 800e3bc:	490d      	ldr	r1, [pc, #52]	; (800e3f4 <etharp_query+0x268>)
 800e3be:	4613      	mov	r3, r2
 800e3c0:	005b      	lsls	r3, r3, #1
 800e3c2:	4413      	add	r3, r2
 800e3c4:	00db      	lsls	r3, r3, #3
 800e3c6:	440b      	add	r3, r1
 800e3c8:	69fa      	ldr	r2, [r7, #28]
 800e3ca:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e3d2:	e002      	b.n	800e3da <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e3d4:	23ff      	movs	r3, #255	; 0xff
 800e3d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e3da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3728      	adds	r7, #40	; 0x28
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}
 800e3e6:	bf00      	nop
 800e3e8:	08013520 	.word	0x08013520
 800e3ec:	080136cc 	.word	0x080136cc
 800e3f0:	08013598 	.word	0x08013598
 800e3f4:	20000120 	.word	0x20000120
 800e3f8:	080136dc 	.word	0x080136dc
 800e3fc:	080136c0 	.word	0x080136c0
 800e400:	20000210 	.word	0x20000210
 800e404:	08013704 	.word	0x08013704

0800e408 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b08a      	sub	sp, #40	; 0x28
 800e40c:	af02      	add	r7, sp, #8
 800e40e:	60f8      	str	r0, [r7, #12]
 800e410:	60b9      	str	r1, [r7, #8]
 800e412:	607a      	str	r2, [r7, #4]
 800e414:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e416:	2300      	movs	r3, #0
 800e418:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d106      	bne.n	800e42e <etharp_raw+0x26>
 800e420:	4b3a      	ldr	r3, [pc, #232]	; (800e50c <etharp_raw+0x104>)
 800e422:	f240 4257 	movw	r2, #1111	; 0x457
 800e426:	493a      	ldr	r1, [pc, #232]	; (800e510 <etharp_raw+0x108>)
 800e428:	483a      	ldr	r0, [pc, #232]	; (800e514 <etharp_raw+0x10c>)
 800e42a:	f001 fc83 	bl	800fd34 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e42e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e432:	211c      	movs	r1, #28
 800e434:	200e      	movs	r0, #14
 800e436:	f7f7 fff3 	bl	8006420 <pbuf_alloc>
 800e43a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e43c:	69bb      	ldr	r3, [r7, #24]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d102      	bne.n	800e448 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e442:	f04f 33ff 	mov.w	r3, #4294967295
 800e446:	e05d      	b.n	800e504 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e448:	69bb      	ldr	r3, [r7, #24]
 800e44a:	895b      	ldrh	r3, [r3, #10]
 800e44c:	2b1b      	cmp	r3, #27
 800e44e:	d806      	bhi.n	800e45e <etharp_raw+0x56>
 800e450:	4b2e      	ldr	r3, [pc, #184]	; (800e50c <etharp_raw+0x104>)
 800e452:	f240 4262 	movw	r2, #1122	; 0x462
 800e456:	4930      	ldr	r1, [pc, #192]	; (800e518 <etharp_raw+0x110>)
 800e458:	482e      	ldr	r0, [pc, #184]	; (800e514 <etharp_raw+0x10c>)
 800e45a:	f001 fc6b 	bl	800fd34 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e45e:	69bb      	ldr	r3, [r7, #24]
 800e460:	685b      	ldr	r3, [r3, #4]
 800e462:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e464:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e466:	4618      	mov	r0, r3
 800e468:	f7f7 f80a 	bl	8005480 <lwip_htons>
 800e46c:	4603      	mov	r3, r0
 800e46e:	461a      	mov	r2, r3
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e47a:	2b06      	cmp	r3, #6
 800e47c:	d006      	beq.n	800e48c <etharp_raw+0x84>
 800e47e:	4b23      	ldr	r3, [pc, #140]	; (800e50c <etharp_raw+0x104>)
 800e480:	f240 4269 	movw	r2, #1129	; 0x469
 800e484:	4925      	ldr	r1, [pc, #148]	; (800e51c <etharp_raw+0x114>)
 800e486:	4823      	ldr	r0, [pc, #140]	; (800e514 <etharp_raw+0x10c>)
 800e488:	f001 fc54 	bl	800fd34 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e48c:	697b      	ldr	r3, [r7, #20]
 800e48e:	3308      	adds	r3, #8
 800e490:	2206      	movs	r2, #6
 800e492:	6839      	ldr	r1, [r7, #0]
 800e494:	4618      	mov	r0, r3
 800e496:	f001 fc1d 	bl	800fcd4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	3312      	adds	r3, #18
 800e49e:	2206      	movs	r2, #6
 800e4a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f001 fc16 	bl	800fcd4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	330e      	adds	r3, #14
 800e4ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e4ae:	6812      	ldr	r2, [r2, #0]
 800e4b0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	3318      	adds	r3, #24
 800e4b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4b8:	6812      	ldr	r2, [r2, #0]
 800e4ba:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	701a      	strb	r2, [r3, #0]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	f042 0201 	orr.w	r2, r2, #1
 800e4c8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	f042 0208 	orr.w	r2, r2, #8
 800e4d2:	709a      	strb	r2, [r3, #2]
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e4d8:	697b      	ldr	r3, [r7, #20]
 800e4da:	2206      	movs	r2, #6
 800e4dc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e4de:	697b      	ldr	r3, [r7, #20]
 800e4e0:	2204      	movs	r2, #4
 800e4e2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e4e4:	f640 0306 	movw	r3, #2054	; 0x806
 800e4e8:	9300      	str	r3, [sp, #0]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	68ba      	ldr	r2, [r7, #8]
 800e4ee:	69b9      	ldr	r1, [r7, #24]
 800e4f0:	68f8      	ldr	r0, [r7, #12]
 800e4f2:	f001 fb75 	bl	800fbe0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e4f6:	69b8      	ldr	r0, [r7, #24]
 800e4f8:	f7f8 fa76 	bl	80069e8 <pbuf_free>
  p = NULL;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e500:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e504:	4618      	mov	r0, r3
 800e506:	3720      	adds	r7, #32
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}
 800e50c:	08013520 	.word	0x08013520
 800e510:	08013670 	.word	0x08013670
 800e514:	08013598 	.word	0x08013598
 800e518:	08013720 	.word	0x08013720
 800e51c:	08013754 	.word	0x08013754

0800e520 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b088      	sub	sp, #32
 800e524:	af04      	add	r7, sp, #16
 800e526:	60f8      	str	r0, [r7, #12]
 800e528:	60b9      	str	r1, [r7, #8]
 800e52a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e53c:	2201      	movs	r2, #1
 800e53e:	9203      	str	r2, [sp, #12]
 800e540:	68ba      	ldr	r2, [r7, #8]
 800e542:	9202      	str	r2, [sp, #8]
 800e544:	4a06      	ldr	r2, [pc, #24]	; (800e560 <etharp_request_dst+0x40>)
 800e546:	9201      	str	r2, [sp, #4]
 800e548:	9300      	str	r3, [sp, #0]
 800e54a:	4603      	mov	r3, r0
 800e54c:	687a      	ldr	r2, [r7, #4]
 800e54e:	68f8      	ldr	r0, [r7, #12]
 800e550:	f7ff ff5a 	bl	800e408 <etharp_raw>
 800e554:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e556:	4618      	mov	r0, r3
 800e558:	3710      	adds	r7, #16
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}
 800e55e:	bf00      	nop
 800e560:	08013cd0 	.word	0x08013cd0

0800e564 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b082      	sub	sp, #8
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e56e:	4a05      	ldr	r2, [pc, #20]	; (800e584 <etharp_request+0x20>)
 800e570:	6839      	ldr	r1, [r7, #0]
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f7ff ffd4 	bl	800e520 <etharp_request_dst>
 800e578:	4603      	mov	r3, r0
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3708      	adds	r7, #8
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	08013cc8 	.word	0x08013cc8

0800e588 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b08e      	sub	sp, #56	; 0x38
 800e58c:	af04      	add	r7, sp, #16
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e592:	4b79      	ldr	r3, [pc, #484]	; (800e778 <icmp_input+0x1f0>)
 800e594:	689b      	ldr	r3, [r3, #8]
 800e596:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59a:	781b      	ldrb	r3, [r3, #0]
 800e59c:	f003 030f 	and.w	r3, r3, #15
 800e5a0:	b2db      	uxtb	r3, r3
 800e5a2:	009b      	lsls	r3, r3, #2
 800e5a4:	b2db      	uxtb	r3, r3
 800e5a6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e5a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e5aa:	2b13      	cmp	r3, #19
 800e5ac:	f240 80cd 	bls.w	800e74a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	895b      	ldrh	r3, [r3, #10]
 800e5b4:	2b03      	cmp	r3, #3
 800e5b6:	f240 80ca 	bls.w	800e74e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	685b      	ldr	r3, [r3, #4]
 800e5be:	781b      	ldrb	r3, [r3, #0]
 800e5c0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e5c4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	f000 80b7 	beq.w	800e73c <icmp_input+0x1b4>
 800e5ce:	2b08      	cmp	r3, #8
 800e5d0:	f040 80b7 	bne.w	800e742 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e5d4:	4b69      	ldr	r3, [pc, #420]	; (800e77c <icmp_input+0x1f4>)
 800e5d6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e5d8:	4b67      	ldr	r3, [pc, #412]	; (800e778 <icmp_input+0x1f0>)
 800e5da:	695b      	ldr	r3, [r3, #20]
 800e5dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e5e0:	2be0      	cmp	r3, #224	; 0xe0
 800e5e2:	f000 80bb 	beq.w	800e75c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e5e6:	4b64      	ldr	r3, [pc, #400]	; (800e778 <icmp_input+0x1f0>)
 800e5e8:	695b      	ldr	r3, [r3, #20]
 800e5ea:	4a63      	ldr	r2, [pc, #396]	; (800e778 <icmp_input+0x1f0>)
 800e5ec:	6812      	ldr	r2, [r2, #0]
 800e5ee:	4611      	mov	r1, r2
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f000 fbed 	bl	800edd0 <ip4_addr_isbroadcast_u32>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	f040 80b1 	bne.w	800e760 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	891b      	ldrh	r3, [r3, #8]
 800e602:	2b07      	cmp	r3, #7
 800e604:	f240 80a5 	bls.w	800e752 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e608:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e60a:	330e      	adds	r3, #14
 800e60c:	4619      	mov	r1, r3
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f7f8 f954 	bl	80068bc <pbuf_add_header>
 800e614:	4603      	mov	r3, r0
 800e616:	2b00      	cmp	r3, #0
 800e618:	d04b      	beq.n	800e6b2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	891a      	ldrh	r2, [r3, #8]
 800e61e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e620:	4413      	add	r3, r2
 800e622:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	891b      	ldrh	r3, [r3, #8]
 800e628:	8b7a      	ldrh	r2, [r7, #26]
 800e62a:	429a      	cmp	r2, r3
 800e62c:	f0c0 809a 	bcc.w	800e764 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e630:	8b7b      	ldrh	r3, [r7, #26]
 800e632:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e636:	4619      	mov	r1, r3
 800e638:	200e      	movs	r0, #14
 800e63a:	f7f7 fef1 	bl	8006420 <pbuf_alloc>
 800e63e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	2b00      	cmp	r3, #0
 800e644:	f000 8090 	beq.w	800e768 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e648:	697b      	ldr	r3, [r7, #20]
 800e64a:	895b      	ldrh	r3, [r3, #10]
 800e64c:	461a      	mov	r2, r3
 800e64e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e650:	3308      	adds	r3, #8
 800e652:	429a      	cmp	r2, r3
 800e654:	d203      	bcs.n	800e65e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e656:	6978      	ldr	r0, [r7, #20]
 800e658:	f7f8 f9c6 	bl	80069e8 <pbuf_free>
          goto icmperr;
 800e65c:	e085      	b.n	800e76a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	685b      	ldr	r3, [r3, #4]
 800e662:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e666:	4618      	mov	r0, r3
 800e668:	f001 fb34 	bl	800fcd4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e66c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e66e:	4619      	mov	r1, r3
 800e670:	6978      	ldr	r0, [r7, #20]
 800e672:	f7f8 f933 	bl	80068dc <pbuf_remove_header>
 800e676:	4603      	mov	r3, r0
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d009      	beq.n	800e690 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e67c:	4b40      	ldr	r3, [pc, #256]	; (800e780 <icmp_input+0x1f8>)
 800e67e:	22b6      	movs	r2, #182	; 0xb6
 800e680:	4940      	ldr	r1, [pc, #256]	; (800e784 <icmp_input+0x1fc>)
 800e682:	4841      	ldr	r0, [pc, #260]	; (800e788 <icmp_input+0x200>)
 800e684:	f001 fb56 	bl	800fd34 <iprintf>
          pbuf_free(r);
 800e688:	6978      	ldr	r0, [r7, #20]
 800e68a:	f7f8 f9ad 	bl	80069e8 <pbuf_free>
          goto icmperr;
 800e68e:	e06c      	b.n	800e76a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e690:	6879      	ldr	r1, [r7, #4]
 800e692:	6978      	ldr	r0, [r7, #20]
 800e694:	f7f8 fad0 	bl	8006c38 <pbuf_copy>
 800e698:	4603      	mov	r3, r0
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d003      	beq.n	800e6a6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e69e:	6978      	ldr	r0, [r7, #20]
 800e6a0:	f7f8 f9a2 	bl	80069e8 <pbuf_free>
          goto icmperr;
 800e6a4:	e061      	b.n	800e76a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f7f8 f99e 	bl	80069e8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	607b      	str	r3, [r7, #4]
 800e6b0:	e00f      	b.n	800e6d2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e6b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e6b4:	330e      	adds	r3, #14
 800e6b6:	4619      	mov	r1, r3
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f7f8 f90f 	bl	80068dc <pbuf_remove_header>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d006      	beq.n	800e6d2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e6c4:	4b2e      	ldr	r3, [pc, #184]	; (800e780 <icmp_input+0x1f8>)
 800e6c6:	22c7      	movs	r2, #199	; 0xc7
 800e6c8:	4930      	ldr	r1, [pc, #192]	; (800e78c <icmp_input+0x204>)
 800e6ca:	482f      	ldr	r0, [pc, #188]	; (800e788 <icmp_input+0x200>)
 800e6cc:	f001 fb32 	bl	800fd34 <iprintf>
          goto icmperr;
 800e6d0:	e04b      	b.n	800e76a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	685b      	ldr	r3, [r3, #4]
 800e6d6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e6d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e6da:	4619      	mov	r1, r3
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	f7f8 f8ed 	bl	80068bc <pbuf_add_header>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d12b      	bne.n	800e740 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	685b      	ldr	r3, [r3, #4]
 800e6ec:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e6ee:	69fb      	ldr	r3, [r7, #28]
 800e6f0:	681a      	ldr	r2, [r3, #0]
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e6f6:	4b20      	ldr	r3, [pc, #128]	; (800e778 <icmp_input+0x1f0>)
 800e6f8:	691a      	ldr	r2, [r3, #16]
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	2200      	movs	r2, #0
 800e702:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	2200      	movs	r2, #0
 800e708:	709a      	strb	r2, [r3, #2]
 800e70a:	2200      	movs	r2, #0
 800e70c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	22ff      	movs	r2, #255	; 0xff
 800e712:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2200      	movs	r2, #0
 800e718:	729a      	strb	r2, [r3, #10]
 800e71a:	2200      	movs	r2, #0
 800e71c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	9302      	str	r3, [sp, #8]
 800e722:	2301      	movs	r3, #1
 800e724:	9301      	str	r3, [sp, #4]
 800e726:	2300      	movs	r3, #0
 800e728:	9300      	str	r3, [sp, #0]
 800e72a:	23ff      	movs	r3, #255	; 0xff
 800e72c:	2200      	movs	r2, #0
 800e72e:	69f9      	ldr	r1, [r7, #28]
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	f000 fa75 	bl	800ec20 <ip4_output_if>
 800e736:	4603      	mov	r3, r0
 800e738:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e73a:	e001      	b.n	800e740 <icmp_input+0x1b8>
      break;
 800e73c:	bf00      	nop
 800e73e:	e000      	b.n	800e742 <icmp_input+0x1ba>
      break;
 800e740:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f7f8 f950 	bl	80069e8 <pbuf_free>
  return;
 800e748:	e013      	b.n	800e772 <icmp_input+0x1ea>
    goto lenerr;
 800e74a:	bf00      	nop
 800e74c:	e002      	b.n	800e754 <icmp_input+0x1cc>
    goto lenerr;
 800e74e:	bf00      	nop
 800e750:	e000      	b.n	800e754 <icmp_input+0x1cc>
        goto lenerr;
 800e752:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f7f8 f947 	bl	80069e8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e75a:	e00a      	b.n	800e772 <icmp_input+0x1ea>
        goto icmperr;
 800e75c:	bf00      	nop
 800e75e:	e004      	b.n	800e76a <icmp_input+0x1e2>
        goto icmperr;
 800e760:	bf00      	nop
 800e762:	e002      	b.n	800e76a <icmp_input+0x1e2>
          goto icmperr;
 800e764:	bf00      	nop
 800e766:	e000      	b.n	800e76a <icmp_input+0x1e2>
          goto icmperr;
 800e768:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f7f8 f93c 	bl	80069e8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e770:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e772:	3728      	adds	r7, #40	; 0x28
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}
 800e778:	200034e8 	.word	0x200034e8
 800e77c:	200034fc 	.word	0x200034fc
 800e780:	08013798 	.word	0x08013798
 800e784:	080137d0 	.word	0x080137d0
 800e788:	08013808 	.word	0x08013808
 800e78c:	08013830 	.word	0x08013830

0800e790 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b082      	sub	sp, #8
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	460b      	mov	r3, r1
 800e79a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e79c:	78fb      	ldrb	r3, [r7, #3]
 800e79e:	461a      	mov	r2, r3
 800e7a0:	2103      	movs	r1, #3
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f000 f814 	bl	800e7d0 <icmp_send_response>
}
 800e7a8:	bf00      	nop
 800e7aa:	3708      	adds	r7, #8
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}

0800e7b0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b082      	sub	sp, #8
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	460b      	mov	r3, r1
 800e7ba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e7bc:	78fb      	ldrb	r3, [r7, #3]
 800e7be:	461a      	mov	r2, r3
 800e7c0:	210b      	movs	r1, #11
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f000 f804 	bl	800e7d0 <icmp_send_response>
}
 800e7c8:	bf00      	nop
 800e7ca:	3708      	adds	r7, #8
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}

0800e7d0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b08c      	sub	sp, #48	; 0x30
 800e7d4:	af04      	add	r7, sp, #16
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	460b      	mov	r3, r1
 800e7da:	70fb      	strb	r3, [r7, #3]
 800e7dc:	4613      	mov	r3, r2
 800e7de:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e7e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e7e4:	2124      	movs	r1, #36	; 0x24
 800e7e6:	2022      	movs	r0, #34	; 0x22
 800e7e8:	f7f7 fe1a 	bl	8006420 <pbuf_alloc>
 800e7ec:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e7ee:	69fb      	ldr	r3, [r7, #28]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d04c      	beq.n	800e88e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e7f4:	69fb      	ldr	r3, [r7, #28]
 800e7f6:	895b      	ldrh	r3, [r3, #10]
 800e7f8:	2b23      	cmp	r3, #35	; 0x23
 800e7fa:	d806      	bhi.n	800e80a <icmp_send_response+0x3a>
 800e7fc:	4b26      	ldr	r3, [pc, #152]	; (800e898 <icmp_send_response+0xc8>)
 800e7fe:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e802:	4926      	ldr	r1, [pc, #152]	; (800e89c <icmp_send_response+0xcc>)
 800e804:	4826      	ldr	r0, [pc, #152]	; (800e8a0 <icmp_send_response+0xd0>)
 800e806:	f001 fa95 	bl	800fd34 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e810:	69fb      	ldr	r3, [r7, #28]
 800e812:	685b      	ldr	r3, [r3, #4]
 800e814:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	78fa      	ldrb	r2, [r7, #3]
 800e81a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	78ba      	ldrb	r2, [r7, #2]
 800e820:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	2200      	movs	r2, #0
 800e826:	711a      	strb	r2, [r3, #4]
 800e828:	2200      	movs	r2, #0
 800e82a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	2200      	movs	r2, #0
 800e830:	719a      	strb	r2, [r3, #6]
 800e832:	2200      	movs	r2, #0
 800e834:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e836:	69fb      	ldr	r3, [r7, #28]
 800e838:	685b      	ldr	r3, [r3, #4]
 800e83a:	f103 0008 	add.w	r0, r3, #8
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	685b      	ldr	r3, [r3, #4]
 800e842:	221c      	movs	r2, #28
 800e844:	4619      	mov	r1, r3
 800e846:	f001 fa45 	bl	800fcd4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e84a:	69bb      	ldr	r3, [r7, #24]
 800e84c:	68db      	ldr	r3, [r3, #12]
 800e84e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e850:	f107 030c 	add.w	r3, r7, #12
 800e854:	4618      	mov	r0, r3
 800e856:	f000 f825 	bl	800e8a4 <ip4_route>
 800e85a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e85c:	693b      	ldr	r3, [r7, #16]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d011      	beq.n	800e886 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	2200      	movs	r2, #0
 800e866:	709a      	strb	r2, [r3, #2]
 800e868:	2200      	movs	r2, #0
 800e86a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e86c:	f107 020c 	add.w	r2, r7, #12
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	9302      	str	r3, [sp, #8]
 800e874:	2301      	movs	r3, #1
 800e876:	9301      	str	r3, [sp, #4]
 800e878:	2300      	movs	r3, #0
 800e87a:	9300      	str	r3, [sp, #0]
 800e87c:	23ff      	movs	r3, #255	; 0xff
 800e87e:	2100      	movs	r1, #0
 800e880:	69f8      	ldr	r0, [r7, #28]
 800e882:	f000 f9cd 	bl	800ec20 <ip4_output_if>
  }
  pbuf_free(q);
 800e886:	69f8      	ldr	r0, [r7, #28]
 800e888:	f7f8 f8ae 	bl	80069e8 <pbuf_free>
 800e88c:	e000      	b.n	800e890 <icmp_send_response+0xc0>
    return;
 800e88e:	bf00      	nop
}
 800e890:	3720      	adds	r7, #32
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	08013798 	.word	0x08013798
 800e89c:	08013864 	.word	0x08013864
 800e8a0:	08013808 	.word	0x08013808

0800e8a4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b085      	sub	sp, #20
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e8ac:	4b33      	ldr	r3, [pc, #204]	; (800e97c <ip4_route+0xd8>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	60fb      	str	r3, [r7, #12]
 800e8b2:	e036      	b.n	800e922 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e8ba:	f003 0301 	and.w	r3, r3, #1
 800e8be:	b2db      	uxtb	r3, r3
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d02b      	beq.n	800e91c <ip4_route+0x78>
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e8ca:	089b      	lsrs	r3, r3, #2
 800e8cc:	f003 0301 	and.w	r3, r3, #1
 800e8d0:	b2db      	uxtb	r3, r3
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d022      	beq.n	800e91c <ip4_route+0x78>
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	3304      	adds	r3, #4
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d01d      	beq.n	800e91c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681a      	ldr	r2, [r3, #0]
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	3304      	adds	r3, #4
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	405a      	eors	r2, r3
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	3308      	adds	r3, #8
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	4013      	ands	r3, r2
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d101      	bne.n	800e8fc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	e038      	b.n	800e96e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e902:	f003 0302 	and.w	r3, r3, #2
 800e906:	2b00      	cmp	r3, #0
 800e908:	d108      	bne.n	800e91c <ip4_route+0x78>
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681a      	ldr	r2, [r3, #0]
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	330c      	adds	r3, #12
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	429a      	cmp	r2, r3
 800e916:	d101      	bne.n	800e91c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	e028      	b.n	800e96e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	60fb      	str	r3, [r7, #12]
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d1c5      	bne.n	800e8b4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e928:	4b15      	ldr	r3, [pc, #84]	; (800e980 <ip4_route+0xdc>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d01a      	beq.n	800e966 <ip4_route+0xc2>
 800e930:	4b13      	ldr	r3, [pc, #76]	; (800e980 <ip4_route+0xdc>)
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e938:	f003 0301 	and.w	r3, r3, #1
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d012      	beq.n	800e966 <ip4_route+0xc2>
 800e940:	4b0f      	ldr	r3, [pc, #60]	; (800e980 <ip4_route+0xdc>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e948:	f003 0304 	and.w	r3, r3, #4
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d00a      	beq.n	800e966 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e950:	4b0b      	ldr	r3, [pc, #44]	; (800e980 <ip4_route+0xdc>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	3304      	adds	r3, #4
 800e956:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d004      	beq.n	800e966 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	b2db      	uxtb	r3, r3
 800e962:	2b7f      	cmp	r3, #127	; 0x7f
 800e964:	d101      	bne.n	800e96a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e966:	2300      	movs	r3, #0
 800e968:	e001      	b.n	800e96e <ip4_route+0xca>
  }

  return netif_default;
 800e96a:	4b05      	ldr	r3, [pc, #20]	; (800e980 <ip4_route+0xdc>)
 800e96c:	681b      	ldr	r3, [r3, #0]
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3714      	adds	r7, #20
 800e972:	46bd      	mov	sp, r7
 800e974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e978:	4770      	bx	lr
 800e97a:	bf00      	nop
 800e97c:	20006a1c 	.word	0x20006a1c
 800e980:	20006a20 	.word	0x20006a20

0800e984 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b082      	sub	sp, #8
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e992:	f003 0301 	and.w	r3, r3, #1
 800e996:	b2db      	uxtb	r3, r3
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d016      	beq.n	800e9ca <ip4_input_accept+0x46>
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	3304      	adds	r3, #4
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d011      	beq.n	800e9ca <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e9a6:	4b0b      	ldr	r3, [pc, #44]	; (800e9d4 <ip4_input_accept+0x50>)
 800e9a8:	695a      	ldr	r2, [r3, #20]
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	3304      	adds	r3, #4
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d008      	beq.n	800e9c6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e9b4:	4b07      	ldr	r3, [pc, #28]	; (800e9d4 <ip4_input_accept+0x50>)
 800e9b6:	695b      	ldr	r3, [r3, #20]
 800e9b8:	6879      	ldr	r1, [r7, #4]
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f000 fa08 	bl	800edd0 <ip4_addr_isbroadcast_u32>
 800e9c0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d001      	beq.n	800e9ca <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	e000      	b.n	800e9cc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e9ca:	2300      	movs	r3, #0
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3708      	adds	r7, #8
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}
 800e9d4:	200034e8 	.word	0x200034e8

0800e9d8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b086      	sub	sp, #24
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	685b      	ldr	r3, [r3, #4]
 800e9e6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	781b      	ldrb	r3, [r3, #0]
 800e9ec:	091b      	lsrs	r3, r3, #4
 800e9ee:	b2db      	uxtb	r3, r3
 800e9f0:	2b04      	cmp	r3, #4
 800e9f2:	d004      	beq.n	800e9fe <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f7f7 fff7 	bl	80069e8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	e107      	b.n	800ec0e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	781b      	ldrb	r3, [r3, #0]
 800ea02:	f003 030f 	and.w	r3, r3, #15
 800ea06:	b2db      	uxtb	r3, r3
 800ea08:	009b      	lsls	r3, r3, #2
 800ea0a:	b2db      	uxtb	r3, r3
 800ea0c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	885b      	ldrh	r3, [r3, #2]
 800ea12:	b29b      	uxth	r3, r3
 800ea14:	4618      	mov	r0, r3
 800ea16:	f7f6 fd33 	bl	8005480 <lwip_htons>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	891b      	ldrh	r3, [r3, #8]
 800ea22:	89ba      	ldrh	r2, [r7, #12]
 800ea24:	429a      	cmp	r2, r3
 800ea26:	d204      	bcs.n	800ea32 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800ea28:	89bb      	ldrh	r3, [r7, #12]
 800ea2a:	4619      	mov	r1, r3
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f7f7 fe55 	bl	80066dc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	895b      	ldrh	r3, [r3, #10]
 800ea36:	89fa      	ldrh	r2, [r7, #14]
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	d807      	bhi.n	800ea4c <ip4_input+0x74>
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	891b      	ldrh	r3, [r3, #8]
 800ea40:	89ba      	ldrh	r2, [r7, #12]
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d802      	bhi.n	800ea4c <ip4_input+0x74>
 800ea46:	89fb      	ldrh	r3, [r7, #14]
 800ea48:	2b13      	cmp	r3, #19
 800ea4a:	d804      	bhi.n	800ea56 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f7f7 ffcb 	bl	80069e8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800ea52:	2300      	movs	r3, #0
 800ea54:	e0db      	b.n	800ec0e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	691b      	ldr	r3, [r3, #16]
 800ea5a:	4a6f      	ldr	r2, [pc, #444]	; (800ec18 <ip4_input+0x240>)
 800ea5c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	68db      	ldr	r3, [r3, #12]
 800ea62:	4a6d      	ldr	r2, [pc, #436]	; (800ec18 <ip4_input+0x240>)
 800ea64:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ea66:	4b6c      	ldr	r3, [pc, #432]	; (800ec18 <ip4_input+0x240>)
 800ea68:	695b      	ldr	r3, [r3, #20]
 800ea6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ea6e:	2be0      	cmp	r3, #224	; 0xe0
 800ea70:	d112      	bne.n	800ea98 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ea78:	f003 0301 	and.w	r3, r3, #1
 800ea7c:	b2db      	uxtb	r3, r3
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d007      	beq.n	800ea92 <ip4_input+0xba>
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	3304      	adds	r3, #4
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d002      	beq.n	800ea92 <ip4_input+0xba>
      netif = inp;
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	613b      	str	r3, [r7, #16]
 800ea90:	e02a      	b.n	800eae8 <ip4_input+0x110>
    } else {
      netif = NULL;
 800ea92:	2300      	movs	r3, #0
 800ea94:	613b      	str	r3, [r7, #16]
 800ea96:	e027      	b.n	800eae8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800ea98:	6838      	ldr	r0, [r7, #0]
 800ea9a:	f7ff ff73 	bl	800e984 <ip4_input_accept>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d002      	beq.n	800eaaa <ip4_input+0xd2>
      netif = inp;
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	613b      	str	r3, [r7, #16]
 800eaa8:	e01e      	b.n	800eae8 <ip4_input+0x110>
    } else {
      netif = NULL;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800eaae:	4b5a      	ldr	r3, [pc, #360]	; (800ec18 <ip4_input+0x240>)
 800eab0:	695b      	ldr	r3, [r3, #20]
 800eab2:	b2db      	uxtb	r3, r3
 800eab4:	2b7f      	cmp	r3, #127	; 0x7f
 800eab6:	d017      	beq.n	800eae8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800eab8:	4b58      	ldr	r3, [pc, #352]	; (800ec1c <ip4_input+0x244>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	613b      	str	r3, [r7, #16]
 800eabe:	e00e      	b.n	800eade <ip4_input+0x106>
          if (netif == inp) {
 800eac0:	693a      	ldr	r2, [r7, #16]
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d006      	beq.n	800ead6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800eac8:	6938      	ldr	r0, [r7, #16]
 800eaca:	f7ff ff5b 	bl	800e984 <ip4_input_accept>
 800eace:	4603      	mov	r3, r0
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d108      	bne.n	800eae6 <ip4_input+0x10e>
 800ead4:	e000      	b.n	800ead8 <ip4_input+0x100>
            continue;
 800ead6:	bf00      	nop
        NETIF_FOREACH(netif) {
 800ead8:	693b      	ldr	r3, [r7, #16]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	613b      	str	r3, [r7, #16]
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d1ed      	bne.n	800eac0 <ip4_input+0xe8>
 800eae4:	e000      	b.n	800eae8 <ip4_input+0x110>
            break;
 800eae6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800eae8:	4b4b      	ldr	r3, [pc, #300]	; (800ec18 <ip4_input+0x240>)
 800eaea:	691b      	ldr	r3, [r3, #16]
 800eaec:	6839      	ldr	r1, [r7, #0]
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f000 f96e 	bl	800edd0 <ip4_addr_isbroadcast_u32>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d105      	bne.n	800eb06 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800eafa:	4b47      	ldr	r3, [pc, #284]	; (800ec18 <ip4_input+0x240>)
 800eafc:	691b      	ldr	r3, [r3, #16]
 800eafe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800eb02:	2be0      	cmp	r3, #224	; 0xe0
 800eb04:	d104      	bne.n	800eb10 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f7f7 ff6e 	bl	80069e8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	e07e      	b.n	800ec0e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d104      	bne.n	800eb20 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	f7f7 ff66 	bl	80069e8 <pbuf_free>
    return ERR_OK;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	e076      	b.n	800ec0e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800eb20:	697b      	ldr	r3, [r7, #20]
 800eb22:	88db      	ldrh	r3, [r3, #6]
 800eb24:	b29b      	uxth	r3, r3
 800eb26:	461a      	mov	r2, r3
 800eb28:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800eb2c:	4013      	ands	r3, r2
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d00b      	beq.n	800eb4a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f000 fc92 	bl	800f45c <ip4_reass>
 800eb38:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d101      	bne.n	800eb44 <ip4_input+0x16c>
      return ERR_OK;
 800eb40:	2300      	movs	r3, #0
 800eb42:	e064      	b.n	800ec0e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	685b      	ldr	r3, [r3, #4]
 800eb48:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800eb4a:	4a33      	ldr	r2, [pc, #204]	; (800ec18 <ip4_input+0x240>)
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800eb50:	4a31      	ldr	r2, [pc, #196]	; (800ec18 <ip4_input+0x240>)
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800eb56:	4a30      	ldr	r2, [pc, #192]	; (800ec18 <ip4_input+0x240>)
 800eb58:	697b      	ldr	r3, [r7, #20]
 800eb5a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800eb5c:	697b      	ldr	r3, [r7, #20]
 800eb5e:	781b      	ldrb	r3, [r3, #0]
 800eb60:	f003 030f 	and.w	r3, r3, #15
 800eb64:	b2db      	uxtb	r3, r3
 800eb66:	009b      	lsls	r3, r3, #2
 800eb68:	b2db      	uxtb	r3, r3
 800eb6a:	b29a      	uxth	r2, r3
 800eb6c:	4b2a      	ldr	r3, [pc, #168]	; (800ec18 <ip4_input+0x240>)
 800eb6e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800eb70:	89fb      	ldrh	r3, [r7, #14]
 800eb72:	4619      	mov	r1, r3
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f7f7 feb1 	bl	80068dc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	7a5b      	ldrb	r3, [r3, #9]
 800eb7e:	2b11      	cmp	r3, #17
 800eb80:	d006      	beq.n	800eb90 <ip4_input+0x1b8>
 800eb82:	2b11      	cmp	r3, #17
 800eb84:	dc13      	bgt.n	800ebae <ip4_input+0x1d6>
 800eb86:	2b01      	cmp	r3, #1
 800eb88:	d00c      	beq.n	800eba4 <ip4_input+0x1cc>
 800eb8a:	2b06      	cmp	r3, #6
 800eb8c:	d005      	beq.n	800eb9a <ip4_input+0x1c2>
 800eb8e:	e00e      	b.n	800ebae <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800eb90:	6839      	ldr	r1, [r7, #0]
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f7fe fc68 	bl	800d468 <udp_input>
        break;
 800eb98:	e026      	b.n	800ebe8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800eb9a:	6839      	ldr	r1, [r7, #0]
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f7fa f88d 	bl	8008cbc <tcp_input>
        break;
 800eba2:	e021      	b.n	800ebe8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800eba4:	6839      	ldr	r1, [r7, #0]
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f7ff fcee 	bl	800e588 <icmp_input>
        break;
 800ebac:	e01c      	b.n	800ebe8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ebae:	4b1a      	ldr	r3, [pc, #104]	; (800ec18 <ip4_input+0x240>)
 800ebb0:	695b      	ldr	r3, [r3, #20]
 800ebb2:	6939      	ldr	r1, [r7, #16]
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f000 f90b 	bl	800edd0 <ip4_addr_isbroadcast_u32>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d10f      	bne.n	800ebe0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ebc0:	4b15      	ldr	r3, [pc, #84]	; (800ec18 <ip4_input+0x240>)
 800ebc2:	695b      	ldr	r3, [r3, #20]
 800ebc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ebc8:	2be0      	cmp	r3, #224	; 0xe0
 800ebca:	d009      	beq.n	800ebe0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800ebcc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ebd0:	4619      	mov	r1, r3
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f7f7 fef5 	bl	80069c2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ebd8:	2102      	movs	r1, #2
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f7ff fdd8 	bl	800e790 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f7f7 ff01 	bl	80069e8 <pbuf_free>
        break;
 800ebe6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ebe8:	4b0b      	ldr	r3, [pc, #44]	; (800ec18 <ip4_input+0x240>)
 800ebea:	2200      	movs	r2, #0
 800ebec:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ebee:	4b0a      	ldr	r3, [pc, #40]	; (800ec18 <ip4_input+0x240>)
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ebf4:	4b08      	ldr	r3, [pc, #32]	; (800ec18 <ip4_input+0x240>)
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ebfa:	4b07      	ldr	r3, [pc, #28]	; (800ec18 <ip4_input+0x240>)
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ec00:	4b05      	ldr	r3, [pc, #20]	; (800ec18 <ip4_input+0x240>)
 800ec02:	2200      	movs	r2, #0
 800ec04:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ec06:	4b04      	ldr	r3, [pc, #16]	; (800ec18 <ip4_input+0x240>)
 800ec08:	2200      	movs	r2, #0
 800ec0a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800ec0c:	2300      	movs	r3, #0
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3718      	adds	r7, #24
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}
 800ec16:	bf00      	nop
 800ec18:	200034e8 	.word	0x200034e8
 800ec1c:	20006a1c 	.word	0x20006a1c

0800ec20 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b08a      	sub	sp, #40	; 0x28
 800ec24:	af04      	add	r7, sp, #16
 800ec26:	60f8      	str	r0, [r7, #12]
 800ec28:	60b9      	str	r1, [r7, #8]
 800ec2a:	607a      	str	r2, [r7, #4]
 800ec2c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d009      	beq.n	800ec4c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d003      	beq.n	800ec46 <ip4_output_if+0x26>
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d102      	bne.n	800ec4c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800ec46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec48:	3304      	adds	r3, #4
 800ec4a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800ec4c:	78fa      	ldrb	r2, [r7, #3]
 800ec4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec50:	9302      	str	r3, [sp, #8]
 800ec52:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ec56:	9301      	str	r3, [sp, #4]
 800ec58:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ec5c:	9300      	str	r3, [sp, #0]
 800ec5e:	4613      	mov	r3, r2
 800ec60:	687a      	ldr	r2, [r7, #4]
 800ec62:	6979      	ldr	r1, [r7, #20]
 800ec64:	68f8      	ldr	r0, [r7, #12]
 800ec66:	f000 f805 	bl	800ec74 <ip4_output_if_src>
 800ec6a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	3718      	adds	r7, #24
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}

0800ec74 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b088      	sub	sp, #32
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	60f8      	str	r0, [r7, #12]
 800ec7c:	60b9      	str	r1, [r7, #8]
 800ec7e:	607a      	str	r2, [r7, #4]
 800ec80:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	7b9b      	ldrb	r3, [r3, #14]
 800ec86:	2b01      	cmp	r3, #1
 800ec88:	d006      	beq.n	800ec98 <ip4_output_if_src+0x24>
 800ec8a:	4b4b      	ldr	r3, [pc, #300]	; (800edb8 <ip4_output_if_src+0x144>)
 800ec8c:	f44f 7255 	mov.w	r2, #852	; 0x354
 800ec90:	494a      	ldr	r1, [pc, #296]	; (800edbc <ip4_output_if_src+0x148>)
 800ec92:	484b      	ldr	r0, [pc, #300]	; (800edc0 <ip4_output_if_src+0x14c>)
 800ec94:	f001 f84e 	bl	800fd34 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d060      	beq.n	800ed60 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800ec9e:	2314      	movs	r3, #20
 800eca0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800eca2:	2114      	movs	r1, #20
 800eca4:	68f8      	ldr	r0, [r7, #12]
 800eca6:	f7f7 fe09 	bl	80068bc <pbuf_add_header>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d002      	beq.n	800ecb6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ecb0:	f06f 0301 	mvn.w	r3, #1
 800ecb4:	e07c      	b.n	800edb0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	685b      	ldr	r3, [r3, #4]
 800ecba:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	895b      	ldrh	r3, [r3, #10]
 800ecc0:	2b13      	cmp	r3, #19
 800ecc2:	d806      	bhi.n	800ecd2 <ip4_output_if_src+0x5e>
 800ecc4:	4b3c      	ldr	r3, [pc, #240]	; (800edb8 <ip4_output_if_src+0x144>)
 800ecc6:	f44f 7262 	mov.w	r2, #904	; 0x388
 800ecca:	493e      	ldr	r1, [pc, #248]	; (800edc4 <ip4_output_if_src+0x150>)
 800eccc:	483c      	ldr	r0, [pc, #240]	; (800edc0 <ip4_output_if_src+0x14c>)
 800ecce:	f001 f831 	bl	800fd34 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ecd2:	69fb      	ldr	r3, [r7, #28]
 800ecd4:	78fa      	ldrb	r2, [r7, #3]
 800ecd6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ecd8:	69fb      	ldr	r3, [r7, #28]
 800ecda:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ecde:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681a      	ldr	r2, [r3, #0]
 800ece4:	69fb      	ldr	r3, [r7, #28]
 800ece6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ece8:	8b7b      	ldrh	r3, [r7, #26]
 800ecea:	089b      	lsrs	r3, r3, #2
 800ecec:	b29b      	uxth	r3, r3
 800ecee:	b2db      	uxtb	r3, r3
 800ecf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecf4:	b2da      	uxtb	r2, r3
 800ecf6:	69fb      	ldr	r3, [r7, #28]
 800ecf8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ecfa:	69fb      	ldr	r3, [r7, #28]
 800ecfc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ed00:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	891b      	ldrh	r3, [r3, #8]
 800ed06:	4618      	mov	r0, r3
 800ed08:	f7f6 fbba 	bl	8005480 <lwip_htons>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	461a      	mov	r2, r3
 800ed10:	69fb      	ldr	r3, [r7, #28]
 800ed12:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ed14:	69fb      	ldr	r3, [r7, #28]
 800ed16:	2200      	movs	r2, #0
 800ed18:	719a      	strb	r2, [r3, #6]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ed1e:	4b2a      	ldr	r3, [pc, #168]	; (800edc8 <ip4_output_if_src+0x154>)
 800ed20:	881b      	ldrh	r3, [r3, #0]
 800ed22:	4618      	mov	r0, r3
 800ed24:	f7f6 fbac 	bl	8005480 <lwip_htons>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	461a      	mov	r2, r3
 800ed2c:	69fb      	ldr	r3, [r7, #28]
 800ed2e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ed30:	4b25      	ldr	r3, [pc, #148]	; (800edc8 <ip4_output_if_src+0x154>)
 800ed32:	881b      	ldrh	r3, [r3, #0]
 800ed34:	3301      	adds	r3, #1
 800ed36:	b29a      	uxth	r2, r3
 800ed38:	4b23      	ldr	r3, [pc, #140]	; (800edc8 <ip4_output_if_src+0x154>)
 800ed3a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d104      	bne.n	800ed4c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ed42:	4b22      	ldr	r3, [pc, #136]	; (800edcc <ip4_output_if_src+0x158>)
 800ed44:	681a      	ldr	r2, [r3, #0]
 800ed46:	69fb      	ldr	r3, [r7, #28]
 800ed48:	60da      	str	r2, [r3, #12]
 800ed4a:	e003      	b.n	800ed54 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	681a      	ldr	r2, [r3, #0]
 800ed50:	69fb      	ldr	r3, [r7, #28]
 800ed52:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ed54:	69fb      	ldr	r3, [r7, #28]
 800ed56:	2200      	movs	r2, #0
 800ed58:	729a      	strb	r2, [r3, #10]
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	72da      	strb	r2, [r3, #11]
 800ed5e:	e00f      	b.n	800ed80 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	895b      	ldrh	r3, [r3, #10]
 800ed64:	2b13      	cmp	r3, #19
 800ed66:	d802      	bhi.n	800ed6e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ed68:	f06f 0301 	mvn.w	r3, #1
 800ed6c:	e020      	b.n	800edb0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	685b      	ldr	r3, [r3, #4]
 800ed72:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ed74:	69fb      	ldr	r3, [r7, #28]
 800ed76:	691b      	ldr	r3, [r3, #16]
 800ed78:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800ed7a:	f107 0314 	add.w	r3, r7, #20
 800ed7e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ed80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d00c      	beq.n	800eda2 <ip4_output_if_src+0x12e>
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	891a      	ldrh	r2, [r3, #8]
 800ed8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d906      	bls.n	800eda2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800ed94:	687a      	ldr	r2, [r7, #4]
 800ed96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ed98:	68f8      	ldr	r0, [r7, #12]
 800ed9a:	f000 fd4d 	bl	800f838 <ip4_frag>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	e006      	b.n	800edb0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800eda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda4:	695b      	ldr	r3, [r3, #20]
 800eda6:	687a      	ldr	r2, [r7, #4]
 800eda8:	68f9      	ldr	r1, [r7, #12]
 800edaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800edac:	4798      	blx	r3
 800edae:	4603      	mov	r3, r0
}
 800edb0:	4618      	mov	r0, r3
 800edb2:	3720      	adds	r7, #32
 800edb4:	46bd      	mov	sp, r7
 800edb6:	bd80      	pop	{r7, pc}
 800edb8:	08013890 	.word	0x08013890
 800edbc:	080138c4 	.word	0x080138c4
 800edc0:	080138d0 	.word	0x080138d0
 800edc4:	080138f8 	.word	0x080138f8
 800edc8:	20000212 	.word	0x20000212
 800edcc:	08013cc4 	.word	0x08013cc4

0800edd0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800edd0:	b480      	push	{r7}
 800edd2:	b085      	sub	sp, #20
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
 800edd8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ede4:	d002      	beq.n	800edec <ip4_addr_isbroadcast_u32+0x1c>
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d101      	bne.n	800edf0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800edec:	2301      	movs	r3, #1
 800edee:	e02a      	b.n	800ee46 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800edf6:	f003 0302 	and.w	r3, r3, #2
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d101      	bne.n	800ee02 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800edfe:	2300      	movs	r3, #0
 800ee00:	e021      	b.n	800ee46 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	3304      	adds	r3, #4
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	687a      	ldr	r2, [r7, #4]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d101      	bne.n	800ee12 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	e019      	b.n	800ee46 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ee12:	68fa      	ldr	r2, [r7, #12]
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	3304      	adds	r3, #4
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	405a      	eors	r2, r3
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	3308      	adds	r3, #8
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	4013      	ands	r3, r2
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d10d      	bne.n	800ee44 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	3308      	adds	r3, #8
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	43da      	mvns	r2, r3
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	3308      	adds	r3, #8
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ee3c:	429a      	cmp	r2, r3
 800ee3e:	d101      	bne.n	800ee44 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800ee40:	2301      	movs	r3, #1
 800ee42:	e000      	b.n	800ee46 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800ee44:	2300      	movs	r3, #0
  }
}
 800ee46:	4618      	mov	r0, r3
 800ee48:	3714      	adds	r7, #20
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee50:	4770      	bx	lr
	...

0800ee54 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b084      	sub	sp, #16
 800ee58:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ee5e:	4b12      	ldr	r3, [pc, #72]	; (800eea8 <ip_reass_tmr+0x54>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800ee64:	e018      	b.n	800ee98 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	7fdb      	ldrb	r3, [r3, #31]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d00b      	beq.n	800ee86 <ip_reass_tmr+0x32>
      r->timer--;
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	7fdb      	ldrb	r3, [r3, #31]
 800ee72:	3b01      	subs	r3, #1
 800ee74:	b2da      	uxtb	r2, r3
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	60fb      	str	r3, [r7, #12]
 800ee84:	e008      	b.n	800ee98 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800ee90:	68b9      	ldr	r1, [r7, #8]
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f000 f80a 	bl	800eeac <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d1e3      	bne.n	800ee66 <ip_reass_tmr+0x12>
    }
  }
}
 800ee9e:	bf00      	nop
 800eea0:	bf00      	nop
 800eea2:	3710      	adds	r7, #16
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}
 800eea8:	20000214 	.word	0x20000214

0800eeac <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b088      	sub	sp, #32
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
 800eeb4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800eeba:	683a      	ldr	r2, [r7, #0]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	429a      	cmp	r2, r3
 800eec0:	d105      	bne.n	800eece <ip_reass_free_complete_datagram+0x22>
 800eec2:	4b45      	ldr	r3, [pc, #276]	; (800efd8 <ip_reass_free_complete_datagram+0x12c>)
 800eec4:	22ab      	movs	r2, #171	; 0xab
 800eec6:	4945      	ldr	r1, [pc, #276]	; (800efdc <ip_reass_free_complete_datagram+0x130>)
 800eec8:	4845      	ldr	r0, [pc, #276]	; (800efe0 <ip_reass_free_complete_datagram+0x134>)
 800eeca:	f000 ff33 	bl	800fd34 <iprintf>
  if (prev != NULL) {
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d00a      	beq.n	800eeea <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	687a      	ldr	r2, [r7, #4]
 800eeda:	429a      	cmp	r2, r3
 800eedc:	d005      	beq.n	800eeea <ip_reass_free_complete_datagram+0x3e>
 800eede:	4b3e      	ldr	r3, [pc, #248]	; (800efd8 <ip_reass_free_complete_datagram+0x12c>)
 800eee0:	22ad      	movs	r2, #173	; 0xad
 800eee2:	4940      	ldr	r1, [pc, #256]	; (800efe4 <ip_reass_free_complete_datagram+0x138>)
 800eee4:	483e      	ldr	r0, [pc, #248]	; (800efe0 <ip_reass_free_complete_datagram+0x134>)
 800eee6:	f000 ff25 	bl	800fd34 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	685b      	ldr	r3, [r3, #4]
 800eeee:	685b      	ldr	r3, [r3, #4]
 800eef0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	889b      	ldrh	r3, [r3, #4]
 800eef6:	b29b      	uxth	r3, r3
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d12a      	bne.n	800ef52 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	685b      	ldr	r3, [r3, #4]
 800ef00:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	681a      	ldr	r2, [r3, #0]
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800ef0a:	69bb      	ldr	r3, [r7, #24]
 800ef0c:	6858      	ldr	r0, [r3, #4]
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	3308      	adds	r3, #8
 800ef12:	2214      	movs	r2, #20
 800ef14:	4619      	mov	r1, r3
 800ef16:	f000 fedd 	bl	800fcd4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800ef1a:	2101      	movs	r1, #1
 800ef1c:	69b8      	ldr	r0, [r7, #24]
 800ef1e:	f7ff fc47 	bl	800e7b0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800ef22:	69b8      	ldr	r0, [r7, #24]
 800ef24:	f7f7 fde8 	bl	8006af8 <pbuf_clen>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ef2c:	8bfa      	ldrh	r2, [r7, #30]
 800ef2e:	8a7b      	ldrh	r3, [r7, #18]
 800ef30:	4413      	add	r3, r2
 800ef32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef36:	db05      	blt.n	800ef44 <ip_reass_free_complete_datagram+0x98>
 800ef38:	4b27      	ldr	r3, [pc, #156]	; (800efd8 <ip_reass_free_complete_datagram+0x12c>)
 800ef3a:	22bc      	movs	r2, #188	; 0xbc
 800ef3c:	492a      	ldr	r1, [pc, #168]	; (800efe8 <ip_reass_free_complete_datagram+0x13c>)
 800ef3e:	4828      	ldr	r0, [pc, #160]	; (800efe0 <ip_reass_free_complete_datagram+0x134>)
 800ef40:	f000 fef8 	bl	800fd34 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ef44:	8bfa      	ldrh	r2, [r7, #30]
 800ef46:	8a7b      	ldrh	r3, [r7, #18]
 800ef48:	4413      	add	r3, r2
 800ef4a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800ef4c:	69b8      	ldr	r0, [r7, #24]
 800ef4e:	f7f7 fd4b 	bl	80069e8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	685b      	ldr	r3, [r3, #4]
 800ef56:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800ef58:	e01f      	b.n	800ef9a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800ef5a:	69bb      	ldr	r3, [r7, #24]
 800ef5c:	685b      	ldr	r3, [r3, #4]
 800ef5e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800ef60:	69bb      	ldr	r3, [r7, #24]
 800ef62:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800ef6a:	68f8      	ldr	r0, [r7, #12]
 800ef6c:	f7f7 fdc4 	bl	8006af8 <pbuf_clen>
 800ef70:	4603      	mov	r3, r0
 800ef72:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ef74:	8bfa      	ldrh	r2, [r7, #30]
 800ef76:	8a7b      	ldrh	r3, [r7, #18]
 800ef78:	4413      	add	r3, r2
 800ef7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef7e:	db05      	blt.n	800ef8c <ip_reass_free_complete_datagram+0xe0>
 800ef80:	4b15      	ldr	r3, [pc, #84]	; (800efd8 <ip_reass_free_complete_datagram+0x12c>)
 800ef82:	22cc      	movs	r2, #204	; 0xcc
 800ef84:	4918      	ldr	r1, [pc, #96]	; (800efe8 <ip_reass_free_complete_datagram+0x13c>)
 800ef86:	4816      	ldr	r0, [pc, #88]	; (800efe0 <ip_reass_free_complete_datagram+0x134>)
 800ef88:	f000 fed4 	bl	800fd34 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ef8c:	8bfa      	ldrh	r2, [r7, #30]
 800ef8e:	8a7b      	ldrh	r3, [r7, #18]
 800ef90:	4413      	add	r3, r2
 800ef92:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ef94:	68f8      	ldr	r0, [r7, #12]
 800ef96:	f7f7 fd27 	bl	80069e8 <pbuf_free>
  while (p != NULL) {
 800ef9a:	69bb      	ldr	r3, [r7, #24]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d1dc      	bne.n	800ef5a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800efa0:	6839      	ldr	r1, [r7, #0]
 800efa2:	6878      	ldr	r0, [r7, #4]
 800efa4:	f000 f8c2 	bl	800f12c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800efa8:	4b10      	ldr	r3, [pc, #64]	; (800efec <ip_reass_free_complete_datagram+0x140>)
 800efaa:	881b      	ldrh	r3, [r3, #0]
 800efac:	8bfa      	ldrh	r2, [r7, #30]
 800efae:	429a      	cmp	r2, r3
 800efb0:	d905      	bls.n	800efbe <ip_reass_free_complete_datagram+0x112>
 800efb2:	4b09      	ldr	r3, [pc, #36]	; (800efd8 <ip_reass_free_complete_datagram+0x12c>)
 800efb4:	22d2      	movs	r2, #210	; 0xd2
 800efb6:	490e      	ldr	r1, [pc, #56]	; (800eff0 <ip_reass_free_complete_datagram+0x144>)
 800efb8:	4809      	ldr	r0, [pc, #36]	; (800efe0 <ip_reass_free_complete_datagram+0x134>)
 800efba:	f000 febb 	bl	800fd34 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800efbe:	4b0b      	ldr	r3, [pc, #44]	; (800efec <ip_reass_free_complete_datagram+0x140>)
 800efc0:	881a      	ldrh	r2, [r3, #0]
 800efc2:	8bfb      	ldrh	r3, [r7, #30]
 800efc4:	1ad3      	subs	r3, r2, r3
 800efc6:	b29a      	uxth	r2, r3
 800efc8:	4b08      	ldr	r3, [pc, #32]	; (800efec <ip_reass_free_complete_datagram+0x140>)
 800efca:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800efcc:	8bfb      	ldrh	r3, [r7, #30]
}
 800efce:	4618      	mov	r0, r3
 800efd0:	3720      	adds	r7, #32
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}
 800efd6:	bf00      	nop
 800efd8:	08013928 	.word	0x08013928
 800efdc:	08013964 	.word	0x08013964
 800efe0:	08013970 	.word	0x08013970
 800efe4:	08013998 	.word	0x08013998
 800efe8:	080139ac 	.word	0x080139ac
 800efec:	20000218 	.word	0x20000218
 800eff0:	080139cc 	.word	0x080139cc

0800eff4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b08a      	sub	sp, #40	; 0x28
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
 800effc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800effe:	2300      	movs	r3, #0
 800f000:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f002:	2300      	movs	r3, #0
 800f004:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f006:	2300      	movs	r3, #0
 800f008:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f00a:	2300      	movs	r3, #0
 800f00c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f00e:	2300      	movs	r3, #0
 800f010:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f012:	4b28      	ldr	r3, [pc, #160]	; (800f0b4 <ip_reass_remove_oldest_datagram+0xc0>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f018:	e030      	b.n	800f07c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01c:	695a      	ldr	r2, [r3, #20]
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	68db      	ldr	r3, [r3, #12]
 800f022:	429a      	cmp	r2, r3
 800f024:	d10c      	bne.n	800f040 <ip_reass_remove_oldest_datagram+0x4c>
 800f026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f028:	699a      	ldr	r2, [r3, #24]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	691b      	ldr	r3, [r3, #16]
 800f02e:	429a      	cmp	r2, r3
 800f030:	d106      	bne.n	800f040 <ip_reass_remove_oldest_datagram+0x4c>
 800f032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f034:	899a      	ldrh	r2, [r3, #12]
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	889b      	ldrh	r3, [r3, #4]
 800f03a:	b29b      	uxth	r3, r3
 800f03c:	429a      	cmp	r2, r3
 800f03e:	d014      	beq.n	800f06a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	3301      	adds	r3, #1
 800f044:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f046:	6a3b      	ldr	r3, [r7, #32]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d104      	bne.n	800f056 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f04e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f050:	69fb      	ldr	r3, [r7, #28]
 800f052:	61bb      	str	r3, [r7, #24]
 800f054:	e009      	b.n	800f06a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f058:	7fda      	ldrb	r2, [r3, #31]
 800f05a:	6a3b      	ldr	r3, [r7, #32]
 800f05c:	7fdb      	ldrb	r3, [r3, #31]
 800f05e:	429a      	cmp	r2, r3
 800f060:	d803      	bhi.n	800f06a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f064:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f066:	69fb      	ldr	r3, [r7, #28]
 800f068:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d001      	beq.n	800f076 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f074:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d1cb      	bne.n	800f01a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f082:	6a3b      	ldr	r3, [r7, #32]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d008      	beq.n	800f09a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f088:	69b9      	ldr	r1, [r7, #24]
 800f08a:	6a38      	ldr	r0, [r7, #32]
 800f08c:	f7ff ff0e 	bl	800eeac <ip_reass_free_complete_datagram>
 800f090:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f092:	697a      	ldr	r2, [r7, #20]
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	4413      	add	r3, r2
 800f098:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f09a:	697a      	ldr	r2, [r7, #20]
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	da02      	bge.n	800f0a8 <ip_reass_remove_oldest_datagram+0xb4>
 800f0a2:	693b      	ldr	r3, [r7, #16]
 800f0a4:	2b01      	cmp	r3, #1
 800f0a6:	dcac      	bgt.n	800f002 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f0a8:	697b      	ldr	r3, [r7, #20]
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	3728      	adds	r7, #40	; 0x28
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}
 800f0b2:	bf00      	nop
 800f0b4:	20000214 	.word	0x20000214

0800f0b8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b084      	sub	sp, #16
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
 800f0c0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f0c2:	2004      	movs	r0, #4
 800f0c4:	f7f6 fe32 	bl	8005d2c <memp_malloc>
 800f0c8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d110      	bne.n	800f0f2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f0d0:	6839      	ldr	r1, [r7, #0]
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f7ff ff8e 	bl	800eff4 <ip_reass_remove_oldest_datagram>
 800f0d8:	4602      	mov	r2, r0
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	4293      	cmp	r3, r2
 800f0de:	dc03      	bgt.n	800f0e8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f0e0:	2004      	movs	r0, #4
 800f0e2:	f7f6 fe23 	bl	8005d2c <memp_malloc>
 800f0e6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d101      	bne.n	800f0f2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	e016      	b.n	800f120 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f0f2:	2220      	movs	r2, #32
 800f0f4:	2100      	movs	r1, #0
 800f0f6:	68f8      	ldr	r0, [r7, #12]
 800f0f8:	f000 fe14 	bl	800fd24 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	220f      	movs	r2, #15
 800f100:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f102:	4b09      	ldr	r3, [pc, #36]	; (800f128 <ip_reass_enqueue_new_datagram+0x70>)
 800f104:	681a      	ldr	r2, [r3, #0]
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f10a:	4a07      	ldr	r2, [pc, #28]	; (800f128 <ip_reass_enqueue_new_datagram+0x70>)
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	3308      	adds	r3, #8
 800f114:	2214      	movs	r2, #20
 800f116:	6879      	ldr	r1, [r7, #4]
 800f118:	4618      	mov	r0, r3
 800f11a:	f000 fddb 	bl	800fcd4 <memcpy>
  return ipr;
 800f11e:	68fb      	ldr	r3, [r7, #12]
}
 800f120:	4618      	mov	r0, r3
 800f122:	3710      	adds	r7, #16
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}
 800f128:	20000214 	.word	0x20000214

0800f12c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b082      	sub	sp, #8
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
 800f134:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f136:	4b10      	ldr	r3, [pc, #64]	; (800f178 <ip_reass_dequeue_datagram+0x4c>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	687a      	ldr	r2, [r7, #4]
 800f13c:	429a      	cmp	r2, r3
 800f13e:	d104      	bne.n	800f14a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	4a0c      	ldr	r2, [pc, #48]	; (800f178 <ip_reass_dequeue_datagram+0x4c>)
 800f146:	6013      	str	r3, [r2, #0]
 800f148:	e00d      	b.n	800f166 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d106      	bne.n	800f15e <ip_reass_dequeue_datagram+0x32>
 800f150:	4b0a      	ldr	r3, [pc, #40]	; (800f17c <ip_reass_dequeue_datagram+0x50>)
 800f152:	f240 1245 	movw	r2, #325	; 0x145
 800f156:	490a      	ldr	r1, [pc, #40]	; (800f180 <ip_reass_dequeue_datagram+0x54>)
 800f158:	480a      	ldr	r0, [pc, #40]	; (800f184 <ip_reass_dequeue_datagram+0x58>)
 800f15a:	f000 fdeb 	bl	800fd34 <iprintf>
    prev->next = ipr->next;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681a      	ldr	r2, [r3, #0]
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f166:	6879      	ldr	r1, [r7, #4]
 800f168:	2004      	movs	r0, #4
 800f16a:	f7f6 fe2b 	bl	8005dc4 <memp_free>
}
 800f16e:	bf00      	nop
 800f170:	3708      	adds	r7, #8
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}
 800f176:	bf00      	nop
 800f178:	20000214 	.word	0x20000214
 800f17c:	08013928 	.word	0x08013928
 800f180:	080139f0 	.word	0x080139f0
 800f184:	08013970 	.word	0x08013970

0800f188 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b08c      	sub	sp, #48	; 0x30
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	60f8      	str	r0, [r7, #12]
 800f190:	60b9      	str	r1, [r7, #8]
 800f192:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f194:	2300      	movs	r3, #0
 800f196:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f198:	2301      	movs	r3, #1
 800f19a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	685b      	ldr	r3, [r3, #4]
 800f1a0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f1a2:	69fb      	ldr	r3, [r7, #28]
 800f1a4:	885b      	ldrh	r3, [r3, #2]
 800f1a6:	b29b      	uxth	r3, r3
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f7f6 f969 	bl	8005480 <lwip_htons>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f1b2:	69fb      	ldr	r3, [r7, #28]
 800f1b4:	781b      	ldrb	r3, [r3, #0]
 800f1b6:	f003 030f 	and.w	r3, r3, #15
 800f1ba:	b2db      	uxtb	r3, r3
 800f1bc:	009b      	lsls	r3, r3, #2
 800f1be:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f1c0:	7e7b      	ldrb	r3, [r7, #25]
 800f1c2:	b29b      	uxth	r3, r3
 800f1c4:	8b7a      	ldrh	r2, [r7, #26]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d202      	bcs.n	800f1d0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f1ca:	f04f 33ff 	mov.w	r3, #4294967295
 800f1ce:	e135      	b.n	800f43c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f1d0:	7e7b      	ldrb	r3, [r7, #25]
 800f1d2:	b29b      	uxth	r3, r3
 800f1d4:	8b7a      	ldrh	r2, [r7, #26]
 800f1d6:	1ad3      	subs	r3, r2, r3
 800f1d8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f1da:	69fb      	ldr	r3, [r7, #28]
 800f1dc:	88db      	ldrh	r3, [r3, #6]
 800f1de:	b29b      	uxth	r3, r3
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f7f6 f94d 	bl	8005480 <lwip_htons>
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f1ec:	b29b      	uxth	r3, r3
 800f1ee:	00db      	lsls	r3, r3, #3
 800f1f0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	685b      	ldr	r3, [r3, #4]
 800f1f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	701a      	strb	r2, [r3, #0]
 800f1fe:	2200      	movs	r2, #0
 800f200:	705a      	strb	r2, [r3, #1]
 800f202:	2200      	movs	r2, #0
 800f204:	709a      	strb	r2, [r3, #2]
 800f206:	2200      	movs	r2, #0
 800f208:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f20c:	8afa      	ldrh	r2, [r7, #22]
 800f20e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f210:	8afa      	ldrh	r2, [r7, #22]
 800f212:	8b7b      	ldrh	r3, [r7, #26]
 800f214:	4413      	add	r3, r2
 800f216:	b29a      	uxth	r2, r3
 800f218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f21a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f21e:	88db      	ldrh	r3, [r3, #6]
 800f220:	b29b      	uxth	r3, r3
 800f222:	8afa      	ldrh	r2, [r7, #22]
 800f224:	429a      	cmp	r2, r3
 800f226:	d902      	bls.n	800f22e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f228:	f04f 33ff 	mov.w	r3, #4294967295
 800f22c:	e106      	b.n	800f43c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	685b      	ldr	r3, [r3, #4]
 800f232:	627b      	str	r3, [r7, #36]	; 0x24
 800f234:	e068      	b.n	800f308 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f238:	685b      	ldr	r3, [r3, #4]
 800f23a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f23e:	889b      	ldrh	r3, [r3, #4]
 800f240:	b29a      	uxth	r2, r3
 800f242:	693b      	ldr	r3, [r7, #16]
 800f244:	889b      	ldrh	r3, [r3, #4]
 800f246:	b29b      	uxth	r3, r3
 800f248:	429a      	cmp	r2, r3
 800f24a:	d235      	bcs.n	800f2b8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f24e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f250:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f254:	2b00      	cmp	r3, #0
 800f256:	d020      	beq.n	800f29a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f25a:	889b      	ldrh	r3, [r3, #4]
 800f25c:	b29a      	uxth	r2, r3
 800f25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f260:	88db      	ldrh	r3, [r3, #6]
 800f262:	b29b      	uxth	r3, r3
 800f264:	429a      	cmp	r2, r3
 800f266:	d307      	bcc.n	800f278 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26a:	88db      	ldrh	r3, [r3, #6]
 800f26c:	b29a      	uxth	r2, r3
 800f26e:	693b      	ldr	r3, [r7, #16]
 800f270:	889b      	ldrh	r3, [r3, #4]
 800f272:	b29b      	uxth	r3, r3
 800f274:	429a      	cmp	r2, r3
 800f276:	d902      	bls.n	800f27e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f278:	f04f 33ff 	mov.w	r3, #4294967295
 800f27c:	e0de      	b.n	800f43c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f280:	68ba      	ldr	r2, [r7, #8]
 800f282:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f286:	88db      	ldrh	r3, [r3, #6]
 800f288:	b29a      	uxth	r2, r3
 800f28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f28c:	889b      	ldrh	r3, [r3, #4]
 800f28e:	b29b      	uxth	r3, r3
 800f290:	429a      	cmp	r2, r3
 800f292:	d03d      	beq.n	800f310 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f294:	2300      	movs	r3, #0
 800f296:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f298:	e03a      	b.n	800f310 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f29c:	88db      	ldrh	r3, [r3, #6]
 800f29e:	b29a      	uxth	r2, r3
 800f2a0:	693b      	ldr	r3, [r7, #16]
 800f2a2:	889b      	ldrh	r3, [r3, #4]
 800f2a4:	b29b      	uxth	r3, r3
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d902      	bls.n	800f2b0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f2aa:	f04f 33ff 	mov.w	r3, #4294967295
 800f2ae:	e0c5      	b.n	800f43c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	68ba      	ldr	r2, [r7, #8]
 800f2b4:	605a      	str	r2, [r3, #4]
      break;
 800f2b6:	e02b      	b.n	800f310 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ba:	889b      	ldrh	r3, [r3, #4]
 800f2bc:	b29a      	uxth	r2, r3
 800f2be:	693b      	ldr	r3, [r7, #16]
 800f2c0:	889b      	ldrh	r3, [r3, #4]
 800f2c2:	b29b      	uxth	r3, r3
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d102      	bne.n	800f2ce <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f2c8:	f04f 33ff 	mov.w	r3, #4294967295
 800f2cc:	e0b6      	b.n	800f43c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d0:	889b      	ldrh	r3, [r3, #4]
 800f2d2:	b29a      	uxth	r2, r3
 800f2d4:	693b      	ldr	r3, [r7, #16]
 800f2d6:	88db      	ldrh	r3, [r3, #6]
 800f2d8:	b29b      	uxth	r3, r3
 800f2da:	429a      	cmp	r2, r3
 800f2dc:	d202      	bcs.n	800f2e4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f2de:	f04f 33ff 	mov.w	r3, #4294967295
 800f2e2:	e0ab      	b.n	800f43c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d009      	beq.n	800f2fe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ec:	88db      	ldrh	r3, [r3, #6]
 800f2ee:	b29a      	uxth	r2, r3
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	889b      	ldrh	r3, [r3, #4]
 800f2f4:	b29b      	uxth	r3, r3
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	d001      	beq.n	800f2fe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f2fe:	693b      	ldr	r3, [r7, #16]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f304:	693b      	ldr	r3, [r7, #16]
 800f306:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d193      	bne.n	800f236 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f30e:	e000      	b.n	800f312 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f310:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f314:	2b00      	cmp	r3, #0
 800f316:	d12d      	bne.n	800f374 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d01c      	beq.n	800f358 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f320:	88db      	ldrh	r3, [r3, #6]
 800f322:	b29a      	uxth	r2, r3
 800f324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f326:	889b      	ldrh	r3, [r3, #4]
 800f328:	b29b      	uxth	r3, r3
 800f32a:	429a      	cmp	r2, r3
 800f32c:	d906      	bls.n	800f33c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f32e:	4b45      	ldr	r3, [pc, #276]	; (800f444 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f330:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800f334:	4944      	ldr	r1, [pc, #272]	; (800f448 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f336:	4845      	ldr	r0, [pc, #276]	; (800f44c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f338:	f000 fcfc 	bl	800fd34 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f33e:	68ba      	ldr	r2, [r7, #8]
 800f340:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f344:	88db      	ldrh	r3, [r3, #6]
 800f346:	b29a      	uxth	r2, r3
 800f348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f34a:	889b      	ldrh	r3, [r3, #4]
 800f34c:	b29b      	uxth	r3, r3
 800f34e:	429a      	cmp	r2, r3
 800f350:	d010      	beq.n	800f374 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f352:	2300      	movs	r3, #0
 800f354:	623b      	str	r3, [r7, #32]
 800f356:	e00d      	b.n	800f374 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	685b      	ldr	r3, [r3, #4]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d006      	beq.n	800f36e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f360:	4b38      	ldr	r3, [pc, #224]	; (800f444 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f362:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800f366:	493a      	ldr	r1, [pc, #232]	; (800f450 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f368:	4838      	ldr	r0, [pc, #224]	; (800f44c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f36a:	f000 fce3 	bl	800fd34 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	68ba      	ldr	r2, [r7, #8]
 800f372:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d105      	bne.n	800f386 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	7f9b      	ldrb	r3, [r3, #30]
 800f37e:	f003 0301 	and.w	r3, r3, #1
 800f382:	2b00      	cmp	r3, #0
 800f384:	d059      	beq.n	800f43a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f386:	6a3b      	ldr	r3, [r7, #32]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d04f      	beq.n	800f42c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d006      	beq.n	800f3a2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	685b      	ldr	r3, [r3, #4]
 800f398:	685b      	ldr	r3, [r3, #4]
 800f39a:	889b      	ldrh	r3, [r3, #4]
 800f39c:	b29b      	uxth	r3, r3
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d002      	beq.n	800f3a8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	623b      	str	r3, [r7, #32]
 800f3a6:	e041      	b.n	800f42c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3aa:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f3b2:	e012      	b.n	800f3da <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b6:	685b      	ldr	r3, [r3, #4]
 800f3b8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3bc:	88db      	ldrh	r3, [r3, #6]
 800f3be:	b29a      	uxth	r2, r3
 800f3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c2:	889b      	ldrh	r3, [r3, #4]
 800f3c4:	b29b      	uxth	r3, r3
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d002      	beq.n	800f3d0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	623b      	str	r3, [r7, #32]
            break;
 800f3ce:	e007      	b.n	800f3e0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3d2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d1e9      	bne.n	800f3b4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f3e0:	6a3b      	ldr	r3, [r7, #32]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d022      	beq.n	800f42c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	685b      	ldr	r3, [r3, #4]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d106      	bne.n	800f3fc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f3ee:	4b15      	ldr	r3, [pc, #84]	; (800f444 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f3f0:	f240 12df 	movw	r2, #479	; 0x1df
 800f3f4:	4917      	ldr	r1, [pc, #92]	; (800f454 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f3f6:	4815      	ldr	r0, [pc, #84]	; (800f44c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f3f8:	f000 fc9c 	bl	800fd34 <iprintf>
          LWIP_ASSERT("sanity check",
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	685b      	ldr	r3, [r3, #4]
 800f400:	685b      	ldr	r3, [r3, #4]
 800f402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f404:	429a      	cmp	r2, r3
 800f406:	d106      	bne.n	800f416 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f408:	4b0e      	ldr	r3, [pc, #56]	; (800f444 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f40a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f40e:	4911      	ldr	r1, [pc, #68]	; (800f454 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f410:	480e      	ldr	r0, [pc, #56]	; (800f44c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f412:	f000 fc8f 	bl	800fd34 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d006      	beq.n	800f42c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f41e:	4b09      	ldr	r3, [pc, #36]	; (800f444 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f420:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800f424:	490c      	ldr	r1, [pc, #48]	; (800f458 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f426:	4809      	ldr	r0, [pc, #36]	; (800f44c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f428:	f000 fc84 	bl	800fd34 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f42c:	6a3b      	ldr	r3, [r7, #32]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	bf14      	ite	ne
 800f432:	2301      	movne	r3, #1
 800f434:	2300      	moveq	r3, #0
 800f436:	b2db      	uxtb	r3, r3
 800f438:	e000      	b.n	800f43c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f43a:	2300      	movs	r3, #0
}
 800f43c:	4618      	mov	r0, r3
 800f43e:	3730      	adds	r7, #48	; 0x30
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}
 800f444:	08013928 	.word	0x08013928
 800f448:	08013a0c 	.word	0x08013a0c
 800f44c:	08013970 	.word	0x08013970
 800f450:	08013a2c 	.word	0x08013a2c
 800f454:	08013a64 	.word	0x08013a64
 800f458:	08013a74 	.word	0x08013a74

0800f45c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b08e      	sub	sp, #56	; 0x38
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	685b      	ldr	r3, [r3, #4]
 800f468:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f46c:	781b      	ldrb	r3, [r3, #0]
 800f46e:	f003 030f 	and.w	r3, r3, #15
 800f472:	b2db      	uxtb	r3, r3
 800f474:	009b      	lsls	r3, r3, #2
 800f476:	b2db      	uxtb	r3, r3
 800f478:	2b14      	cmp	r3, #20
 800f47a:	f040 8167 	bne.w	800f74c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f480:	88db      	ldrh	r3, [r3, #6]
 800f482:	b29b      	uxth	r3, r3
 800f484:	4618      	mov	r0, r3
 800f486:	f7f5 fffb 	bl	8005480 <lwip_htons>
 800f48a:	4603      	mov	r3, r0
 800f48c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f490:	b29b      	uxth	r3, r3
 800f492:	00db      	lsls	r3, r3, #3
 800f494:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f498:	885b      	ldrh	r3, [r3, #2]
 800f49a:	b29b      	uxth	r3, r3
 800f49c:	4618      	mov	r0, r3
 800f49e:	f7f5 ffef 	bl	8005480 <lwip_htons>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a8:	781b      	ldrb	r3, [r3, #0]
 800f4aa:	f003 030f 	and.w	r3, r3, #15
 800f4ae:	b2db      	uxtb	r3, r3
 800f4b0:	009b      	lsls	r3, r3, #2
 800f4b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800f4b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f4ba:	b29b      	uxth	r3, r3
 800f4bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f4be:	429a      	cmp	r2, r3
 800f4c0:	f0c0 8146 	bcc.w	800f750 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f4c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f4c8:	b29b      	uxth	r3, r3
 800f4ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f4cc:	1ad3      	subs	r3, r2, r3
 800f4ce:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f7f7 fb11 	bl	8006af8 <pbuf_clen>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f4da:	4b9f      	ldr	r3, [pc, #636]	; (800f758 <ip4_reass+0x2fc>)
 800f4dc:	881b      	ldrh	r3, [r3, #0]
 800f4de:	461a      	mov	r2, r3
 800f4e0:	8c3b      	ldrh	r3, [r7, #32]
 800f4e2:	4413      	add	r3, r2
 800f4e4:	2b0a      	cmp	r3, #10
 800f4e6:	dd10      	ble.n	800f50a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f4e8:	8c3b      	ldrh	r3, [r7, #32]
 800f4ea:	4619      	mov	r1, r3
 800f4ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4ee:	f7ff fd81 	bl	800eff4 <ip_reass_remove_oldest_datagram>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	f000 812d 	beq.w	800f754 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f4fa:	4b97      	ldr	r3, [pc, #604]	; (800f758 <ip4_reass+0x2fc>)
 800f4fc:	881b      	ldrh	r3, [r3, #0]
 800f4fe:	461a      	mov	r2, r3
 800f500:	8c3b      	ldrh	r3, [r7, #32]
 800f502:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f504:	2b0a      	cmp	r3, #10
 800f506:	f300 8125 	bgt.w	800f754 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f50a:	4b94      	ldr	r3, [pc, #592]	; (800f75c <ip4_reass+0x300>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	633b      	str	r3, [r7, #48]	; 0x30
 800f510:	e015      	b.n	800f53e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f514:	695a      	ldr	r2, [r3, #20]
 800f516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f518:	68db      	ldr	r3, [r3, #12]
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d10c      	bne.n	800f538 <ip4_reass+0xdc>
 800f51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f520:	699a      	ldr	r2, [r3, #24]
 800f522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f524:	691b      	ldr	r3, [r3, #16]
 800f526:	429a      	cmp	r2, r3
 800f528:	d106      	bne.n	800f538 <ip4_reass+0xdc>
 800f52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f52c:	899a      	ldrh	r2, [r3, #12]
 800f52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f530:	889b      	ldrh	r3, [r3, #4]
 800f532:	b29b      	uxth	r3, r3
 800f534:	429a      	cmp	r2, r3
 800f536:	d006      	beq.n	800f546 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	633b      	str	r3, [r7, #48]	; 0x30
 800f53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f540:	2b00      	cmp	r3, #0
 800f542:	d1e6      	bne.n	800f512 <ip4_reass+0xb6>
 800f544:	e000      	b.n	800f548 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f546:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d109      	bne.n	800f562 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f54e:	8c3b      	ldrh	r3, [r7, #32]
 800f550:	4619      	mov	r1, r3
 800f552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f554:	f7ff fdb0 	bl	800f0b8 <ip_reass_enqueue_new_datagram>
 800f558:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d11c      	bne.n	800f59a <ip4_reass+0x13e>
      goto nullreturn;
 800f560:	e109      	b.n	800f776 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f564:	88db      	ldrh	r3, [r3, #6]
 800f566:	b29b      	uxth	r3, r3
 800f568:	4618      	mov	r0, r3
 800f56a:	f7f5 ff89 	bl	8005480 <lwip_htons>
 800f56e:	4603      	mov	r3, r0
 800f570:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f574:	2b00      	cmp	r3, #0
 800f576:	d110      	bne.n	800f59a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f57a:	89db      	ldrh	r3, [r3, #14]
 800f57c:	4618      	mov	r0, r3
 800f57e:	f7f5 ff7f 	bl	8005480 <lwip_htons>
 800f582:	4603      	mov	r3, r0
 800f584:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d006      	beq.n	800f59a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f58e:	3308      	adds	r3, #8
 800f590:	2214      	movs	r2, #20
 800f592:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f594:	4618      	mov	r0, r3
 800f596:	f000 fb9d 	bl	800fcd4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f59c:	88db      	ldrh	r3, [r3, #6]
 800f59e:	b29b      	uxth	r3, r3
 800f5a0:	f003 0320 	and.w	r3, r3, #32
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	bf0c      	ite	eq
 800f5a8:	2301      	moveq	r3, #1
 800f5aa:	2300      	movne	r3, #0
 800f5ac:	b2db      	uxtb	r3, r3
 800f5ae:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f5b0:	69fb      	ldr	r3, [r7, #28]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d00e      	beq.n	800f5d4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f5b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f5b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5ba:	4413      	add	r3, r2
 800f5bc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f5be:	8b7a      	ldrh	r2, [r7, #26]
 800f5c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	f0c0 80a0 	bcc.w	800f708 <ip4_reass+0x2ac>
 800f5c8:	8b7b      	ldrh	r3, [r7, #26]
 800f5ca:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f5ce:	4293      	cmp	r3, r2
 800f5d0:	f200 809a 	bhi.w	800f708 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f5d4:	69fa      	ldr	r2, [r7, #28]
 800f5d6:	6879      	ldr	r1, [r7, #4]
 800f5d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f5da:	f7ff fdd5 	bl	800f188 <ip_reass_chain_frag_into_datagram_and_validate>
 800f5de:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5e6:	f000 8091 	beq.w	800f70c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f5ea:	4b5b      	ldr	r3, [pc, #364]	; (800f758 <ip4_reass+0x2fc>)
 800f5ec:	881a      	ldrh	r2, [r3, #0]
 800f5ee:	8c3b      	ldrh	r3, [r7, #32]
 800f5f0:	4413      	add	r3, r2
 800f5f2:	b29a      	uxth	r2, r3
 800f5f4:	4b58      	ldr	r3, [pc, #352]	; (800f758 <ip4_reass+0x2fc>)
 800f5f6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f5f8:	69fb      	ldr	r3, [r7, #28]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d00d      	beq.n	800f61a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f5fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f600:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f602:	4413      	add	r3, r2
 800f604:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f608:	8a7a      	ldrh	r2, [r7, #18]
 800f60a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f60e:	7f9b      	ldrb	r3, [r3, #30]
 800f610:	f043 0301 	orr.w	r3, r3, #1
 800f614:	b2da      	uxtb	r2, r3
 800f616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f618:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	d171      	bne.n	800f704 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f622:	8b9b      	ldrh	r3, [r3, #28]
 800f624:	3314      	adds	r3, #20
 800f626:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f62a:	685b      	ldr	r3, [r3, #4]
 800f62c:	685b      	ldr	r3, [r3, #4]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f634:	685b      	ldr	r3, [r3, #4]
 800f636:	685b      	ldr	r3, [r3, #4]
 800f638:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f63c:	3308      	adds	r3, #8
 800f63e:	2214      	movs	r2, #20
 800f640:	4619      	mov	r1, r3
 800f642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f644:	f000 fb46 	bl	800fcd4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f648:	8a3b      	ldrh	r3, [r7, #16]
 800f64a:	4618      	mov	r0, r3
 800f64c:	f7f5 ff18 	bl	8005480 <lwip_htons>
 800f650:	4603      	mov	r3, r0
 800f652:	461a      	mov	r2, r3
 800f654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f656:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f65a:	2200      	movs	r2, #0
 800f65c:	719a      	strb	r2, [r3, #6]
 800f65e:	2200      	movs	r2, #0
 800f660:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f664:	2200      	movs	r2, #0
 800f666:	729a      	strb	r2, [r3, #10]
 800f668:	2200      	movs	r2, #0
 800f66a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f66e:	685b      	ldr	r3, [r3, #4]
 800f670:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f672:	e00d      	b.n	800f690 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f676:	685b      	ldr	r3, [r3, #4]
 800f678:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f67a:	2114      	movs	r1, #20
 800f67c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f67e:	f7f7 f92d 	bl	80068dc <pbuf_remove_header>
      pbuf_cat(p, r);
 800f682:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f684:	6878      	ldr	r0, [r7, #4]
 800f686:	f7f7 fa71 	bl	8006b6c <pbuf_cat>
      r = iprh->next_pbuf;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800f690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f692:	2b00      	cmp	r3, #0
 800f694:	d1ee      	bne.n	800f674 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f696:	4b31      	ldr	r3, [pc, #196]	; (800f75c <ip4_reass+0x300>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d102      	bne.n	800f6a6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f6a4:	e010      	b.n	800f6c8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f6a6:	4b2d      	ldr	r3, [pc, #180]	; (800f75c <ip4_reass+0x300>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f6ac:	e007      	b.n	800f6be <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6b4:	429a      	cmp	r2, r3
 800f6b6:	d006      	beq.n	800f6c6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d1f4      	bne.n	800f6ae <ip4_reass+0x252>
 800f6c4:	e000      	b.n	800f6c8 <ip4_reass+0x26c>
          break;
 800f6c6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f6c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f6ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f6cc:	f7ff fd2e 	bl	800f12c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f6d0:	6878      	ldr	r0, [r7, #4]
 800f6d2:	f7f7 fa11 	bl	8006af8 <pbuf_clen>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f6da:	4b1f      	ldr	r3, [pc, #124]	; (800f758 <ip4_reass+0x2fc>)
 800f6dc:	881b      	ldrh	r3, [r3, #0]
 800f6de:	8c3a      	ldrh	r2, [r7, #32]
 800f6e0:	429a      	cmp	r2, r3
 800f6e2:	d906      	bls.n	800f6f2 <ip4_reass+0x296>
 800f6e4:	4b1e      	ldr	r3, [pc, #120]	; (800f760 <ip4_reass+0x304>)
 800f6e6:	f240 229b 	movw	r2, #667	; 0x29b
 800f6ea:	491e      	ldr	r1, [pc, #120]	; (800f764 <ip4_reass+0x308>)
 800f6ec:	481e      	ldr	r0, [pc, #120]	; (800f768 <ip4_reass+0x30c>)
 800f6ee:	f000 fb21 	bl	800fd34 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f6f2:	4b19      	ldr	r3, [pc, #100]	; (800f758 <ip4_reass+0x2fc>)
 800f6f4:	881a      	ldrh	r2, [r3, #0]
 800f6f6:	8c3b      	ldrh	r3, [r7, #32]
 800f6f8:	1ad3      	subs	r3, r2, r3
 800f6fa:	b29a      	uxth	r2, r3
 800f6fc:	4b16      	ldr	r3, [pc, #88]	; (800f758 <ip4_reass+0x2fc>)
 800f6fe:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	e03c      	b.n	800f77e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f704:	2300      	movs	r3, #0
 800f706:	e03a      	b.n	800f77e <ip4_reass+0x322>
      goto nullreturn_ipr;
 800f708:	bf00      	nop
 800f70a:	e000      	b.n	800f70e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800f70c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f710:	2b00      	cmp	r3, #0
 800f712:	d106      	bne.n	800f722 <ip4_reass+0x2c6>
 800f714:	4b12      	ldr	r3, [pc, #72]	; (800f760 <ip4_reass+0x304>)
 800f716:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800f71a:	4914      	ldr	r1, [pc, #80]	; (800f76c <ip4_reass+0x310>)
 800f71c:	4812      	ldr	r0, [pc, #72]	; (800f768 <ip4_reass+0x30c>)
 800f71e:	f000 fb09 	bl	800fd34 <iprintf>
  if (ipr->p == NULL) {
 800f722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f724:	685b      	ldr	r3, [r3, #4]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d124      	bne.n	800f774 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f72a:	4b0c      	ldr	r3, [pc, #48]	; (800f75c <ip4_reass+0x300>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f730:	429a      	cmp	r2, r3
 800f732:	d006      	beq.n	800f742 <ip4_reass+0x2e6>
 800f734:	4b0a      	ldr	r3, [pc, #40]	; (800f760 <ip4_reass+0x304>)
 800f736:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f73a:	490d      	ldr	r1, [pc, #52]	; (800f770 <ip4_reass+0x314>)
 800f73c:	480a      	ldr	r0, [pc, #40]	; (800f768 <ip4_reass+0x30c>)
 800f73e:	f000 faf9 	bl	800fd34 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f742:	2100      	movs	r1, #0
 800f744:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f746:	f7ff fcf1 	bl	800f12c <ip_reass_dequeue_datagram>
 800f74a:	e014      	b.n	800f776 <ip4_reass+0x31a>
    goto nullreturn;
 800f74c:	bf00      	nop
 800f74e:	e012      	b.n	800f776 <ip4_reass+0x31a>
    goto nullreturn;
 800f750:	bf00      	nop
 800f752:	e010      	b.n	800f776 <ip4_reass+0x31a>
      goto nullreturn;
 800f754:	bf00      	nop
 800f756:	e00e      	b.n	800f776 <ip4_reass+0x31a>
 800f758:	20000218 	.word	0x20000218
 800f75c:	20000214 	.word	0x20000214
 800f760:	08013928 	.word	0x08013928
 800f764:	08013a98 	.word	0x08013a98
 800f768:	08013970 	.word	0x08013970
 800f76c:	08013ab4 	.word	0x08013ab4
 800f770:	08013ac0 	.word	0x08013ac0
  }

nullreturn:
 800f774:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	f7f7 f936 	bl	80069e8 <pbuf_free>
  return NULL;
 800f77c:	2300      	movs	r3, #0
}
 800f77e:	4618      	mov	r0, r3
 800f780:	3738      	adds	r7, #56	; 0x38
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop

0800f788 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f78c:	2005      	movs	r0, #5
 800f78e:	f7f6 facd 	bl	8005d2c <memp_malloc>
 800f792:	4603      	mov	r3, r0
}
 800f794:	4618      	mov	r0, r3
 800f796:	bd80      	pop	{r7, pc}

0800f798 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b082      	sub	sp, #8
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d106      	bne.n	800f7b4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800f7a6:	4b07      	ldr	r3, [pc, #28]	; (800f7c4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f7a8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800f7ac:	4906      	ldr	r1, [pc, #24]	; (800f7c8 <ip_frag_free_pbuf_custom_ref+0x30>)
 800f7ae:	4807      	ldr	r0, [pc, #28]	; (800f7cc <ip_frag_free_pbuf_custom_ref+0x34>)
 800f7b0:	f000 fac0 	bl	800fd34 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f7b4:	6879      	ldr	r1, [r7, #4]
 800f7b6:	2005      	movs	r0, #5
 800f7b8:	f7f6 fb04 	bl	8005dc4 <memp_free>
}
 800f7bc:	bf00      	nop
 800f7be:	3708      	adds	r7, #8
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}
 800f7c4:	08013928 	.word	0x08013928
 800f7c8:	08013ae0 	.word	0x08013ae0
 800f7cc:	08013970 	.word	0x08013970

0800f7d0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b084      	sub	sp, #16
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d106      	bne.n	800f7f0 <ipfrag_free_pbuf_custom+0x20>
 800f7e2:	4b11      	ldr	r3, [pc, #68]	; (800f828 <ipfrag_free_pbuf_custom+0x58>)
 800f7e4:	f240 22ce 	movw	r2, #718	; 0x2ce
 800f7e8:	4910      	ldr	r1, [pc, #64]	; (800f82c <ipfrag_free_pbuf_custom+0x5c>)
 800f7ea:	4811      	ldr	r0, [pc, #68]	; (800f830 <ipfrag_free_pbuf_custom+0x60>)
 800f7ec:	f000 faa2 	bl	800fd34 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f7f0:	68fa      	ldr	r2, [r7, #12]
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d006      	beq.n	800f806 <ipfrag_free_pbuf_custom+0x36>
 800f7f8:	4b0b      	ldr	r3, [pc, #44]	; (800f828 <ipfrag_free_pbuf_custom+0x58>)
 800f7fa:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f7fe:	490d      	ldr	r1, [pc, #52]	; (800f834 <ipfrag_free_pbuf_custom+0x64>)
 800f800:	480b      	ldr	r0, [pc, #44]	; (800f830 <ipfrag_free_pbuf_custom+0x60>)
 800f802:	f000 fa97 	bl	800fd34 <iprintf>
  if (pcr->original != NULL) {
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	695b      	ldr	r3, [r3, #20]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d004      	beq.n	800f818 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	695b      	ldr	r3, [r3, #20]
 800f812:	4618      	mov	r0, r3
 800f814:	f7f7 f8e8 	bl	80069e8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f818:	68f8      	ldr	r0, [r7, #12]
 800f81a:	f7ff ffbd 	bl	800f798 <ip_frag_free_pbuf_custom_ref>
}
 800f81e:	bf00      	nop
 800f820:	3710      	adds	r7, #16
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}
 800f826:	bf00      	nop
 800f828:	08013928 	.word	0x08013928
 800f82c:	08013aec 	.word	0x08013aec
 800f830:	08013970 	.word	0x08013970
 800f834:	08013af8 	.word	0x08013af8

0800f838 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b094      	sub	sp, #80	; 0x50
 800f83c:	af02      	add	r7, sp, #8
 800f83e:	60f8      	str	r0, [r7, #12]
 800f840:	60b9      	str	r1, [r7, #8]
 800f842:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f844:	2300      	movs	r3, #0
 800f846:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f84e:	3b14      	subs	r3, #20
 800f850:	2b00      	cmp	r3, #0
 800f852:	da00      	bge.n	800f856 <ip4_frag+0x1e>
 800f854:	3307      	adds	r3, #7
 800f856:	10db      	asrs	r3, r3, #3
 800f858:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f85a:	2314      	movs	r3, #20
 800f85c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	685b      	ldr	r3, [r3, #4]
 800f862:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800f864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f866:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f86a:	781b      	ldrb	r3, [r3, #0]
 800f86c:	f003 030f 	and.w	r3, r3, #15
 800f870:	b2db      	uxtb	r3, r3
 800f872:	009b      	lsls	r3, r3, #2
 800f874:	b2db      	uxtb	r3, r3
 800f876:	2b14      	cmp	r3, #20
 800f878:	d002      	beq.n	800f880 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f87a:	f06f 0305 	mvn.w	r3, #5
 800f87e:	e110      	b.n	800faa2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	895b      	ldrh	r3, [r3, #10]
 800f884:	2b13      	cmp	r3, #19
 800f886:	d809      	bhi.n	800f89c <ip4_frag+0x64>
 800f888:	4b88      	ldr	r3, [pc, #544]	; (800faac <ip4_frag+0x274>)
 800f88a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800f88e:	4988      	ldr	r1, [pc, #544]	; (800fab0 <ip4_frag+0x278>)
 800f890:	4888      	ldr	r0, [pc, #544]	; (800fab4 <ip4_frag+0x27c>)
 800f892:	f000 fa4f 	bl	800fd34 <iprintf>
 800f896:	f06f 0305 	mvn.w	r3, #5
 800f89a:	e102      	b.n	800faa2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f89e:	88db      	ldrh	r3, [r3, #6]
 800f8a0:	b29b      	uxth	r3, r3
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7f5 fdec 	bl	8005480 <lwip_htons>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800f8ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f8ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f8b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800f8b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f8b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f8bc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	891b      	ldrh	r3, [r3, #8]
 800f8c2:	3b14      	subs	r3, #20
 800f8c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800f8c8:	e0e1      	b.n	800fa8e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f8ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f8cc:	00db      	lsls	r3, r3, #3
 800f8ce:	b29b      	uxth	r3, r3
 800f8d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f8d4:	4293      	cmp	r3, r2
 800f8d6:	bf28      	it	cs
 800f8d8:	4613      	movcs	r3, r2
 800f8da:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f8dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f8e0:	2114      	movs	r1, #20
 800f8e2:	200e      	movs	r0, #14
 800f8e4:	f7f6 fd9c 	bl	8006420 <pbuf_alloc>
 800f8e8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800f8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	f000 80d5 	beq.w	800fa9c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f4:	895b      	ldrh	r3, [r3, #10]
 800f8f6:	2b13      	cmp	r3, #19
 800f8f8:	d806      	bhi.n	800f908 <ip4_frag+0xd0>
 800f8fa:	4b6c      	ldr	r3, [pc, #432]	; (800faac <ip4_frag+0x274>)
 800f8fc:	f44f 7249 	mov.w	r2, #804	; 0x324
 800f900:	496d      	ldr	r1, [pc, #436]	; (800fab8 <ip4_frag+0x280>)
 800f902:	486c      	ldr	r0, [pc, #432]	; (800fab4 <ip4_frag+0x27c>)
 800f904:	f000 fa16 	bl	800fd34 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f90a:	685b      	ldr	r3, [r3, #4]
 800f90c:	2214      	movs	r2, #20
 800f90e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f910:	4618      	mov	r0, r3
 800f912:	f000 f9df 	bl	800fcd4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f918:	685b      	ldr	r3, [r3, #4]
 800f91a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800f91c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f91e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800f922:	e064      	b.n	800f9ee <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	895a      	ldrh	r2, [r3, #10]
 800f928:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f92a:	1ad3      	subs	r3, r2, r3
 800f92c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	895b      	ldrh	r3, [r3, #10]
 800f932:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f934:	429a      	cmp	r2, r3
 800f936:	d906      	bls.n	800f946 <ip4_frag+0x10e>
 800f938:	4b5c      	ldr	r3, [pc, #368]	; (800faac <ip4_frag+0x274>)
 800f93a:	f240 322d 	movw	r2, #813	; 0x32d
 800f93e:	495f      	ldr	r1, [pc, #380]	; (800fabc <ip4_frag+0x284>)
 800f940:	485c      	ldr	r0, [pc, #368]	; (800fab4 <ip4_frag+0x27c>)
 800f942:	f000 f9f7 	bl	800fd34 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f946:	8bfa      	ldrh	r2, [r7, #30]
 800f948:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f94c:	4293      	cmp	r3, r2
 800f94e:	bf28      	it	cs
 800f950:	4613      	movcs	r3, r2
 800f952:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f956:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d105      	bne.n	800f96a <ip4_frag+0x132>
        poff = 0;
 800f95e:	2300      	movs	r3, #0
 800f960:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	60fb      	str	r3, [r7, #12]
        continue;
 800f968:	e041      	b.n	800f9ee <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f96a:	f7ff ff0d 	bl	800f788 <ip_frag_alloc_pbuf_custom_ref>
 800f96e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f970:	69bb      	ldr	r3, [r7, #24]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d103      	bne.n	800f97e <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f976:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f978:	f7f7 f836 	bl	80069e8 <pbuf_free>
        goto memerr;
 800f97c:	e08f      	b.n	800fa9e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f97e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f984:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f986:	4413      	add	r3, r2
 800f988:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800f98c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f990:	9201      	str	r2, [sp, #4]
 800f992:	9300      	str	r3, [sp, #0]
 800f994:	4603      	mov	r3, r0
 800f996:	2241      	movs	r2, #65	; 0x41
 800f998:	2000      	movs	r0, #0
 800f99a:	f7f6 fe6b 	bl	8006674 <pbuf_alloced_custom>
 800f99e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d106      	bne.n	800f9b4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f9a6:	69b8      	ldr	r0, [r7, #24]
 800f9a8:	f7ff fef6 	bl	800f798 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f9ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f9ae:	f7f7 f81b 	bl	80069e8 <pbuf_free>
        goto memerr;
 800f9b2:	e074      	b.n	800fa9e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f9b4:	68f8      	ldr	r0, [r7, #12]
 800f9b6:	f7f7 f8b7 	bl	8006b28 <pbuf_ref>
      pcr->original = p;
 800f9ba:	69bb      	ldr	r3, [r7, #24]
 800f9bc:	68fa      	ldr	r2, [r7, #12]
 800f9be:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f9c0:	69bb      	ldr	r3, [r7, #24]
 800f9c2:	4a3f      	ldr	r2, [pc, #252]	; (800fac0 <ip4_frag+0x288>)
 800f9c4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f9c6:	6979      	ldr	r1, [r7, #20]
 800f9c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f9ca:	f7f7 f8cf 	bl	8006b6c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f9ce:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f9d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f9d6:	1ad3      	subs	r3, r2, r3
 800f9d8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800f9dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d004      	beq.n	800f9ee <ip4_frag+0x1b6>
        poff = 0;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f9ee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d196      	bne.n	800f924 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f9f6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f9f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f9fc:	4413      	add	r3, r2
 800f9fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fa04:	f1a3 0213 	sub.w	r2, r3, #19
 800fa08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	bfcc      	ite	gt
 800fa10:	2301      	movgt	r3, #1
 800fa12:	2300      	movle	r3, #0
 800fa14:	b2db      	uxtb	r3, r3
 800fa16:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800fa18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fa1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fa20:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800fa22:	6a3b      	ldr	r3, [r7, #32]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d002      	beq.n	800fa2e <ip4_frag+0x1f6>
 800fa28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d003      	beq.n	800fa36 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800fa2e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fa30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fa34:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800fa36:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7f5 fd21 	bl	8005480 <lwip_htons>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	461a      	mov	r2, r3
 800fa42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa44:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800fa46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fa48:	3314      	adds	r3, #20
 800fa4a:	b29b      	uxth	r3, r3
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	f7f5 fd17 	bl	8005480 <lwip_htons>
 800fa52:	4603      	mov	r3, r0
 800fa54:	461a      	mov	r2, r3
 800fa56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa58:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800fa5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	729a      	strb	r2, [r3, #10]
 800fa60:	2200      	movs	r2, #0
 800fa62:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	695b      	ldr	r3, [r3, #20]
 800fa68:	687a      	ldr	r2, [r7, #4]
 800fa6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa6c:	68b8      	ldr	r0, [r7, #8]
 800fa6e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800fa70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa72:	f7f6 ffb9 	bl	80069e8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800fa76:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fa7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fa7c:	1ad3      	subs	r3, r2, r3
 800fa7e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800fa82:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800fa86:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fa88:	4413      	add	r3, r2
 800fa8a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800fa8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	f47f af19 	bne.w	800f8ca <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800fa98:	2300      	movs	r3, #0
 800fa9a:	e002      	b.n	800faa2 <ip4_frag+0x26a>
      goto memerr;
 800fa9c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800fa9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800faa2:	4618      	mov	r0, r3
 800faa4:	3748      	adds	r7, #72	; 0x48
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}
 800faaa:	bf00      	nop
 800faac:	08013928 	.word	0x08013928
 800fab0:	08013b04 	.word	0x08013b04
 800fab4:	08013970 	.word	0x08013970
 800fab8:	08013b20 	.word	0x08013b20
 800fabc:	08013b40 	.word	0x08013b40
 800fac0:	0800f7d1 	.word	0x0800f7d1

0800fac4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b086      	sub	sp, #24
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800face:	230e      	movs	r3, #14
 800fad0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	895b      	ldrh	r3, [r3, #10]
 800fad6:	2b0e      	cmp	r3, #14
 800fad8:	d96e      	bls.n	800fbb8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	7bdb      	ldrb	r3, [r3, #15]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d106      	bne.n	800faf0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fae8:	3301      	adds	r3, #1
 800faea:	b2da      	uxtb	r2, r3
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	685b      	ldr	r3, [r3, #4]
 800faf4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800faf6:	693b      	ldr	r3, [r7, #16]
 800faf8:	7b1a      	ldrb	r2, [r3, #12]
 800fafa:	7b5b      	ldrb	r3, [r3, #13]
 800fafc:	021b      	lsls	r3, r3, #8
 800fafe:	4313      	orrs	r3, r2
 800fb00:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	781b      	ldrb	r3, [r3, #0]
 800fb06:	f003 0301 	and.w	r3, r3, #1
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d023      	beq.n	800fb56 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800fb0e:	693b      	ldr	r3, [r7, #16]
 800fb10:	781b      	ldrb	r3, [r3, #0]
 800fb12:	2b01      	cmp	r3, #1
 800fb14:	d10f      	bne.n	800fb36 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	785b      	ldrb	r3, [r3, #1]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d11b      	bne.n	800fb56 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800fb1e:	693b      	ldr	r3, [r7, #16]
 800fb20:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fb22:	2b5e      	cmp	r3, #94	; 0x5e
 800fb24:	d117      	bne.n	800fb56 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	7b5b      	ldrb	r3, [r3, #13]
 800fb2a:	f043 0310 	orr.w	r3, r3, #16
 800fb2e:	b2da      	uxtb	r2, r3
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	735a      	strb	r2, [r3, #13]
 800fb34:	e00f      	b.n	800fb56 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	2206      	movs	r2, #6
 800fb3a:	4928      	ldr	r1, [pc, #160]	; (800fbdc <ethernet_input+0x118>)
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f000 f8bb 	bl	800fcb8 <memcmp>
 800fb42:	4603      	mov	r3, r0
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d106      	bne.n	800fb56 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	7b5b      	ldrb	r3, [r3, #13]
 800fb4c:	f043 0308 	orr.w	r3, r3, #8
 800fb50:	b2da      	uxtb	r2, r3
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800fb56:	89fb      	ldrh	r3, [r7, #14]
 800fb58:	2b08      	cmp	r3, #8
 800fb5a:	d003      	beq.n	800fb64 <ethernet_input+0xa0>
 800fb5c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800fb60:	d014      	beq.n	800fb8c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800fb62:	e032      	b.n	800fbca <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb6a:	f003 0308 	and.w	r3, r3, #8
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d024      	beq.n	800fbbc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fb72:	8afb      	ldrh	r3, [r7, #22]
 800fb74:	4619      	mov	r1, r3
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f7f6 feb0 	bl	80068dc <pbuf_remove_header>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d11e      	bne.n	800fbc0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800fb82:	6839      	ldr	r1, [r7, #0]
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f7fe ff27 	bl	800e9d8 <ip4_input>
      break;
 800fb8a:	e013      	b.n	800fbb4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb92:	f003 0308 	and.w	r3, r3, #8
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d014      	beq.n	800fbc4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fb9a:	8afb      	ldrh	r3, [r7, #22]
 800fb9c:	4619      	mov	r1, r3
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f7f6 fe9c 	bl	80068dc <pbuf_remove_header>
 800fba4:	4603      	mov	r3, r0
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d10e      	bne.n	800fbc8 <ethernet_input+0x104>
        etharp_input(p, netif);
 800fbaa:	6839      	ldr	r1, [r7, #0]
 800fbac:	6878      	ldr	r0, [r7, #4]
 800fbae:	f7fe f8c7 	bl	800dd40 <etharp_input>
      break;
 800fbb2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	e00c      	b.n	800fbd2 <ethernet_input+0x10e>
    goto free_and_return;
 800fbb8:	bf00      	nop
 800fbba:	e006      	b.n	800fbca <ethernet_input+0x106>
        goto free_and_return;
 800fbbc:	bf00      	nop
 800fbbe:	e004      	b.n	800fbca <ethernet_input+0x106>
        goto free_and_return;
 800fbc0:	bf00      	nop
 800fbc2:	e002      	b.n	800fbca <ethernet_input+0x106>
        goto free_and_return;
 800fbc4:	bf00      	nop
 800fbc6:	e000      	b.n	800fbca <ethernet_input+0x106>
        goto free_and_return;
 800fbc8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	f7f6 ff0c 	bl	80069e8 <pbuf_free>
  return ERR_OK;
 800fbd0:	2300      	movs	r3, #0
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	3718      	adds	r7, #24
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}
 800fbda:	bf00      	nop
 800fbdc:	08013cc8 	.word	0x08013cc8

0800fbe0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b086      	sub	sp, #24
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	60f8      	str	r0, [r7, #12]
 800fbe8:	60b9      	str	r1, [r7, #8]
 800fbea:	607a      	str	r2, [r7, #4]
 800fbec:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800fbee:	8c3b      	ldrh	r3, [r7, #32]
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7f5 fc45 	bl	8005480 <lwip_htons>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800fbfa:	210e      	movs	r1, #14
 800fbfc:	68b8      	ldr	r0, [r7, #8]
 800fbfe:	f7f6 fe5d 	bl	80068bc <pbuf_add_header>
 800fc02:	4603      	mov	r3, r0
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d125      	bne.n	800fc54 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	685b      	ldr	r3, [r3, #4]
 800fc0c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800fc0e:	693b      	ldr	r3, [r7, #16]
 800fc10:	8afa      	ldrh	r2, [r7, #22]
 800fc12:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800fc14:	693b      	ldr	r3, [r7, #16]
 800fc16:	2206      	movs	r2, #6
 800fc18:	6839      	ldr	r1, [r7, #0]
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f000 f85a 	bl	800fcd4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800fc20:	693b      	ldr	r3, [r7, #16]
 800fc22:	3306      	adds	r3, #6
 800fc24:	2206      	movs	r2, #6
 800fc26:	6879      	ldr	r1, [r7, #4]
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f000 f853 	bl	800fcd4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fc34:	2b06      	cmp	r3, #6
 800fc36:	d006      	beq.n	800fc46 <ethernet_output+0x66>
 800fc38:	4b0a      	ldr	r3, [pc, #40]	; (800fc64 <ethernet_output+0x84>)
 800fc3a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800fc3e:	490a      	ldr	r1, [pc, #40]	; (800fc68 <ethernet_output+0x88>)
 800fc40:	480a      	ldr	r0, [pc, #40]	; (800fc6c <ethernet_output+0x8c>)
 800fc42:	f000 f877 	bl	800fd34 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	699b      	ldr	r3, [r3, #24]
 800fc4a:	68b9      	ldr	r1, [r7, #8]
 800fc4c:	68f8      	ldr	r0, [r7, #12]
 800fc4e:	4798      	blx	r3
 800fc50:	4603      	mov	r3, r0
 800fc52:	e002      	b.n	800fc5a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800fc54:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800fc56:	f06f 0301 	mvn.w	r3, #1
}
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	3718      	adds	r7, #24
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}
 800fc62:	bf00      	nop
 800fc64:	08013b50 	.word	0x08013b50
 800fc68:	08013b88 	.word	0x08013b88
 800fc6c:	08013bbc 	.word	0x08013bbc

0800fc70 <__libc_init_array>:
 800fc70:	b570      	push	{r4, r5, r6, lr}
 800fc72:	4d0d      	ldr	r5, [pc, #52]	; (800fca8 <__libc_init_array+0x38>)
 800fc74:	4c0d      	ldr	r4, [pc, #52]	; (800fcac <__libc_init_array+0x3c>)
 800fc76:	1b64      	subs	r4, r4, r5
 800fc78:	10a4      	asrs	r4, r4, #2
 800fc7a:	2600      	movs	r6, #0
 800fc7c:	42a6      	cmp	r6, r4
 800fc7e:	d109      	bne.n	800fc94 <__libc_init_array+0x24>
 800fc80:	4d0b      	ldr	r5, [pc, #44]	; (800fcb0 <__libc_init_array+0x40>)
 800fc82:	4c0c      	ldr	r4, [pc, #48]	; (800fcb4 <__libc_init_array+0x44>)
 800fc84:	f001 fa1a 	bl	80110bc <_init>
 800fc88:	1b64      	subs	r4, r4, r5
 800fc8a:	10a4      	asrs	r4, r4, #2
 800fc8c:	2600      	movs	r6, #0
 800fc8e:	42a6      	cmp	r6, r4
 800fc90:	d105      	bne.n	800fc9e <__libc_init_array+0x2e>
 800fc92:	bd70      	pop	{r4, r5, r6, pc}
 800fc94:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc98:	4798      	blx	r3
 800fc9a:	3601      	adds	r6, #1
 800fc9c:	e7ee      	b.n	800fc7c <__libc_init_array+0xc>
 800fc9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fca2:	4798      	blx	r3
 800fca4:	3601      	adds	r6, #1
 800fca6:	e7f2      	b.n	800fc8e <__libc_init_array+0x1e>
 800fca8:	08013e2c 	.word	0x08013e2c
 800fcac:	08013e2c 	.word	0x08013e2c
 800fcb0:	08013e2c 	.word	0x08013e2c
 800fcb4:	08013e30 	.word	0x08013e30

0800fcb8 <memcmp>:
 800fcb8:	b530      	push	{r4, r5, lr}
 800fcba:	3901      	subs	r1, #1
 800fcbc:	2400      	movs	r4, #0
 800fcbe:	42a2      	cmp	r2, r4
 800fcc0:	d101      	bne.n	800fcc6 <memcmp+0xe>
 800fcc2:	2000      	movs	r0, #0
 800fcc4:	e005      	b.n	800fcd2 <memcmp+0x1a>
 800fcc6:	5d03      	ldrb	r3, [r0, r4]
 800fcc8:	3401      	adds	r4, #1
 800fcca:	5d0d      	ldrb	r5, [r1, r4]
 800fccc:	42ab      	cmp	r3, r5
 800fcce:	d0f6      	beq.n	800fcbe <memcmp+0x6>
 800fcd0:	1b58      	subs	r0, r3, r5
 800fcd2:	bd30      	pop	{r4, r5, pc}

0800fcd4 <memcpy>:
 800fcd4:	440a      	add	r2, r1
 800fcd6:	4291      	cmp	r1, r2
 800fcd8:	f100 33ff 	add.w	r3, r0, #4294967295
 800fcdc:	d100      	bne.n	800fce0 <memcpy+0xc>
 800fcde:	4770      	bx	lr
 800fce0:	b510      	push	{r4, lr}
 800fce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fce6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fcea:	4291      	cmp	r1, r2
 800fcec:	d1f9      	bne.n	800fce2 <memcpy+0xe>
 800fcee:	bd10      	pop	{r4, pc}

0800fcf0 <memmove>:
 800fcf0:	4288      	cmp	r0, r1
 800fcf2:	b510      	push	{r4, lr}
 800fcf4:	eb01 0402 	add.w	r4, r1, r2
 800fcf8:	d902      	bls.n	800fd00 <memmove+0x10>
 800fcfa:	4284      	cmp	r4, r0
 800fcfc:	4623      	mov	r3, r4
 800fcfe:	d807      	bhi.n	800fd10 <memmove+0x20>
 800fd00:	1e43      	subs	r3, r0, #1
 800fd02:	42a1      	cmp	r1, r4
 800fd04:	d008      	beq.n	800fd18 <memmove+0x28>
 800fd06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fd0e:	e7f8      	b.n	800fd02 <memmove+0x12>
 800fd10:	4402      	add	r2, r0
 800fd12:	4601      	mov	r1, r0
 800fd14:	428a      	cmp	r2, r1
 800fd16:	d100      	bne.n	800fd1a <memmove+0x2a>
 800fd18:	bd10      	pop	{r4, pc}
 800fd1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fd1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fd22:	e7f7      	b.n	800fd14 <memmove+0x24>

0800fd24 <memset>:
 800fd24:	4402      	add	r2, r0
 800fd26:	4603      	mov	r3, r0
 800fd28:	4293      	cmp	r3, r2
 800fd2a:	d100      	bne.n	800fd2e <memset+0xa>
 800fd2c:	4770      	bx	lr
 800fd2e:	f803 1b01 	strb.w	r1, [r3], #1
 800fd32:	e7f9      	b.n	800fd28 <memset+0x4>

0800fd34 <iprintf>:
 800fd34:	b40f      	push	{r0, r1, r2, r3}
 800fd36:	4b0a      	ldr	r3, [pc, #40]	; (800fd60 <iprintf+0x2c>)
 800fd38:	b513      	push	{r0, r1, r4, lr}
 800fd3a:	681c      	ldr	r4, [r3, #0]
 800fd3c:	b124      	cbz	r4, 800fd48 <iprintf+0x14>
 800fd3e:	69a3      	ldr	r3, [r4, #24]
 800fd40:	b913      	cbnz	r3, 800fd48 <iprintf+0x14>
 800fd42:	4620      	mov	r0, r4
 800fd44:	f000 f8e4 	bl	800ff10 <__sinit>
 800fd48:	ab05      	add	r3, sp, #20
 800fd4a:	9a04      	ldr	r2, [sp, #16]
 800fd4c:	68a1      	ldr	r1, [r4, #8]
 800fd4e:	9301      	str	r3, [sp, #4]
 800fd50:	4620      	mov	r0, r4
 800fd52:	f000 fbc7 	bl	80104e4 <_vfiprintf_r>
 800fd56:	b002      	add	sp, #8
 800fd58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd5c:	b004      	add	sp, #16
 800fd5e:	4770      	bx	lr
 800fd60:	20000020 	.word	0x20000020

0800fd64 <rand>:
 800fd64:	4b17      	ldr	r3, [pc, #92]	; (800fdc4 <rand+0x60>)
 800fd66:	b510      	push	{r4, lr}
 800fd68:	681c      	ldr	r4, [r3, #0]
 800fd6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fd6c:	b9b3      	cbnz	r3, 800fd9c <rand+0x38>
 800fd6e:	2018      	movs	r0, #24
 800fd70:	f000 f980 	bl	8010074 <malloc>
 800fd74:	63a0      	str	r0, [r4, #56]	; 0x38
 800fd76:	b928      	cbnz	r0, 800fd84 <rand+0x20>
 800fd78:	4602      	mov	r2, r0
 800fd7a:	4b13      	ldr	r3, [pc, #76]	; (800fdc8 <rand+0x64>)
 800fd7c:	4813      	ldr	r0, [pc, #76]	; (800fdcc <rand+0x68>)
 800fd7e:	214e      	movs	r1, #78	; 0x4e
 800fd80:	f000 f850 	bl	800fe24 <__assert_func>
 800fd84:	4a12      	ldr	r2, [pc, #72]	; (800fdd0 <rand+0x6c>)
 800fd86:	4b13      	ldr	r3, [pc, #76]	; (800fdd4 <rand+0x70>)
 800fd88:	e9c0 2300 	strd	r2, r3, [r0]
 800fd8c:	4b12      	ldr	r3, [pc, #72]	; (800fdd8 <rand+0x74>)
 800fd8e:	6083      	str	r3, [r0, #8]
 800fd90:	230b      	movs	r3, #11
 800fd92:	8183      	strh	r3, [r0, #12]
 800fd94:	2201      	movs	r2, #1
 800fd96:	2300      	movs	r3, #0
 800fd98:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800fd9c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fd9e:	480f      	ldr	r0, [pc, #60]	; (800fddc <rand+0x78>)
 800fda0:	690a      	ldr	r2, [r1, #16]
 800fda2:	694b      	ldr	r3, [r1, #20]
 800fda4:	4c0e      	ldr	r4, [pc, #56]	; (800fde0 <rand+0x7c>)
 800fda6:	4350      	muls	r0, r2
 800fda8:	fb04 0003 	mla	r0, r4, r3, r0
 800fdac:	fba2 3404 	umull	r3, r4, r2, r4
 800fdb0:	1c5a      	adds	r2, r3, #1
 800fdb2:	4404      	add	r4, r0
 800fdb4:	f144 0000 	adc.w	r0, r4, #0
 800fdb8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800fdbc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800fdc0:	bd10      	pop	{r4, pc}
 800fdc2:	bf00      	nop
 800fdc4:	20000020 	.word	0x20000020
 800fdc8:	08013cdc 	.word	0x08013cdc
 800fdcc:	08013cf3 	.word	0x08013cf3
 800fdd0:	abcd330e 	.word	0xabcd330e
 800fdd4:	e66d1234 	.word	0xe66d1234
 800fdd8:	0005deec 	.word	0x0005deec
 800fddc:	5851f42d 	.word	0x5851f42d
 800fde0:	4c957f2d 	.word	0x4c957f2d

0800fde4 <siprintf>:
 800fde4:	b40e      	push	{r1, r2, r3}
 800fde6:	b500      	push	{lr}
 800fde8:	b09c      	sub	sp, #112	; 0x70
 800fdea:	ab1d      	add	r3, sp, #116	; 0x74
 800fdec:	9002      	str	r0, [sp, #8]
 800fdee:	9006      	str	r0, [sp, #24]
 800fdf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fdf4:	4809      	ldr	r0, [pc, #36]	; (800fe1c <siprintf+0x38>)
 800fdf6:	9107      	str	r1, [sp, #28]
 800fdf8:	9104      	str	r1, [sp, #16]
 800fdfa:	4909      	ldr	r1, [pc, #36]	; (800fe20 <siprintf+0x3c>)
 800fdfc:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe00:	9105      	str	r1, [sp, #20]
 800fe02:	6800      	ldr	r0, [r0, #0]
 800fe04:	9301      	str	r3, [sp, #4]
 800fe06:	a902      	add	r1, sp, #8
 800fe08:	f000 fa42 	bl	8010290 <_svfiprintf_r>
 800fe0c:	9b02      	ldr	r3, [sp, #8]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	701a      	strb	r2, [r3, #0]
 800fe12:	b01c      	add	sp, #112	; 0x70
 800fe14:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe18:	b003      	add	sp, #12
 800fe1a:	4770      	bx	lr
 800fe1c:	20000020 	.word	0x20000020
 800fe20:	ffff0208 	.word	0xffff0208

0800fe24 <__assert_func>:
 800fe24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fe26:	4614      	mov	r4, r2
 800fe28:	461a      	mov	r2, r3
 800fe2a:	4b09      	ldr	r3, [pc, #36]	; (800fe50 <__assert_func+0x2c>)
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	4605      	mov	r5, r0
 800fe30:	68d8      	ldr	r0, [r3, #12]
 800fe32:	b14c      	cbz	r4, 800fe48 <__assert_func+0x24>
 800fe34:	4b07      	ldr	r3, [pc, #28]	; (800fe54 <__assert_func+0x30>)
 800fe36:	9100      	str	r1, [sp, #0]
 800fe38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fe3c:	4906      	ldr	r1, [pc, #24]	; (800fe58 <__assert_func+0x34>)
 800fe3e:	462b      	mov	r3, r5
 800fe40:	f000 f8e4 	bl	801000c <fiprintf>
 800fe44:	f000 ff38 	bl	8010cb8 <abort>
 800fe48:	4b04      	ldr	r3, [pc, #16]	; (800fe5c <__assert_func+0x38>)
 800fe4a:	461c      	mov	r4, r3
 800fe4c:	e7f3      	b.n	800fe36 <__assert_func+0x12>
 800fe4e:	bf00      	nop
 800fe50:	20000020 	.word	0x20000020
 800fe54:	08013d52 	.word	0x08013d52
 800fe58:	08013d5f 	.word	0x08013d5f
 800fe5c:	08013d8d 	.word	0x08013d8d

0800fe60 <std>:
 800fe60:	2300      	movs	r3, #0
 800fe62:	b510      	push	{r4, lr}
 800fe64:	4604      	mov	r4, r0
 800fe66:	e9c0 3300 	strd	r3, r3, [r0]
 800fe6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fe6e:	6083      	str	r3, [r0, #8]
 800fe70:	8181      	strh	r1, [r0, #12]
 800fe72:	6643      	str	r3, [r0, #100]	; 0x64
 800fe74:	81c2      	strh	r2, [r0, #14]
 800fe76:	6183      	str	r3, [r0, #24]
 800fe78:	4619      	mov	r1, r3
 800fe7a:	2208      	movs	r2, #8
 800fe7c:	305c      	adds	r0, #92	; 0x5c
 800fe7e:	f7ff ff51 	bl	800fd24 <memset>
 800fe82:	4b05      	ldr	r3, [pc, #20]	; (800fe98 <std+0x38>)
 800fe84:	6263      	str	r3, [r4, #36]	; 0x24
 800fe86:	4b05      	ldr	r3, [pc, #20]	; (800fe9c <std+0x3c>)
 800fe88:	62a3      	str	r3, [r4, #40]	; 0x28
 800fe8a:	4b05      	ldr	r3, [pc, #20]	; (800fea0 <std+0x40>)
 800fe8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fe8e:	4b05      	ldr	r3, [pc, #20]	; (800fea4 <std+0x44>)
 800fe90:	6224      	str	r4, [r4, #32]
 800fe92:	6323      	str	r3, [r4, #48]	; 0x30
 800fe94:	bd10      	pop	{r4, pc}
 800fe96:	bf00      	nop
 800fe98:	08010a8d 	.word	0x08010a8d
 800fe9c:	08010aaf 	.word	0x08010aaf
 800fea0:	08010ae7 	.word	0x08010ae7
 800fea4:	08010b0b 	.word	0x08010b0b

0800fea8 <_cleanup_r>:
 800fea8:	4901      	ldr	r1, [pc, #4]	; (800feb0 <_cleanup_r+0x8>)
 800feaa:	f000 b8c1 	b.w	8010030 <_fwalk_reent>
 800feae:	bf00      	nop
 800feb0:	08010df5 	.word	0x08010df5

0800feb4 <__sfmoreglue>:
 800feb4:	b570      	push	{r4, r5, r6, lr}
 800feb6:	1e4a      	subs	r2, r1, #1
 800feb8:	2568      	movs	r5, #104	; 0x68
 800feba:	4355      	muls	r5, r2
 800febc:	460e      	mov	r6, r1
 800febe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fec2:	f000 f92f 	bl	8010124 <_malloc_r>
 800fec6:	4604      	mov	r4, r0
 800fec8:	b140      	cbz	r0, 800fedc <__sfmoreglue+0x28>
 800feca:	2100      	movs	r1, #0
 800fecc:	e9c0 1600 	strd	r1, r6, [r0]
 800fed0:	300c      	adds	r0, #12
 800fed2:	60a0      	str	r0, [r4, #8]
 800fed4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fed8:	f7ff ff24 	bl	800fd24 <memset>
 800fedc:	4620      	mov	r0, r4
 800fede:	bd70      	pop	{r4, r5, r6, pc}

0800fee0 <__sfp_lock_acquire>:
 800fee0:	4801      	ldr	r0, [pc, #4]	; (800fee8 <__sfp_lock_acquire+0x8>)
 800fee2:	f000 b8c5 	b.w	8010070 <__retarget_lock_acquire_recursive>
 800fee6:	bf00      	nop
 800fee8:	20006a54 	.word	0x20006a54

0800feec <__sfp_lock_release>:
 800feec:	4801      	ldr	r0, [pc, #4]	; (800fef4 <__sfp_lock_release+0x8>)
 800feee:	f000 b8c0 	b.w	8010072 <__retarget_lock_release_recursive>
 800fef2:	bf00      	nop
 800fef4:	20006a54 	.word	0x20006a54

0800fef8 <__sinit_lock_acquire>:
 800fef8:	4801      	ldr	r0, [pc, #4]	; (800ff00 <__sinit_lock_acquire+0x8>)
 800fefa:	f000 b8b9 	b.w	8010070 <__retarget_lock_acquire_recursive>
 800fefe:	bf00      	nop
 800ff00:	20006a4f 	.word	0x20006a4f

0800ff04 <__sinit_lock_release>:
 800ff04:	4801      	ldr	r0, [pc, #4]	; (800ff0c <__sinit_lock_release+0x8>)
 800ff06:	f000 b8b4 	b.w	8010072 <__retarget_lock_release_recursive>
 800ff0a:	bf00      	nop
 800ff0c:	20006a4f 	.word	0x20006a4f

0800ff10 <__sinit>:
 800ff10:	b510      	push	{r4, lr}
 800ff12:	4604      	mov	r4, r0
 800ff14:	f7ff fff0 	bl	800fef8 <__sinit_lock_acquire>
 800ff18:	69a3      	ldr	r3, [r4, #24]
 800ff1a:	b11b      	cbz	r3, 800ff24 <__sinit+0x14>
 800ff1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff20:	f7ff bff0 	b.w	800ff04 <__sinit_lock_release>
 800ff24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ff28:	6523      	str	r3, [r4, #80]	; 0x50
 800ff2a:	4b13      	ldr	r3, [pc, #76]	; (800ff78 <__sinit+0x68>)
 800ff2c:	4a13      	ldr	r2, [pc, #76]	; (800ff7c <__sinit+0x6c>)
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	62a2      	str	r2, [r4, #40]	; 0x28
 800ff32:	42a3      	cmp	r3, r4
 800ff34:	bf04      	itt	eq
 800ff36:	2301      	moveq	r3, #1
 800ff38:	61a3      	streq	r3, [r4, #24]
 800ff3a:	4620      	mov	r0, r4
 800ff3c:	f000 f820 	bl	800ff80 <__sfp>
 800ff40:	6060      	str	r0, [r4, #4]
 800ff42:	4620      	mov	r0, r4
 800ff44:	f000 f81c 	bl	800ff80 <__sfp>
 800ff48:	60a0      	str	r0, [r4, #8]
 800ff4a:	4620      	mov	r0, r4
 800ff4c:	f000 f818 	bl	800ff80 <__sfp>
 800ff50:	2200      	movs	r2, #0
 800ff52:	60e0      	str	r0, [r4, #12]
 800ff54:	2104      	movs	r1, #4
 800ff56:	6860      	ldr	r0, [r4, #4]
 800ff58:	f7ff ff82 	bl	800fe60 <std>
 800ff5c:	68a0      	ldr	r0, [r4, #8]
 800ff5e:	2201      	movs	r2, #1
 800ff60:	2109      	movs	r1, #9
 800ff62:	f7ff ff7d 	bl	800fe60 <std>
 800ff66:	68e0      	ldr	r0, [r4, #12]
 800ff68:	2202      	movs	r2, #2
 800ff6a:	2112      	movs	r1, #18
 800ff6c:	f7ff ff78 	bl	800fe60 <std>
 800ff70:	2301      	movs	r3, #1
 800ff72:	61a3      	str	r3, [r4, #24]
 800ff74:	e7d2      	b.n	800ff1c <__sinit+0xc>
 800ff76:	bf00      	nop
 800ff78:	08013cd8 	.word	0x08013cd8
 800ff7c:	0800fea9 	.word	0x0800fea9

0800ff80 <__sfp>:
 800ff80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff82:	4607      	mov	r7, r0
 800ff84:	f7ff ffac 	bl	800fee0 <__sfp_lock_acquire>
 800ff88:	4b1e      	ldr	r3, [pc, #120]	; (8010004 <__sfp+0x84>)
 800ff8a:	681e      	ldr	r6, [r3, #0]
 800ff8c:	69b3      	ldr	r3, [r6, #24]
 800ff8e:	b913      	cbnz	r3, 800ff96 <__sfp+0x16>
 800ff90:	4630      	mov	r0, r6
 800ff92:	f7ff ffbd 	bl	800ff10 <__sinit>
 800ff96:	3648      	adds	r6, #72	; 0x48
 800ff98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ff9c:	3b01      	subs	r3, #1
 800ff9e:	d503      	bpl.n	800ffa8 <__sfp+0x28>
 800ffa0:	6833      	ldr	r3, [r6, #0]
 800ffa2:	b30b      	cbz	r3, 800ffe8 <__sfp+0x68>
 800ffa4:	6836      	ldr	r6, [r6, #0]
 800ffa6:	e7f7      	b.n	800ff98 <__sfp+0x18>
 800ffa8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ffac:	b9d5      	cbnz	r5, 800ffe4 <__sfp+0x64>
 800ffae:	4b16      	ldr	r3, [pc, #88]	; (8010008 <__sfp+0x88>)
 800ffb0:	60e3      	str	r3, [r4, #12]
 800ffb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ffb6:	6665      	str	r5, [r4, #100]	; 0x64
 800ffb8:	f000 f859 	bl	801006e <__retarget_lock_init_recursive>
 800ffbc:	f7ff ff96 	bl	800feec <__sfp_lock_release>
 800ffc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ffc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ffc8:	6025      	str	r5, [r4, #0]
 800ffca:	61a5      	str	r5, [r4, #24]
 800ffcc:	2208      	movs	r2, #8
 800ffce:	4629      	mov	r1, r5
 800ffd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ffd4:	f7ff fea6 	bl	800fd24 <memset>
 800ffd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ffdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ffe0:	4620      	mov	r0, r4
 800ffe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffe4:	3468      	adds	r4, #104	; 0x68
 800ffe6:	e7d9      	b.n	800ff9c <__sfp+0x1c>
 800ffe8:	2104      	movs	r1, #4
 800ffea:	4638      	mov	r0, r7
 800ffec:	f7ff ff62 	bl	800feb4 <__sfmoreglue>
 800fff0:	4604      	mov	r4, r0
 800fff2:	6030      	str	r0, [r6, #0]
 800fff4:	2800      	cmp	r0, #0
 800fff6:	d1d5      	bne.n	800ffa4 <__sfp+0x24>
 800fff8:	f7ff ff78 	bl	800feec <__sfp_lock_release>
 800fffc:	230c      	movs	r3, #12
 800fffe:	603b      	str	r3, [r7, #0]
 8010000:	e7ee      	b.n	800ffe0 <__sfp+0x60>
 8010002:	bf00      	nop
 8010004:	08013cd8 	.word	0x08013cd8
 8010008:	ffff0001 	.word	0xffff0001

0801000c <fiprintf>:
 801000c:	b40e      	push	{r1, r2, r3}
 801000e:	b503      	push	{r0, r1, lr}
 8010010:	4601      	mov	r1, r0
 8010012:	ab03      	add	r3, sp, #12
 8010014:	4805      	ldr	r0, [pc, #20]	; (801002c <fiprintf+0x20>)
 8010016:	f853 2b04 	ldr.w	r2, [r3], #4
 801001a:	6800      	ldr	r0, [r0, #0]
 801001c:	9301      	str	r3, [sp, #4]
 801001e:	f000 fa61 	bl	80104e4 <_vfiprintf_r>
 8010022:	b002      	add	sp, #8
 8010024:	f85d eb04 	ldr.w	lr, [sp], #4
 8010028:	b003      	add	sp, #12
 801002a:	4770      	bx	lr
 801002c:	20000020 	.word	0x20000020

08010030 <_fwalk_reent>:
 8010030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010034:	4606      	mov	r6, r0
 8010036:	4688      	mov	r8, r1
 8010038:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801003c:	2700      	movs	r7, #0
 801003e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010042:	f1b9 0901 	subs.w	r9, r9, #1
 8010046:	d505      	bpl.n	8010054 <_fwalk_reent+0x24>
 8010048:	6824      	ldr	r4, [r4, #0]
 801004a:	2c00      	cmp	r4, #0
 801004c:	d1f7      	bne.n	801003e <_fwalk_reent+0xe>
 801004e:	4638      	mov	r0, r7
 8010050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010054:	89ab      	ldrh	r3, [r5, #12]
 8010056:	2b01      	cmp	r3, #1
 8010058:	d907      	bls.n	801006a <_fwalk_reent+0x3a>
 801005a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801005e:	3301      	adds	r3, #1
 8010060:	d003      	beq.n	801006a <_fwalk_reent+0x3a>
 8010062:	4629      	mov	r1, r5
 8010064:	4630      	mov	r0, r6
 8010066:	47c0      	blx	r8
 8010068:	4307      	orrs	r7, r0
 801006a:	3568      	adds	r5, #104	; 0x68
 801006c:	e7e9      	b.n	8010042 <_fwalk_reent+0x12>

0801006e <__retarget_lock_init_recursive>:
 801006e:	4770      	bx	lr

08010070 <__retarget_lock_acquire_recursive>:
 8010070:	4770      	bx	lr

08010072 <__retarget_lock_release_recursive>:
 8010072:	4770      	bx	lr

08010074 <malloc>:
 8010074:	4b02      	ldr	r3, [pc, #8]	; (8010080 <malloc+0xc>)
 8010076:	4601      	mov	r1, r0
 8010078:	6818      	ldr	r0, [r3, #0]
 801007a:	f000 b853 	b.w	8010124 <_malloc_r>
 801007e:	bf00      	nop
 8010080:	20000020 	.word	0x20000020

08010084 <_free_r>:
 8010084:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010086:	2900      	cmp	r1, #0
 8010088:	d048      	beq.n	801011c <_free_r+0x98>
 801008a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801008e:	9001      	str	r0, [sp, #4]
 8010090:	2b00      	cmp	r3, #0
 8010092:	f1a1 0404 	sub.w	r4, r1, #4
 8010096:	bfb8      	it	lt
 8010098:	18e4      	addlt	r4, r4, r3
 801009a:	f000 ff5d 	bl	8010f58 <__malloc_lock>
 801009e:	4a20      	ldr	r2, [pc, #128]	; (8010120 <_free_r+0x9c>)
 80100a0:	9801      	ldr	r0, [sp, #4]
 80100a2:	6813      	ldr	r3, [r2, #0]
 80100a4:	4615      	mov	r5, r2
 80100a6:	b933      	cbnz	r3, 80100b6 <_free_r+0x32>
 80100a8:	6063      	str	r3, [r4, #4]
 80100aa:	6014      	str	r4, [r2, #0]
 80100ac:	b003      	add	sp, #12
 80100ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80100b2:	f000 bf57 	b.w	8010f64 <__malloc_unlock>
 80100b6:	42a3      	cmp	r3, r4
 80100b8:	d90b      	bls.n	80100d2 <_free_r+0x4e>
 80100ba:	6821      	ldr	r1, [r4, #0]
 80100bc:	1862      	adds	r2, r4, r1
 80100be:	4293      	cmp	r3, r2
 80100c0:	bf04      	itt	eq
 80100c2:	681a      	ldreq	r2, [r3, #0]
 80100c4:	685b      	ldreq	r3, [r3, #4]
 80100c6:	6063      	str	r3, [r4, #4]
 80100c8:	bf04      	itt	eq
 80100ca:	1852      	addeq	r2, r2, r1
 80100cc:	6022      	streq	r2, [r4, #0]
 80100ce:	602c      	str	r4, [r5, #0]
 80100d0:	e7ec      	b.n	80100ac <_free_r+0x28>
 80100d2:	461a      	mov	r2, r3
 80100d4:	685b      	ldr	r3, [r3, #4]
 80100d6:	b10b      	cbz	r3, 80100dc <_free_r+0x58>
 80100d8:	42a3      	cmp	r3, r4
 80100da:	d9fa      	bls.n	80100d2 <_free_r+0x4e>
 80100dc:	6811      	ldr	r1, [r2, #0]
 80100de:	1855      	adds	r5, r2, r1
 80100e0:	42a5      	cmp	r5, r4
 80100e2:	d10b      	bne.n	80100fc <_free_r+0x78>
 80100e4:	6824      	ldr	r4, [r4, #0]
 80100e6:	4421      	add	r1, r4
 80100e8:	1854      	adds	r4, r2, r1
 80100ea:	42a3      	cmp	r3, r4
 80100ec:	6011      	str	r1, [r2, #0]
 80100ee:	d1dd      	bne.n	80100ac <_free_r+0x28>
 80100f0:	681c      	ldr	r4, [r3, #0]
 80100f2:	685b      	ldr	r3, [r3, #4]
 80100f4:	6053      	str	r3, [r2, #4]
 80100f6:	4421      	add	r1, r4
 80100f8:	6011      	str	r1, [r2, #0]
 80100fa:	e7d7      	b.n	80100ac <_free_r+0x28>
 80100fc:	d902      	bls.n	8010104 <_free_r+0x80>
 80100fe:	230c      	movs	r3, #12
 8010100:	6003      	str	r3, [r0, #0]
 8010102:	e7d3      	b.n	80100ac <_free_r+0x28>
 8010104:	6825      	ldr	r5, [r4, #0]
 8010106:	1961      	adds	r1, r4, r5
 8010108:	428b      	cmp	r3, r1
 801010a:	bf04      	itt	eq
 801010c:	6819      	ldreq	r1, [r3, #0]
 801010e:	685b      	ldreq	r3, [r3, #4]
 8010110:	6063      	str	r3, [r4, #4]
 8010112:	bf04      	itt	eq
 8010114:	1949      	addeq	r1, r1, r5
 8010116:	6021      	streq	r1, [r4, #0]
 8010118:	6054      	str	r4, [r2, #4]
 801011a:	e7c7      	b.n	80100ac <_free_r+0x28>
 801011c:	b003      	add	sp, #12
 801011e:	bd30      	pop	{r4, r5, pc}
 8010120:	2000021c 	.word	0x2000021c

08010124 <_malloc_r>:
 8010124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010126:	1ccd      	adds	r5, r1, #3
 8010128:	f025 0503 	bic.w	r5, r5, #3
 801012c:	3508      	adds	r5, #8
 801012e:	2d0c      	cmp	r5, #12
 8010130:	bf38      	it	cc
 8010132:	250c      	movcc	r5, #12
 8010134:	2d00      	cmp	r5, #0
 8010136:	4606      	mov	r6, r0
 8010138:	db01      	blt.n	801013e <_malloc_r+0x1a>
 801013a:	42a9      	cmp	r1, r5
 801013c:	d903      	bls.n	8010146 <_malloc_r+0x22>
 801013e:	230c      	movs	r3, #12
 8010140:	6033      	str	r3, [r6, #0]
 8010142:	2000      	movs	r0, #0
 8010144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010146:	f000 ff07 	bl	8010f58 <__malloc_lock>
 801014a:	4921      	ldr	r1, [pc, #132]	; (80101d0 <_malloc_r+0xac>)
 801014c:	680a      	ldr	r2, [r1, #0]
 801014e:	4614      	mov	r4, r2
 8010150:	b99c      	cbnz	r4, 801017a <_malloc_r+0x56>
 8010152:	4f20      	ldr	r7, [pc, #128]	; (80101d4 <_malloc_r+0xb0>)
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	b923      	cbnz	r3, 8010162 <_malloc_r+0x3e>
 8010158:	4621      	mov	r1, r4
 801015a:	4630      	mov	r0, r6
 801015c:	f000 fc86 	bl	8010a6c <_sbrk_r>
 8010160:	6038      	str	r0, [r7, #0]
 8010162:	4629      	mov	r1, r5
 8010164:	4630      	mov	r0, r6
 8010166:	f000 fc81 	bl	8010a6c <_sbrk_r>
 801016a:	1c43      	adds	r3, r0, #1
 801016c:	d123      	bne.n	80101b6 <_malloc_r+0x92>
 801016e:	230c      	movs	r3, #12
 8010170:	6033      	str	r3, [r6, #0]
 8010172:	4630      	mov	r0, r6
 8010174:	f000 fef6 	bl	8010f64 <__malloc_unlock>
 8010178:	e7e3      	b.n	8010142 <_malloc_r+0x1e>
 801017a:	6823      	ldr	r3, [r4, #0]
 801017c:	1b5b      	subs	r3, r3, r5
 801017e:	d417      	bmi.n	80101b0 <_malloc_r+0x8c>
 8010180:	2b0b      	cmp	r3, #11
 8010182:	d903      	bls.n	801018c <_malloc_r+0x68>
 8010184:	6023      	str	r3, [r4, #0]
 8010186:	441c      	add	r4, r3
 8010188:	6025      	str	r5, [r4, #0]
 801018a:	e004      	b.n	8010196 <_malloc_r+0x72>
 801018c:	6863      	ldr	r3, [r4, #4]
 801018e:	42a2      	cmp	r2, r4
 8010190:	bf0c      	ite	eq
 8010192:	600b      	streq	r3, [r1, #0]
 8010194:	6053      	strne	r3, [r2, #4]
 8010196:	4630      	mov	r0, r6
 8010198:	f000 fee4 	bl	8010f64 <__malloc_unlock>
 801019c:	f104 000b 	add.w	r0, r4, #11
 80101a0:	1d23      	adds	r3, r4, #4
 80101a2:	f020 0007 	bic.w	r0, r0, #7
 80101a6:	1ac2      	subs	r2, r0, r3
 80101a8:	d0cc      	beq.n	8010144 <_malloc_r+0x20>
 80101aa:	1a1b      	subs	r3, r3, r0
 80101ac:	50a3      	str	r3, [r4, r2]
 80101ae:	e7c9      	b.n	8010144 <_malloc_r+0x20>
 80101b0:	4622      	mov	r2, r4
 80101b2:	6864      	ldr	r4, [r4, #4]
 80101b4:	e7cc      	b.n	8010150 <_malloc_r+0x2c>
 80101b6:	1cc4      	adds	r4, r0, #3
 80101b8:	f024 0403 	bic.w	r4, r4, #3
 80101bc:	42a0      	cmp	r0, r4
 80101be:	d0e3      	beq.n	8010188 <_malloc_r+0x64>
 80101c0:	1a21      	subs	r1, r4, r0
 80101c2:	4630      	mov	r0, r6
 80101c4:	f000 fc52 	bl	8010a6c <_sbrk_r>
 80101c8:	3001      	adds	r0, #1
 80101ca:	d1dd      	bne.n	8010188 <_malloc_r+0x64>
 80101cc:	e7cf      	b.n	801016e <_malloc_r+0x4a>
 80101ce:	bf00      	nop
 80101d0:	2000021c 	.word	0x2000021c
 80101d4:	20000220 	.word	0x20000220

080101d8 <__ssputs_r>:
 80101d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101dc:	688e      	ldr	r6, [r1, #8]
 80101de:	429e      	cmp	r6, r3
 80101e0:	4682      	mov	sl, r0
 80101e2:	460c      	mov	r4, r1
 80101e4:	4690      	mov	r8, r2
 80101e6:	461f      	mov	r7, r3
 80101e8:	d838      	bhi.n	801025c <__ssputs_r+0x84>
 80101ea:	898a      	ldrh	r2, [r1, #12]
 80101ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80101f0:	d032      	beq.n	8010258 <__ssputs_r+0x80>
 80101f2:	6825      	ldr	r5, [r4, #0]
 80101f4:	6909      	ldr	r1, [r1, #16]
 80101f6:	eba5 0901 	sub.w	r9, r5, r1
 80101fa:	6965      	ldr	r5, [r4, #20]
 80101fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010200:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010204:	3301      	adds	r3, #1
 8010206:	444b      	add	r3, r9
 8010208:	106d      	asrs	r5, r5, #1
 801020a:	429d      	cmp	r5, r3
 801020c:	bf38      	it	cc
 801020e:	461d      	movcc	r5, r3
 8010210:	0553      	lsls	r3, r2, #21
 8010212:	d531      	bpl.n	8010278 <__ssputs_r+0xa0>
 8010214:	4629      	mov	r1, r5
 8010216:	f7ff ff85 	bl	8010124 <_malloc_r>
 801021a:	4606      	mov	r6, r0
 801021c:	b950      	cbnz	r0, 8010234 <__ssputs_r+0x5c>
 801021e:	230c      	movs	r3, #12
 8010220:	f8ca 3000 	str.w	r3, [sl]
 8010224:	89a3      	ldrh	r3, [r4, #12]
 8010226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801022a:	81a3      	strh	r3, [r4, #12]
 801022c:	f04f 30ff 	mov.w	r0, #4294967295
 8010230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010234:	6921      	ldr	r1, [r4, #16]
 8010236:	464a      	mov	r2, r9
 8010238:	f7ff fd4c 	bl	800fcd4 <memcpy>
 801023c:	89a3      	ldrh	r3, [r4, #12]
 801023e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010246:	81a3      	strh	r3, [r4, #12]
 8010248:	6126      	str	r6, [r4, #16]
 801024a:	6165      	str	r5, [r4, #20]
 801024c:	444e      	add	r6, r9
 801024e:	eba5 0509 	sub.w	r5, r5, r9
 8010252:	6026      	str	r6, [r4, #0]
 8010254:	60a5      	str	r5, [r4, #8]
 8010256:	463e      	mov	r6, r7
 8010258:	42be      	cmp	r6, r7
 801025a:	d900      	bls.n	801025e <__ssputs_r+0x86>
 801025c:	463e      	mov	r6, r7
 801025e:	4632      	mov	r2, r6
 8010260:	6820      	ldr	r0, [r4, #0]
 8010262:	4641      	mov	r1, r8
 8010264:	f7ff fd44 	bl	800fcf0 <memmove>
 8010268:	68a3      	ldr	r3, [r4, #8]
 801026a:	6822      	ldr	r2, [r4, #0]
 801026c:	1b9b      	subs	r3, r3, r6
 801026e:	4432      	add	r2, r6
 8010270:	60a3      	str	r3, [r4, #8]
 8010272:	6022      	str	r2, [r4, #0]
 8010274:	2000      	movs	r0, #0
 8010276:	e7db      	b.n	8010230 <__ssputs_r+0x58>
 8010278:	462a      	mov	r2, r5
 801027a:	f000 fe79 	bl	8010f70 <_realloc_r>
 801027e:	4606      	mov	r6, r0
 8010280:	2800      	cmp	r0, #0
 8010282:	d1e1      	bne.n	8010248 <__ssputs_r+0x70>
 8010284:	6921      	ldr	r1, [r4, #16]
 8010286:	4650      	mov	r0, sl
 8010288:	f7ff fefc 	bl	8010084 <_free_r>
 801028c:	e7c7      	b.n	801021e <__ssputs_r+0x46>
	...

08010290 <_svfiprintf_r>:
 8010290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010294:	4698      	mov	r8, r3
 8010296:	898b      	ldrh	r3, [r1, #12]
 8010298:	061b      	lsls	r3, r3, #24
 801029a:	b09d      	sub	sp, #116	; 0x74
 801029c:	4607      	mov	r7, r0
 801029e:	460d      	mov	r5, r1
 80102a0:	4614      	mov	r4, r2
 80102a2:	d50e      	bpl.n	80102c2 <_svfiprintf_r+0x32>
 80102a4:	690b      	ldr	r3, [r1, #16]
 80102a6:	b963      	cbnz	r3, 80102c2 <_svfiprintf_r+0x32>
 80102a8:	2140      	movs	r1, #64	; 0x40
 80102aa:	f7ff ff3b 	bl	8010124 <_malloc_r>
 80102ae:	6028      	str	r0, [r5, #0]
 80102b0:	6128      	str	r0, [r5, #16]
 80102b2:	b920      	cbnz	r0, 80102be <_svfiprintf_r+0x2e>
 80102b4:	230c      	movs	r3, #12
 80102b6:	603b      	str	r3, [r7, #0]
 80102b8:	f04f 30ff 	mov.w	r0, #4294967295
 80102bc:	e0d1      	b.n	8010462 <_svfiprintf_r+0x1d2>
 80102be:	2340      	movs	r3, #64	; 0x40
 80102c0:	616b      	str	r3, [r5, #20]
 80102c2:	2300      	movs	r3, #0
 80102c4:	9309      	str	r3, [sp, #36]	; 0x24
 80102c6:	2320      	movs	r3, #32
 80102c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80102cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80102d0:	2330      	movs	r3, #48	; 0x30
 80102d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801047c <_svfiprintf_r+0x1ec>
 80102d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80102da:	f04f 0901 	mov.w	r9, #1
 80102de:	4623      	mov	r3, r4
 80102e0:	469a      	mov	sl, r3
 80102e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102e6:	b10a      	cbz	r2, 80102ec <_svfiprintf_r+0x5c>
 80102e8:	2a25      	cmp	r2, #37	; 0x25
 80102ea:	d1f9      	bne.n	80102e0 <_svfiprintf_r+0x50>
 80102ec:	ebba 0b04 	subs.w	fp, sl, r4
 80102f0:	d00b      	beq.n	801030a <_svfiprintf_r+0x7a>
 80102f2:	465b      	mov	r3, fp
 80102f4:	4622      	mov	r2, r4
 80102f6:	4629      	mov	r1, r5
 80102f8:	4638      	mov	r0, r7
 80102fa:	f7ff ff6d 	bl	80101d8 <__ssputs_r>
 80102fe:	3001      	adds	r0, #1
 8010300:	f000 80aa 	beq.w	8010458 <_svfiprintf_r+0x1c8>
 8010304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010306:	445a      	add	r2, fp
 8010308:	9209      	str	r2, [sp, #36]	; 0x24
 801030a:	f89a 3000 	ldrb.w	r3, [sl]
 801030e:	2b00      	cmp	r3, #0
 8010310:	f000 80a2 	beq.w	8010458 <_svfiprintf_r+0x1c8>
 8010314:	2300      	movs	r3, #0
 8010316:	f04f 32ff 	mov.w	r2, #4294967295
 801031a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801031e:	f10a 0a01 	add.w	sl, sl, #1
 8010322:	9304      	str	r3, [sp, #16]
 8010324:	9307      	str	r3, [sp, #28]
 8010326:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801032a:	931a      	str	r3, [sp, #104]	; 0x68
 801032c:	4654      	mov	r4, sl
 801032e:	2205      	movs	r2, #5
 8010330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010334:	4851      	ldr	r0, [pc, #324]	; (801047c <_svfiprintf_r+0x1ec>)
 8010336:	f7ef ff73 	bl	8000220 <memchr>
 801033a:	9a04      	ldr	r2, [sp, #16]
 801033c:	b9d8      	cbnz	r0, 8010376 <_svfiprintf_r+0xe6>
 801033e:	06d0      	lsls	r0, r2, #27
 8010340:	bf44      	itt	mi
 8010342:	2320      	movmi	r3, #32
 8010344:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010348:	0711      	lsls	r1, r2, #28
 801034a:	bf44      	itt	mi
 801034c:	232b      	movmi	r3, #43	; 0x2b
 801034e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010352:	f89a 3000 	ldrb.w	r3, [sl]
 8010356:	2b2a      	cmp	r3, #42	; 0x2a
 8010358:	d015      	beq.n	8010386 <_svfiprintf_r+0xf6>
 801035a:	9a07      	ldr	r2, [sp, #28]
 801035c:	4654      	mov	r4, sl
 801035e:	2000      	movs	r0, #0
 8010360:	f04f 0c0a 	mov.w	ip, #10
 8010364:	4621      	mov	r1, r4
 8010366:	f811 3b01 	ldrb.w	r3, [r1], #1
 801036a:	3b30      	subs	r3, #48	; 0x30
 801036c:	2b09      	cmp	r3, #9
 801036e:	d94e      	bls.n	801040e <_svfiprintf_r+0x17e>
 8010370:	b1b0      	cbz	r0, 80103a0 <_svfiprintf_r+0x110>
 8010372:	9207      	str	r2, [sp, #28]
 8010374:	e014      	b.n	80103a0 <_svfiprintf_r+0x110>
 8010376:	eba0 0308 	sub.w	r3, r0, r8
 801037a:	fa09 f303 	lsl.w	r3, r9, r3
 801037e:	4313      	orrs	r3, r2
 8010380:	9304      	str	r3, [sp, #16]
 8010382:	46a2      	mov	sl, r4
 8010384:	e7d2      	b.n	801032c <_svfiprintf_r+0x9c>
 8010386:	9b03      	ldr	r3, [sp, #12]
 8010388:	1d19      	adds	r1, r3, #4
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	9103      	str	r1, [sp, #12]
 801038e:	2b00      	cmp	r3, #0
 8010390:	bfbb      	ittet	lt
 8010392:	425b      	neglt	r3, r3
 8010394:	f042 0202 	orrlt.w	r2, r2, #2
 8010398:	9307      	strge	r3, [sp, #28]
 801039a:	9307      	strlt	r3, [sp, #28]
 801039c:	bfb8      	it	lt
 801039e:	9204      	strlt	r2, [sp, #16]
 80103a0:	7823      	ldrb	r3, [r4, #0]
 80103a2:	2b2e      	cmp	r3, #46	; 0x2e
 80103a4:	d10c      	bne.n	80103c0 <_svfiprintf_r+0x130>
 80103a6:	7863      	ldrb	r3, [r4, #1]
 80103a8:	2b2a      	cmp	r3, #42	; 0x2a
 80103aa:	d135      	bne.n	8010418 <_svfiprintf_r+0x188>
 80103ac:	9b03      	ldr	r3, [sp, #12]
 80103ae:	1d1a      	adds	r2, r3, #4
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	9203      	str	r2, [sp, #12]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	bfb8      	it	lt
 80103b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80103bc:	3402      	adds	r4, #2
 80103be:	9305      	str	r3, [sp, #20]
 80103c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801048c <_svfiprintf_r+0x1fc>
 80103c4:	7821      	ldrb	r1, [r4, #0]
 80103c6:	2203      	movs	r2, #3
 80103c8:	4650      	mov	r0, sl
 80103ca:	f7ef ff29 	bl	8000220 <memchr>
 80103ce:	b140      	cbz	r0, 80103e2 <_svfiprintf_r+0x152>
 80103d0:	2340      	movs	r3, #64	; 0x40
 80103d2:	eba0 000a 	sub.w	r0, r0, sl
 80103d6:	fa03 f000 	lsl.w	r0, r3, r0
 80103da:	9b04      	ldr	r3, [sp, #16]
 80103dc:	4303      	orrs	r3, r0
 80103de:	3401      	adds	r4, #1
 80103e0:	9304      	str	r3, [sp, #16]
 80103e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103e6:	4826      	ldr	r0, [pc, #152]	; (8010480 <_svfiprintf_r+0x1f0>)
 80103e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80103ec:	2206      	movs	r2, #6
 80103ee:	f7ef ff17 	bl	8000220 <memchr>
 80103f2:	2800      	cmp	r0, #0
 80103f4:	d038      	beq.n	8010468 <_svfiprintf_r+0x1d8>
 80103f6:	4b23      	ldr	r3, [pc, #140]	; (8010484 <_svfiprintf_r+0x1f4>)
 80103f8:	bb1b      	cbnz	r3, 8010442 <_svfiprintf_r+0x1b2>
 80103fa:	9b03      	ldr	r3, [sp, #12]
 80103fc:	3307      	adds	r3, #7
 80103fe:	f023 0307 	bic.w	r3, r3, #7
 8010402:	3308      	adds	r3, #8
 8010404:	9303      	str	r3, [sp, #12]
 8010406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010408:	4433      	add	r3, r6
 801040a:	9309      	str	r3, [sp, #36]	; 0x24
 801040c:	e767      	b.n	80102de <_svfiprintf_r+0x4e>
 801040e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010412:	460c      	mov	r4, r1
 8010414:	2001      	movs	r0, #1
 8010416:	e7a5      	b.n	8010364 <_svfiprintf_r+0xd4>
 8010418:	2300      	movs	r3, #0
 801041a:	3401      	adds	r4, #1
 801041c:	9305      	str	r3, [sp, #20]
 801041e:	4619      	mov	r1, r3
 8010420:	f04f 0c0a 	mov.w	ip, #10
 8010424:	4620      	mov	r0, r4
 8010426:	f810 2b01 	ldrb.w	r2, [r0], #1
 801042a:	3a30      	subs	r2, #48	; 0x30
 801042c:	2a09      	cmp	r2, #9
 801042e:	d903      	bls.n	8010438 <_svfiprintf_r+0x1a8>
 8010430:	2b00      	cmp	r3, #0
 8010432:	d0c5      	beq.n	80103c0 <_svfiprintf_r+0x130>
 8010434:	9105      	str	r1, [sp, #20]
 8010436:	e7c3      	b.n	80103c0 <_svfiprintf_r+0x130>
 8010438:	fb0c 2101 	mla	r1, ip, r1, r2
 801043c:	4604      	mov	r4, r0
 801043e:	2301      	movs	r3, #1
 8010440:	e7f0      	b.n	8010424 <_svfiprintf_r+0x194>
 8010442:	ab03      	add	r3, sp, #12
 8010444:	9300      	str	r3, [sp, #0]
 8010446:	462a      	mov	r2, r5
 8010448:	4b0f      	ldr	r3, [pc, #60]	; (8010488 <_svfiprintf_r+0x1f8>)
 801044a:	a904      	add	r1, sp, #16
 801044c:	4638      	mov	r0, r7
 801044e:	f3af 8000 	nop.w
 8010452:	1c42      	adds	r2, r0, #1
 8010454:	4606      	mov	r6, r0
 8010456:	d1d6      	bne.n	8010406 <_svfiprintf_r+0x176>
 8010458:	89ab      	ldrh	r3, [r5, #12]
 801045a:	065b      	lsls	r3, r3, #25
 801045c:	f53f af2c 	bmi.w	80102b8 <_svfiprintf_r+0x28>
 8010460:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010462:	b01d      	add	sp, #116	; 0x74
 8010464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010468:	ab03      	add	r3, sp, #12
 801046a:	9300      	str	r3, [sp, #0]
 801046c:	462a      	mov	r2, r5
 801046e:	4b06      	ldr	r3, [pc, #24]	; (8010488 <_svfiprintf_r+0x1f8>)
 8010470:	a904      	add	r1, sp, #16
 8010472:	4638      	mov	r0, r7
 8010474:	f000 f9d4 	bl	8010820 <_printf_i>
 8010478:	e7eb      	b.n	8010452 <_svfiprintf_r+0x1c2>
 801047a:	bf00      	nop
 801047c:	08013df0 	.word	0x08013df0
 8010480:	08013dfa 	.word	0x08013dfa
 8010484:	00000000 	.word	0x00000000
 8010488:	080101d9 	.word	0x080101d9
 801048c:	08013df6 	.word	0x08013df6

08010490 <__sfputc_r>:
 8010490:	6893      	ldr	r3, [r2, #8]
 8010492:	3b01      	subs	r3, #1
 8010494:	2b00      	cmp	r3, #0
 8010496:	b410      	push	{r4}
 8010498:	6093      	str	r3, [r2, #8]
 801049a:	da08      	bge.n	80104ae <__sfputc_r+0x1e>
 801049c:	6994      	ldr	r4, [r2, #24]
 801049e:	42a3      	cmp	r3, r4
 80104a0:	db01      	blt.n	80104a6 <__sfputc_r+0x16>
 80104a2:	290a      	cmp	r1, #10
 80104a4:	d103      	bne.n	80104ae <__sfputc_r+0x1e>
 80104a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104aa:	f000 bb33 	b.w	8010b14 <__swbuf_r>
 80104ae:	6813      	ldr	r3, [r2, #0]
 80104b0:	1c58      	adds	r0, r3, #1
 80104b2:	6010      	str	r0, [r2, #0]
 80104b4:	7019      	strb	r1, [r3, #0]
 80104b6:	4608      	mov	r0, r1
 80104b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104bc:	4770      	bx	lr

080104be <__sfputs_r>:
 80104be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104c0:	4606      	mov	r6, r0
 80104c2:	460f      	mov	r7, r1
 80104c4:	4614      	mov	r4, r2
 80104c6:	18d5      	adds	r5, r2, r3
 80104c8:	42ac      	cmp	r4, r5
 80104ca:	d101      	bne.n	80104d0 <__sfputs_r+0x12>
 80104cc:	2000      	movs	r0, #0
 80104ce:	e007      	b.n	80104e0 <__sfputs_r+0x22>
 80104d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104d4:	463a      	mov	r2, r7
 80104d6:	4630      	mov	r0, r6
 80104d8:	f7ff ffda 	bl	8010490 <__sfputc_r>
 80104dc:	1c43      	adds	r3, r0, #1
 80104de:	d1f3      	bne.n	80104c8 <__sfputs_r+0xa>
 80104e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080104e4 <_vfiprintf_r>:
 80104e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104e8:	460d      	mov	r5, r1
 80104ea:	b09d      	sub	sp, #116	; 0x74
 80104ec:	4614      	mov	r4, r2
 80104ee:	4698      	mov	r8, r3
 80104f0:	4606      	mov	r6, r0
 80104f2:	b118      	cbz	r0, 80104fc <_vfiprintf_r+0x18>
 80104f4:	6983      	ldr	r3, [r0, #24]
 80104f6:	b90b      	cbnz	r3, 80104fc <_vfiprintf_r+0x18>
 80104f8:	f7ff fd0a 	bl	800ff10 <__sinit>
 80104fc:	4b89      	ldr	r3, [pc, #548]	; (8010724 <_vfiprintf_r+0x240>)
 80104fe:	429d      	cmp	r5, r3
 8010500:	d11b      	bne.n	801053a <_vfiprintf_r+0x56>
 8010502:	6875      	ldr	r5, [r6, #4]
 8010504:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010506:	07d9      	lsls	r1, r3, #31
 8010508:	d405      	bmi.n	8010516 <_vfiprintf_r+0x32>
 801050a:	89ab      	ldrh	r3, [r5, #12]
 801050c:	059a      	lsls	r2, r3, #22
 801050e:	d402      	bmi.n	8010516 <_vfiprintf_r+0x32>
 8010510:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010512:	f7ff fdad 	bl	8010070 <__retarget_lock_acquire_recursive>
 8010516:	89ab      	ldrh	r3, [r5, #12]
 8010518:	071b      	lsls	r3, r3, #28
 801051a:	d501      	bpl.n	8010520 <_vfiprintf_r+0x3c>
 801051c:	692b      	ldr	r3, [r5, #16]
 801051e:	b9eb      	cbnz	r3, 801055c <_vfiprintf_r+0x78>
 8010520:	4629      	mov	r1, r5
 8010522:	4630      	mov	r0, r6
 8010524:	f000 fb5a 	bl	8010bdc <__swsetup_r>
 8010528:	b1c0      	cbz	r0, 801055c <_vfiprintf_r+0x78>
 801052a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801052c:	07dc      	lsls	r4, r3, #31
 801052e:	d50e      	bpl.n	801054e <_vfiprintf_r+0x6a>
 8010530:	f04f 30ff 	mov.w	r0, #4294967295
 8010534:	b01d      	add	sp, #116	; 0x74
 8010536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801053a:	4b7b      	ldr	r3, [pc, #492]	; (8010728 <_vfiprintf_r+0x244>)
 801053c:	429d      	cmp	r5, r3
 801053e:	d101      	bne.n	8010544 <_vfiprintf_r+0x60>
 8010540:	68b5      	ldr	r5, [r6, #8]
 8010542:	e7df      	b.n	8010504 <_vfiprintf_r+0x20>
 8010544:	4b79      	ldr	r3, [pc, #484]	; (801072c <_vfiprintf_r+0x248>)
 8010546:	429d      	cmp	r5, r3
 8010548:	bf08      	it	eq
 801054a:	68f5      	ldreq	r5, [r6, #12]
 801054c:	e7da      	b.n	8010504 <_vfiprintf_r+0x20>
 801054e:	89ab      	ldrh	r3, [r5, #12]
 8010550:	0598      	lsls	r0, r3, #22
 8010552:	d4ed      	bmi.n	8010530 <_vfiprintf_r+0x4c>
 8010554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010556:	f7ff fd8c 	bl	8010072 <__retarget_lock_release_recursive>
 801055a:	e7e9      	b.n	8010530 <_vfiprintf_r+0x4c>
 801055c:	2300      	movs	r3, #0
 801055e:	9309      	str	r3, [sp, #36]	; 0x24
 8010560:	2320      	movs	r3, #32
 8010562:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010566:	f8cd 800c 	str.w	r8, [sp, #12]
 801056a:	2330      	movs	r3, #48	; 0x30
 801056c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010730 <_vfiprintf_r+0x24c>
 8010570:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010574:	f04f 0901 	mov.w	r9, #1
 8010578:	4623      	mov	r3, r4
 801057a:	469a      	mov	sl, r3
 801057c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010580:	b10a      	cbz	r2, 8010586 <_vfiprintf_r+0xa2>
 8010582:	2a25      	cmp	r2, #37	; 0x25
 8010584:	d1f9      	bne.n	801057a <_vfiprintf_r+0x96>
 8010586:	ebba 0b04 	subs.w	fp, sl, r4
 801058a:	d00b      	beq.n	80105a4 <_vfiprintf_r+0xc0>
 801058c:	465b      	mov	r3, fp
 801058e:	4622      	mov	r2, r4
 8010590:	4629      	mov	r1, r5
 8010592:	4630      	mov	r0, r6
 8010594:	f7ff ff93 	bl	80104be <__sfputs_r>
 8010598:	3001      	adds	r0, #1
 801059a:	f000 80aa 	beq.w	80106f2 <_vfiprintf_r+0x20e>
 801059e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80105a0:	445a      	add	r2, fp
 80105a2:	9209      	str	r2, [sp, #36]	; 0x24
 80105a4:	f89a 3000 	ldrb.w	r3, [sl]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	f000 80a2 	beq.w	80106f2 <_vfiprintf_r+0x20e>
 80105ae:	2300      	movs	r3, #0
 80105b0:	f04f 32ff 	mov.w	r2, #4294967295
 80105b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105b8:	f10a 0a01 	add.w	sl, sl, #1
 80105bc:	9304      	str	r3, [sp, #16]
 80105be:	9307      	str	r3, [sp, #28]
 80105c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80105c4:	931a      	str	r3, [sp, #104]	; 0x68
 80105c6:	4654      	mov	r4, sl
 80105c8:	2205      	movs	r2, #5
 80105ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105ce:	4858      	ldr	r0, [pc, #352]	; (8010730 <_vfiprintf_r+0x24c>)
 80105d0:	f7ef fe26 	bl	8000220 <memchr>
 80105d4:	9a04      	ldr	r2, [sp, #16]
 80105d6:	b9d8      	cbnz	r0, 8010610 <_vfiprintf_r+0x12c>
 80105d8:	06d1      	lsls	r1, r2, #27
 80105da:	bf44      	itt	mi
 80105dc:	2320      	movmi	r3, #32
 80105de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80105e2:	0713      	lsls	r3, r2, #28
 80105e4:	bf44      	itt	mi
 80105e6:	232b      	movmi	r3, #43	; 0x2b
 80105e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80105ec:	f89a 3000 	ldrb.w	r3, [sl]
 80105f0:	2b2a      	cmp	r3, #42	; 0x2a
 80105f2:	d015      	beq.n	8010620 <_vfiprintf_r+0x13c>
 80105f4:	9a07      	ldr	r2, [sp, #28]
 80105f6:	4654      	mov	r4, sl
 80105f8:	2000      	movs	r0, #0
 80105fa:	f04f 0c0a 	mov.w	ip, #10
 80105fe:	4621      	mov	r1, r4
 8010600:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010604:	3b30      	subs	r3, #48	; 0x30
 8010606:	2b09      	cmp	r3, #9
 8010608:	d94e      	bls.n	80106a8 <_vfiprintf_r+0x1c4>
 801060a:	b1b0      	cbz	r0, 801063a <_vfiprintf_r+0x156>
 801060c:	9207      	str	r2, [sp, #28]
 801060e:	e014      	b.n	801063a <_vfiprintf_r+0x156>
 8010610:	eba0 0308 	sub.w	r3, r0, r8
 8010614:	fa09 f303 	lsl.w	r3, r9, r3
 8010618:	4313      	orrs	r3, r2
 801061a:	9304      	str	r3, [sp, #16]
 801061c:	46a2      	mov	sl, r4
 801061e:	e7d2      	b.n	80105c6 <_vfiprintf_r+0xe2>
 8010620:	9b03      	ldr	r3, [sp, #12]
 8010622:	1d19      	adds	r1, r3, #4
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	9103      	str	r1, [sp, #12]
 8010628:	2b00      	cmp	r3, #0
 801062a:	bfbb      	ittet	lt
 801062c:	425b      	neglt	r3, r3
 801062e:	f042 0202 	orrlt.w	r2, r2, #2
 8010632:	9307      	strge	r3, [sp, #28]
 8010634:	9307      	strlt	r3, [sp, #28]
 8010636:	bfb8      	it	lt
 8010638:	9204      	strlt	r2, [sp, #16]
 801063a:	7823      	ldrb	r3, [r4, #0]
 801063c:	2b2e      	cmp	r3, #46	; 0x2e
 801063e:	d10c      	bne.n	801065a <_vfiprintf_r+0x176>
 8010640:	7863      	ldrb	r3, [r4, #1]
 8010642:	2b2a      	cmp	r3, #42	; 0x2a
 8010644:	d135      	bne.n	80106b2 <_vfiprintf_r+0x1ce>
 8010646:	9b03      	ldr	r3, [sp, #12]
 8010648:	1d1a      	adds	r2, r3, #4
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	9203      	str	r2, [sp, #12]
 801064e:	2b00      	cmp	r3, #0
 8010650:	bfb8      	it	lt
 8010652:	f04f 33ff 	movlt.w	r3, #4294967295
 8010656:	3402      	adds	r4, #2
 8010658:	9305      	str	r3, [sp, #20]
 801065a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010740 <_vfiprintf_r+0x25c>
 801065e:	7821      	ldrb	r1, [r4, #0]
 8010660:	2203      	movs	r2, #3
 8010662:	4650      	mov	r0, sl
 8010664:	f7ef fddc 	bl	8000220 <memchr>
 8010668:	b140      	cbz	r0, 801067c <_vfiprintf_r+0x198>
 801066a:	2340      	movs	r3, #64	; 0x40
 801066c:	eba0 000a 	sub.w	r0, r0, sl
 8010670:	fa03 f000 	lsl.w	r0, r3, r0
 8010674:	9b04      	ldr	r3, [sp, #16]
 8010676:	4303      	orrs	r3, r0
 8010678:	3401      	adds	r4, #1
 801067a:	9304      	str	r3, [sp, #16]
 801067c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010680:	482c      	ldr	r0, [pc, #176]	; (8010734 <_vfiprintf_r+0x250>)
 8010682:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010686:	2206      	movs	r2, #6
 8010688:	f7ef fdca 	bl	8000220 <memchr>
 801068c:	2800      	cmp	r0, #0
 801068e:	d03f      	beq.n	8010710 <_vfiprintf_r+0x22c>
 8010690:	4b29      	ldr	r3, [pc, #164]	; (8010738 <_vfiprintf_r+0x254>)
 8010692:	bb1b      	cbnz	r3, 80106dc <_vfiprintf_r+0x1f8>
 8010694:	9b03      	ldr	r3, [sp, #12]
 8010696:	3307      	adds	r3, #7
 8010698:	f023 0307 	bic.w	r3, r3, #7
 801069c:	3308      	adds	r3, #8
 801069e:	9303      	str	r3, [sp, #12]
 80106a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106a2:	443b      	add	r3, r7
 80106a4:	9309      	str	r3, [sp, #36]	; 0x24
 80106a6:	e767      	b.n	8010578 <_vfiprintf_r+0x94>
 80106a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80106ac:	460c      	mov	r4, r1
 80106ae:	2001      	movs	r0, #1
 80106b0:	e7a5      	b.n	80105fe <_vfiprintf_r+0x11a>
 80106b2:	2300      	movs	r3, #0
 80106b4:	3401      	adds	r4, #1
 80106b6:	9305      	str	r3, [sp, #20]
 80106b8:	4619      	mov	r1, r3
 80106ba:	f04f 0c0a 	mov.w	ip, #10
 80106be:	4620      	mov	r0, r4
 80106c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106c4:	3a30      	subs	r2, #48	; 0x30
 80106c6:	2a09      	cmp	r2, #9
 80106c8:	d903      	bls.n	80106d2 <_vfiprintf_r+0x1ee>
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d0c5      	beq.n	801065a <_vfiprintf_r+0x176>
 80106ce:	9105      	str	r1, [sp, #20]
 80106d0:	e7c3      	b.n	801065a <_vfiprintf_r+0x176>
 80106d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80106d6:	4604      	mov	r4, r0
 80106d8:	2301      	movs	r3, #1
 80106da:	e7f0      	b.n	80106be <_vfiprintf_r+0x1da>
 80106dc:	ab03      	add	r3, sp, #12
 80106de:	9300      	str	r3, [sp, #0]
 80106e0:	462a      	mov	r2, r5
 80106e2:	4b16      	ldr	r3, [pc, #88]	; (801073c <_vfiprintf_r+0x258>)
 80106e4:	a904      	add	r1, sp, #16
 80106e6:	4630      	mov	r0, r6
 80106e8:	f3af 8000 	nop.w
 80106ec:	4607      	mov	r7, r0
 80106ee:	1c78      	adds	r0, r7, #1
 80106f0:	d1d6      	bne.n	80106a0 <_vfiprintf_r+0x1bc>
 80106f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80106f4:	07d9      	lsls	r1, r3, #31
 80106f6:	d405      	bmi.n	8010704 <_vfiprintf_r+0x220>
 80106f8:	89ab      	ldrh	r3, [r5, #12]
 80106fa:	059a      	lsls	r2, r3, #22
 80106fc:	d402      	bmi.n	8010704 <_vfiprintf_r+0x220>
 80106fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010700:	f7ff fcb7 	bl	8010072 <__retarget_lock_release_recursive>
 8010704:	89ab      	ldrh	r3, [r5, #12]
 8010706:	065b      	lsls	r3, r3, #25
 8010708:	f53f af12 	bmi.w	8010530 <_vfiprintf_r+0x4c>
 801070c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801070e:	e711      	b.n	8010534 <_vfiprintf_r+0x50>
 8010710:	ab03      	add	r3, sp, #12
 8010712:	9300      	str	r3, [sp, #0]
 8010714:	462a      	mov	r2, r5
 8010716:	4b09      	ldr	r3, [pc, #36]	; (801073c <_vfiprintf_r+0x258>)
 8010718:	a904      	add	r1, sp, #16
 801071a:	4630      	mov	r0, r6
 801071c:	f000 f880 	bl	8010820 <_printf_i>
 8010720:	e7e4      	b.n	80106ec <_vfiprintf_r+0x208>
 8010722:	bf00      	nop
 8010724:	08013db0 	.word	0x08013db0
 8010728:	08013dd0 	.word	0x08013dd0
 801072c:	08013d90 	.word	0x08013d90
 8010730:	08013df0 	.word	0x08013df0
 8010734:	08013dfa 	.word	0x08013dfa
 8010738:	00000000 	.word	0x00000000
 801073c:	080104bf 	.word	0x080104bf
 8010740:	08013df6 	.word	0x08013df6

08010744 <_printf_common>:
 8010744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010748:	4616      	mov	r6, r2
 801074a:	4699      	mov	r9, r3
 801074c:	688a      	ldr	r2, [r1, #8]
 801074e:	690b      	ldr	r3, [r1, #16]
 8010750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010754:	4293      	cmp	r3, r2
 8010756:	bfb8      	it	lt
 8010758:	4613      	movlt	r3, r2
 801075a:	6033      	str	r3, [r6, #0]
 801075c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010760:	4607      	mov	r7, r0
 8010762:	460c      	mov	r4, r1
 8010764:	b10a      	cbz	r2, 801076a <_printf_common+0x26>
 8010766:	3301      	adds	r3, #1
 8010768:	6033      	str	r3, [r6, #0]
 801076a:	6823      	ldr	r3, [r4, #0]
 801076c:	0699      	lsls	r1, r3, #26
 801076e:	bf42      	ittt	mi
 8010770:	6833      	ldrmi	r3, [r6, #0]
 8010772:	3302      	addmi	r3, #2
 8010774:	6033      	strmi	r3, [r6, #0]
 8010776:	6825      	ldr	r5, [r4, #0]
 8010778:	f015 0506 	ands.w	r5, r5, #6
 801077c:	d106      	bne.n	801078c <_printf_common+0x48>
 801077e:	f104 0a19 	add.w	sl, r4, #25
 8010782:	68e3      	ldr	r3, [r4, #12]
 8010784:	6832      	ldr	r2, [r6, #0]
 8010786:	1a9b      	subs	r3, r3, r2
 8010788:	42ab      	cmp	r3, r5
 801078a:	dc26      	bgt.n	80107da <_printf_common+0x96>
 801078c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010790:	1e13      	subs	r3, r2, #0
 8010792:	6822      	ldr	r2, [r4, #0]
 8010794:	bf18      	it	ne
 8010796:	2301      	movne	r3, #1
 8010798:	0692      	lsls	r2, r2, #26
 801079a:	d42b      	bmi.n	80107f4 <_printf_common+0xb0>
 801079c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80107a0:	4649      	mov	r1, r9
 80107a2:	4638      	mov	r0, r7
 80107a4:	47c0      	blx	r8
 80107a6:	3001      	adds	r0, #1
 80107a8:	d01e      	beq.n	80107e8 <_printf_common+0xa4>
 80107aa:	6823      	ldr	r3, [r4, #0]
 80107ac:	68e5      	ldr	r5, [r4, #12]
 80107ae:	6832      	ldr	r2, [r6, #0]
 80107b0:	f003 0306 	and.w	r3, r3, #6
 80107b4:	2b04      	cmp	r3, #4
 80107b6:	bf08      	it	eq
 80107b8:	1aad      	subeq	r5, r5, r2
 80107ba:	68a3      	ldr	r3, [r4, #8]
 80107bc:	6922      	ldr	r2, [r4, #16]
 80107be:	bf0c      	ite	eq
 80107c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80107c4:	2500      	movne	r5, #0
 80107c6:	4293      	cmp	r3, r2
 80107c8:	bfc4      	itt	gt
 80107ca:	1a9b      	subgt	r3, r3, r2
 80107cc:	18ed      	addgt	r5, r5, r3
 80107ce:	2600      	movs	r6, #0
 80107d0:	341a      	adds	r4, #26
 80107d2:	42b5      	cmp	r5, r6
 80107d4:	d11a      	bne.n	801080c <_printf_common+0xc8>
 80107d6:	2000      	movs	r0, #0
 80107d8:	e008      	b.n	80107ec <_printf_common+0xa8>
 80107da:	2301      	movs	r3, #1
 80107dc:	4652      	mov	r2, sl
 80107de:	4649      	mov	r1, r9
 80107e0:	4638      	mov	r0, r7
 80107e2:	47c0      	blx	r8
 80107e4:	3001      	adds	r0, #1
 80107e6:	d103      	bne.n	80107f0 <_printf_common+0xac>
 80107e8:	f04f 30ff 	mov.w	r0, #4294967295
 80107ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107f0:	3501      	adds	r5, #1
 80107f2:	e7c6      	b.n	8010782 <_printf_common+0x3e>
 80107f4:	18e1      	adds	r1, r4, r3
 80107f6:	1c5a      	adds	r2, r3, #1
 80107f8:	2030      	movs	r0, #48	; 0x30
 80107fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80107fe:	4422      	add	r2, r4
 8010800:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010804:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010808:	3302      	adds	r3, #2
 801080a:	e7c7      	b.n	801079c <_printf_common+0x58>
 801080c:	2301      	movs	r3, #1
 801080e:	4622      	mov	r2, r4
 8010810:	4649      	mov	r1, r9
 8010812:	4638      	mov	r0, r7
 8010814:	47c0      	blx	r8
 8010816:	3001      	adds	r0, #1
 8010818:	d0e6      	beq.n	80107e8 <_printf_common+0xa4>
 801081a:	3601      	adds	r6, #1
 801081c:	e7d9      	b.n	80107d2 <_printf_common+0x8e>
	...

08010820 <_printf_i>:
 8010820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010824:	460c      	mov	r4, r1
 8010826:	4691      	mov	r9, r2
 8010828:	7e27      	ldrb	r7, [r4, #24]
 801082a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801082c:	2f78      	cmp	r7, #120	; 0x78
 801082e:	4680      	mov	r8, r0
 8010830:	469a      	mov	sl, r3
 8010832:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010836:	d807      	bhi.n	8010848 <_printf_i+0x28>
 8010838:	2f62      	cmp	r7, #98	; 0x62
 801083a:	d80a      	bhi.n	8010852 <_printf_i+0x32>
 801083c:	2f00      	cmp	r7, #0
 801083e:	f000 80d8 	beq.w	80109f2 <_printf_i+0x1d2>
 8010842:	2f58      	cmp	r7, #88	; 0x58
 8010844:	f000 80a3 	beq.w	801098e <_printf_i+0x16e>
 8010848:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801084c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010850:	e03a      	b.n	80108c8 <_printf_i+0xa8>
 8010852:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010856:	2b15      	cmp	r3, #21
 8010858:	d8f6      	bhi.n	8010848 <_printf_i+0x28>
 801085a:	a001      	add	r0, pc, #4	; (adr r0, 8010860 <_printf_i+0x40>)
 801085c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010860:	080108b9 	.word	0x080108b9
 8010864:	080108cd 	.word	0x080108cd
 8010868:	08010849 	.word	0x08010849
 801086c:	08010849 	.word	0x08010849
 8010870:	08010849 	.word	0x08010849
 8010874:	08010849 	.word	0x08010849
 8010878:	080108cd 	.word	0x080108cd
 801087c:	08010849 	.word	0x08010849
 8010880:	08010849 	.word	0x08010849
 8010884:	08010849 	.word	0x08010849
 8010888:	08010849 	.word	0x08010849
 801088c:	080109d9 	.word	0x080109d9
 8010890:	080108fd 	.word	0x080108fd
 8010894:	080109bb 	.word	0x080109bb
 8010898:	08010849 	.word	0x08010849
 801089c:	08010849 	.word	0x08010849
 80108a0:	080109fb 	.word	0x080109fb
 80108a4:	08010849 	.word	0x08010849
 80108a8:	080108fd 	.word	0x080108fd
 80108ac:	08010849 	.word	0x08010849
 80108b0:	08010849 	.word	0x08010849
 80108b4:	080109c3 	.word	0x080109c3
 80108b8:	680b      	ldr	r3, [r1, #0]
 80108ba:	1d1a      	adds	r2, r3, #4
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	600a      	str	r2, [r1, #0]
 80108c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80108c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80108c8:	2301      	movs	r3, #1
 80108ca:	e0a3      	b.n	8010a14 <_printf_i+0x1f4>
 80108cc:	6825      	ldr	r5, [r4, #0]
 80108ce:	6808      	ldr	r0, [r1, #0]
 80108d0:	062e      	lsls	r6, r5, #24
 80108d2:	f100 0304 	add.w	r3, r0, #4
 80108d6:	d50a      	bpl.n	80108ee <_printf_i+0xce>
 80108d8:	6805      	ldr	r5, [r0, #0]
 80108da:	600b      	str	r3, [r1, #0]
 80108dc:	2d00      	cmp	r5, #0
 80108de:	da03      	bge.n	80108e8 <_printf_i+0xc8>
 80108e0:	232d      	movs	r3, #45	; 0x2d
 80108e2:	426d      	negs	r5, r5
 80108e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80108e8:	485e      	ldr	r0, [pc, #376]	; (8010a64 <_printf_i+0x244>)
 80108ea:	230a      	movs	r3, #10
 80108ec:	e019      	b.n	8010922 <_printf_i+0x102>
 80108ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80108f2:	6805      	ldr	r5, [r0, #0]
 80108f4:	600b      	str	r3, [r1, #0]
 80108f6:	bf18      	it	ne
 80108f8:	b22d      	sxthne	r5, r5
 80108fa:	e7ef      	b.n	80108dc <_printf_i+0xbc>
 80108fc:	680b      	ldr	r3, [r1, #0]
 80108fe:	6825      	ldr	r5, [r4, #0]
 8010900:	1d18      	adds	r0, r3, #4
 8010902:	6008      	str	r0, [r1, #0]
 8010904:	0628      	lsls	r0, r5, #24
 8010906:	d501      	bpl.n	801090c <_printf_i+0xec>
 8010908:	681d      	ldr	r5, [r3, #0]
 801090a:	e002      	b.n	8010912 <_printf_i+0xf2>
 801090c:	0669      	lsls	r1, r5, #25
 801090e:	d5fb      	bpl.n	8010908 <_printf_i+0xe8>
 8010910:	881d      	ldrh	r5, [r3, #0]
 8010912:	4854      	ldr	r0, [pc, #336]	; (8010a64 <_printf_i+0x244>)
 8010914:	2f6f      	cmp	r7, #111	; 0x6f
 8010916:	bf0c      	ite	eq
 8010918:	2308      	moveq	r3, #8
 801091a:	230a      	movne	r3, #10
 801091c:	2100      	movs	r1, #0
 801091e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010922:	6866      	ldr	r6, [r4, #4]
 8010924:	60a6      	str	r6, [r4, #8]
 8010926:	2e00      	cmp	r6, #0
 8010928:	bfa2      	ittt	ge
 801092a:	6821      	ldrge	r1, [r4, #0]
 801092c:	f021 0104 	bicge.w	r1, r1, #4
 8010930:	6021      	strge	r1, [r4, #0]
 8010932:	b90d      	cbnz	r5, 8010938 <_printf_i+0x118>
 8010934:	2e00      	cmp	r6, #0
 8010936:	d04d      	beq.n	80109d4 <_printf_i+0x1b4>
 8010938:	4616      	mov	r6, r2
 801093a:	fbb5 f1f3 	udiv	r1, r5, r3
 801093e:	fb03 5711 	mls	r7, r3, r1, r5
 8010942:	5dc7      	ldrb	r7, [r0, r7]
 8010944:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010948:	462f      	mov	r7, r5
 801094a:	42bb      	cmp	r3, r7
 801094c:	460d      	mov	r5, r1
 801094e:	d9f4      	bls.n	801093a <_printf_i+0x11a>
 8010950:	2b08      	cmp	r3, #8
 8010952:	d10b      	bne.n	801096c <_printf_i+0x14c>
 8010954:	6823      	ldr	r3, [r4, #0]
 8010956:	07df      	lsls	r7, r3, #31
 8010958:	d508      	bpl.n	801096c <_printf_i+0x14c>
 801095a:	6923      	ldr	r3, [r4, #16]
 801095c:	6861      	ldr	r1, [r4, #4]
 801095e:	4299      	cmp	r1, r3
 8010960:	bfde      	ittt	le
 8010962:	2330      	movle	r3, #48	; 0x30
 8010964:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010968:	f106 36ff 	addle.w	r6, r6, #4294967295
 801096c:	1b92      	subs	r2, r2, r6
 801096e:	6122      	str	r2, [r4, #16]
 8010970:	f8cd a000 	str.w	sl, [sp]
 8010974:	464b      	mov	r3, r9
 8010976:	aa03      	add	r2, sp, #12
 8010978:	4621      	mov	r1, r4
 801097a:	4640      	mov	r0, r8
 801097c:	f7ff fee2 	bl	8010744 <_printf_common>
 8010980:	3001      	adds	r0, #1
 8010982:	d14c      	bne.n	8010a1e <_printf_i+0x1fe>
 8010984:	f04f 30ff 	mov.w	r0, #4294967295
 8010988:	b004      	add	sp, #16
 801098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801098e:	4835      	ldr	r0, [pc, #212]	; (8010a64 <_printf_i+0x244>)
 8010990:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010994:	6823      	ldr	r3, [r4, #0]
 8010996:	680e      	ldr	r6, [r1, #0]
 8010998:	061f      	lsls	r7, r3, #24
 801099a:	f856 5b04 	ldr.w	r5, [r6], #4
 801099e:	600e      	str	r6, [r1, #0]
 80109a0:	d514      	bpl.n	80109cc <_printf_i+0x1ac>
 80109a2:	07d9      	lsls	r1, r3, #31
 80109a4:	bf44      	itt	mi
 80109a6:	f043 0320 	orrmi.w	r3, r3, #32
 80109aa:	6023      	strmi	r3, [r4, #0]
 80109ac:	b91d      	cbnz	r5, 80109b6 <_printf_i+0x196>
 80109ae:	6823      	ldr	r3, [r4, #0]
 80109b0:	f023 0320 	bic.w	r3, r3, #32
 80109b4:	6023      	str	r3, [r4, #0]
 80109b6:	2310      	movs	r3, #16
 80109b8:	e7b0      	b.n	801091c <_printf_i+0xfc>
 80109ba:	6823      	ldr	r3, [r4, #0]
 80109bc:	f043 0320 	orr.w	r3, r3, #32
 80109c0:	6023      	str	r3, [r4, #0]
 80109c2:	2378      	movs	r3, #120	; 0x78
 80109c4:	4828      	ldr	r0, [pc, #160]	; (8010a68 <_printf_i+0x248>)
 80109c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80109ca:	e7e3      	b.n	8010994 <_printf_i+0x174>
 80109cc:	065e      	lsls	r6, r3, #25
 80109ce:	bf48      	it	mi
 80109d0:	b2ad      	uxthmi	r5, r5
 80109d2:	e7e6      	b.n	80109a2 <_printf_i+0x182>
 80109d4:	4616      	mov	r6, r2
 80109d6:	e7bb      	b.n	8010950 <_printf_i+0x130>
 80109d8:	680b      	ldr	r3, [r1, #0]
 80109da:	6826      	ldr	r6, [r4, #0]
 80109dc:	6960      	ldr	r0, [r4, #20]
 80109de:	1d1d      	adds	r5, r3, #4
 80109e0:	600d      	str	r5, [r1, #0]
 80109e2:	0635      	lsls	r5, r6, #24
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	d501      	bpl.n	80109ec <_printf_i+0x1cc>
 80109e8:	6018      	str	r0, [r3, #0]
 80109ea:	e002      	b.n	80109f2 <_printf_i+0x1d2>
 80109ec:	0671      	lsls	r1, r6, #25
 80109ee:	d5fb      	bpl.n	80109e8 <_printf_i+0x1c8>
 80109f0:	8018      	strh	r0, [r3, #0]
 80109f2:	2300      	movs	r3, #0
 80109f4:	6123      	str	r3, [r4, #16]
 80109f6:	4616      	mov	r6, r2
 80109f8:	e7ba      	b.n	8010970 <_printf_i+0x150>
 80109fa:	680b      	ldr	r3, [r1, #0]
 80109fc:	1d1a      	adds	r2, r3, #4
 80109fe:	600a      	str	r2, [r1, #0]
 8010a00:	681e      	ldr	r6, [r3, #0]
 8010a02:	6862      	ldr	r2, [r4, #4]
 8010a04:	2100      	movs	r1, #0
 8010a06:	4630      	mov	r0, r6
 8010a08:	f7ef fc0a 	bl	8000220 <memchr>
 8010a0c:	b108      	cbz	r0, 8010a12 <_printf_i+0x1f2>
 8010a0e:	1b80      	subs	r0, r0, r6
 8010a10:	6060      	str	r0, [r4, #4]
 8010a12:	6863      	ldr	r3, [r4, #4]
 8010a14:	6123      	str	r3, [r4, #16]
 8010a16:	2300      	movs	r3, #0
 8010a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a1c:	e7a8      	b.n	8010970 <_printf_i+0x150>
 8010a1e:	6923      	ldr	r3, [r4, #16]
 8010a20:	4632      	mov	r2, r6
 8010a22:	4649      	mov	r1, r9
 8010a24:	4640      	mov	r0, r8
 8010a26:	47d0      	blx	sl
 8010a28:	3001      	adds	r0, #1
 8010a2a:	d0ab      	beq.n	8010984 <_printf_i+0x164>
 8010a2c:	6823      	ldr	r3, [r4, #0]
 8010a2e:	079b      	lsls	r3, r3, #30
 8010a30:	d413      	bmi.n	8010a5a <_printf_i+0x23a>
 8010a32:	68e0      	ldr	r0, [r4, #12]
 8010a34:	9b03      	ldr	r3, [sp, #12]
 8010a36:	4298      	cmp	r0, r3
 8010a38:	bfb8      	it	lt
 8010a3a:	4618      	movlt	r0, r3
 8010a3c:	e7a4      	b.n	8010988 <_printf_i+0x168>
 8010a3e:	2301      	movs	r3, #1
 8010a40:	4632      	mov	r2, r6
 8010a42:	4649      	mov	r1, r9
 8010a44:	4640      	mov	r0, r8
 8010a46:	47d0      	blx	sl
 8010a48:	3001      	adds	r0, #1
 8010a4a:	d09b      	beq.n	8010984 <_printf_i+0x164>
 8010a4c:	3501      	adds	r5, #1
 8010a4e:	68e3      	ldr	r3, [r4, #12]
 8010a50:	9903      	ldr	r1, [sp, #12]
 8010a52:	1a5b      	subs	r3, r3, r1
 8010a54:	42ab      	cmp	r3, r5
 8010a56:	dcf2      	bgt.n	8010a3e <_printf_i+0x21e>
 8010a58:	e7eb      	b.n	8010a32 <_printf_i+0x212>
 8010a5a:	2500      	movs	r5, #0
 8010a5c:	f104 0619 	add.w	r6, r4, #25
 8010a60:	e7f5      	b.n	8010a4e <_printf_i+0x22e>
 8010a62:	bf00      	nop
 8010a64:	08013e01 	.word	0x08013e01
 8010a68:	08013e12 	.word	0x08013e12

08010a6c <_sbrk_r>:
 8010a6c:	b538      	push	{r3, r4, r5, lr}
 8010a6e:	4d06      	ldr	r5, [pc, #24]	; (8010a88 <_sbrk_r+0x1c>)
 8010a70:	2300      	movs	r3, #0
 8010a72:	4604      	mov	r4, r0
 8010a74:	4608      	mov	r0, r1
 8010a76:	602b      	str	r3, [r5, #0]
 8010a78:	f7f0 fb7e 	bl	8001178 <_sbrk>
 8010a7c:	1c43      	adds	r3, r0, #1
 8010a7e:	d102      	bne.n	8010a86 <_sbrk_r+0x1a>
 8010a80:	682b      	ldr	r3, [r5, #0]
 8010a82:	b103      	cbz	r3, 8010a86 <_sbrk_r+0x1a>
 8010a84:	6023      	str	r3, [r4, #0]
 8010a86:	bd38      	pop	{r3, r4, r5, pc}
 8010a88:	20006a48 	.word	0x20006a48

08010a8c <__sread>:
 8010a8c:	b510      	push	{r4, lr}
 8010a8e:	460c      	mov	r4, r1
 8010a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a94:	f000 fa92 	bl	8010fbc <_read_r>
 8010a98:	2800      	cmp	r0, #0
 8010a9a:	bfab      	itete	ge
 8010a9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010a9e:	89a3      	ldrhlt	r3, [r4, #12]
 8010aa0:	181b      	addge	r3, r3, r0
 8010aa2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010aa6:	bfac      	ite	ge
 8010aa8:	6563      	strge	r3, [r4, #84]	; 0x54
 8010aaa:	81a3      	strhlt	r3, [r4, #12]
 8010aac:	bd10      	pop	{r4, pc}

08010aae <__swrite>:
 8010aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ab2:	461f      	mov	r7, r3
 8010ab4:	898b      	ldrh	r3, [r1, #12]
 8010ab6:	05db      	lsls	r3, r3, #23
 8010ab8:	4605      	mov	r5, r0
 8010aba:	460c      	mov	r4, r1
 8010abc:	4616      	mov	r6, r2
 8010abe:	d505      	bpl.n	8010acc <__swrite+0x1e>
 8010ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ac4:	2302      	movs	r3, #2
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	f000 f9d0 	bl	8010e6c <_lseek_r>
 8010acc:	89a3      	ldrh	r3, [r4, #12]
 8010ace:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ad2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010ad6:	81a3      	strh	r3, [r4, #12]
 8010ad8:	4632      	mov	r2, r6
 8010ada:	463b      	mov	r3, r7
 8010adc:	4628      	mov	r0, r5
 8010ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ae2:	f000 b869 	b.w	8010bb8 <_write_r>

08010ae6 <__sseek>:
 8010ae6:	b510      	push	{r4, lr}
 8010ae8:	460c      	mov	r4, r1
 8010aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010aee:	f000 f9bd 	bl	8010e6c <_lseek_r>
 8010af2:	1c43      	adds	r3, r0, #1
 8010af4:	89a3      	ldrh	r3, [r4, #12]
 8010af6:	bf15      	itete	ne
 8010af8:	6560      	strne	r0, [r4, #84]	; 0x54
 8010afa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010afe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010b02:	81a3      	strheq	r3, [r4, #12]
 8010b04:	bf18      	it	ne
 8010b06:	81a3      	strhne	r3, [r4, #12]
 8010b08:	bd10      	pop	{r4, pc}

08010b0a <__sclose>:
 8010b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b0e:	f000 b8db 	b.w	8010cc8 <_close_r>
	...

08010b14 <__swbuf_r>:
 8010b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b16:	460e      	mov	r6, r1
 8010b18:	4614      	mov	r4, r2
 8010b1a:	4605      	mov	r5, r0
 8010b1c:	b118      	cbz	r0, 8010b26 <__swbuf_r+0x12>
 8010b1e:	6983      	ldr	r3, [r0, #24]
 8010b20:	b90b      	cbnz	r3, 8010b26 <__swbuf_r+0x12>
 8010b22:	f7ff f9f5 	bl	800ff10 <__sinit>
 8010b26:	4b21      	ldr	r3, [pc, #132]	; (8010bac <__swbuf_r+0x98>)
 8010b28:	429c      	cmp	r4, r3
 8010b2a:	d12b      	bne.n	8010b84 <__swbuf_r+0x70>
 8010b2c:	686c      	ldr	r4, [r5, #4]
 8010b2e:	69a3      	ldr	r3, [r4, #24]
 8010b30:	60a3      	str	r3, [r4, #8]
 8010b32:	89a3      	ldrh	r3, [r4, #12]
 8010b34:	071a      	lsls	r2, r3, #28
 8010b36:	d52f      	bpl.n	8010b98 <__swbuf_r+0x84>
 8010b38:	6923      	ldr	r3, [r4, #16]
 8010b3a:	b36b      	cbz	r3, 8010b98 <__swbuf_r+0x84>
 8010b3c:	6923      	ldr	r3, [r4, #16]
 8010b3e:	6820      	ldr	r0, [r4, #0]
 8010b40:	1ac0      	subs	r0, r0, r3
 8010b42:	6963      	ldr	r3, [r4, #20]
 8010b44:	b2f6      	uxtb	r6, r6
 8010b46:	4283      	cmp	r3, r0
 8010b48:	4637      	mov	r7, r6
 8010b4a:	dc04      	bgt.n	8010b56 <__swbuf_r+0x42>
 8010b4c:	4621      	mov	r1, r4
 8010b4e:	4628      	mov	r0, r5
 8010b50:	f000 f950 	bl	8010df4 <_fflush_r>
 8010b54:	bb30      	cbnz	r0, 8010ba4 <__swbuf_r+0x90>
 8010b56:	68a3      	ldr	r3, [r4, #8]
 8010b58:	3b01      	subs	r3, #1
 8010b5a:	60a3      	str	r3, [r4, #8]
 8010b5c:	6823      	ldr	r3, [r4, #0]
 8010b5e:	1c5a      	adds	r2, r3, #1
 8010b60:	6022      	str	r2, [r4, #0]
 8010b62:	701e      	strb	r6, [r3, #0]
 8010b64:	6963      	ldr	r3, [r4, #20]
 8010b66:	3001      	adds	r0, #1
 8010b68:	4283      	cmp	r3, r0
 8010b6a:	d004      	beq.n	8010b76 <__swbuf_r+0x62>
 8010b6c:	89a3      	ldrh	r3, [r4, #12]
 8010b6e:	07db      	lsls	r3, r3, #31
 8010b70:	d506      	bpl.n	8010b80 <__swbuf_r+0x6c>
 8010b72:	2e0a      	cmp	r6, #10
 8010b74:	d104      	bne.n	8010b80 <__swbuf_r+0x6c>
 8010b76:	4621      	mov	r1, r4
 8010b78:	4628      	mov	r0, r5
 8010b7a:	f000 f93b 	bl	8010df4 <_fflush_r>
 8010b7e:	b988      	cbnz	r0, 8010ba4 <__swbuf_r+0x90>
 8010b80:	4638      	mov	r0, r7
 8010b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b84:	4b0a      	ldr	r3, [pc, #40]	; (8010bb0 <__swbuf_r+0x9c>)
 8010b86:	429c      	cmp	r4, r3
 8010b88:	d101      	bne.n	8010b8e <__swbuf_r+0x7a>
 8010b8a:	68ac      	ldr	r4, [r5, #8]
 8010b8c:	e7cf      	b.n	8010b2e <__swbuf_r+0x1a>
 8010b8e:	4b09      	ldr	r3, [pc, #36]	; (8010bb4 <__swbuf_r+0xa0>)
 8010b90:	429c      	cmp	r4, r3
 8010b92:	bf08      	it	eq
 8010b94:	68ec      	ldreq	r4, [r5, #12]
 8010b96:	e7ca      	b.n	8010b2e <__swbuf_r+0x1a>
 8010b98:	4621      	mov	r1, r4
 8010b9a:	4628      	mov	r0, r5
 8010b9c:	f000 f81e 	bl	8010bdc <__swsetup_r>
 8010ba0:	2800      	cmp	r0, #0
 8010ba2:	d0cb      	beq.n	8010b3c <__swbuf_r+0x28>
 8010ba4:	f04f 37ff 	mov.w	r7, #4294967295
 8010ba8:	e7ea      	b.n	8010b80 <__swbuf_r+0x6c>
 8010baa:	bf00      	nop
 8010bac:	08013db0 	.word	0x08013db0
 8010bb0:	08013dd0 	.word	0x08013dd0
 8010bb4:	08013d90 	.word	0x08013d90

08010bb8 <_write_r>:
 8010bb8:	b538      	push	{r3, r4, r5, lr}
 8010bba:	4d07      	ldr	r5, [pc, #28]	; (8010bd8 <_write_r+0x20>)
 8010bbc:	4604      	mov	r4, r0
 8010bbe:	4608      	mov	r0, r1
 8010bc0:	4611      	mov	r1, r2
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	602a      	str	r2, [r5, #0]
 8010bc6:	461a      	mov	r2, r3
 8010bc8:	f7f0 fa85 	bl	80010d6 <_write>
 8010bcc:	1c43      	adds	r3, r0, #1
 8010bce:	d102      	bne.n	8010bd6 <_write_r+0x1e>
 8010bd0:	682b      	ldr	r3, [r5, #0]
 8010bd2:	b103      	cbz	r3, 8010bd6 <_write_r+0x1e>
 8010bd4:	6023      	str	r3, [r4, #0]
 8010bd6:	bd38      	pop	{r3, r4, r5, pc}
 8010bd8:	20006a48 	.word	0x20006a48

08010bdc <__swsetup_r>:
 8010bdc:	4b32      	ldr	r3, [pc, #200]	; (8010ca8 <__swsetup_r+0xcc>)
 8010bde:	b570      	push	{r4, r5, r6, lr}
 8010be0:	681d      	ldr	r5, [r3, #0]
 8010be2:	4606      	mov	r6, r0
 8010be4:	460c      	mov	r4, r1
 8010be6:	b125      	cbz	r5, 8010bf2 <__swsetup_r+0x16>
 8010be8:	69ab      	ldr	r3, [r5, #24]
 8010bea:	b913      	cbnz	r3, 8010bf2 <__swsetup_r+0x16>
 8010bec:	4628      	mov	r0, r5
 8010bee:	f7ff f98f 	bl	800ff10 <__sinit>
 8010bf2:	4b2e      	ldr	r3, [pc, #184]	; (8010cac <__swsetup_r+0xd0>)
 8010bf4:	429c      	cmp	r4, r3
 8010bf6:	d10f      	bne.n	8010c18 <__swsetup_r+0x3c>
 8010bf8:	686c      	ldr	r4, [r5, #4]
 8010bfa:	89a3      	ldrh	r3, [r4, #12]
 8010bfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010c00:	0719      	lsls	r1, r3, #28
 8010c02:	d42c      	bmi.n	8010c5e <__swsetup_r+0x82>
 8010c04:	06dd      	lsls	r5, r3, #27
 8010c06:	d411      	bmi.n	8010c2c <__swsetup_r+0x50>
 8010c08:	2309      	movs	r3, #9
 8010c0a:	6033      	str	r3, [r6, #0]
 8010c0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010c10:	81a3      	strh	r3, [r4, #12]
 8010c12:	f04f 30ff 	mov.w	r0, #4294967295
 8010c16:	e03e      	b.n	8010c96 <__swsetup_r+0xba>
 8010c18:	4b25      	ldr	r3, [pc, #148]	; (8010cb0 <__swsetup_r+0xd4>)
 8010c1a:	429c      	cmp	r4, r3
 8010c1c:	d101      	bne.n	8010c22 <__swsetup_r+0x46>
 8010c1e:	68ac      	ldr	r4, [r5, #8]
 8010c20:	e7eb      	b.n	8010bfa <__swsetup_r+0x1e>
 8010c22:	4b24      	ldr	r3, [pc, #144]	; (8010cb4 <__swsetup_r+0xd8>)
 8010c24:	429c      	cmp	r4, r3
 8010c26:	bf08      	it	eq
 8010c28:	68ec      	ldreq	r4, [r5, #12]
 8010c2a:	e7e6      	b.n	8010bfa <__swsetup_r+0x1e>
 8010c2c:	0758      	lsls	r0, r3, #29
 8010c2e:	d512      	bpl.n	8010c56 <__swsetup_r+0x7a>
 8010c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c32:	b141      	cbz	r1, 8010c46 <__swsetup_r+0x6a>
 8010c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010c38:	4299      	cmp	r1, r3
 8010c3a:	d002      	beq.n	8010c42 <__swsetup_r+0x66>
 8010c3c:	4630      	mov	r0, r6
 8010c3e:	f7ff fa21 	bl	8010084 <_free_r>
 8010c42:	2300      	movs	r3, #0
 8010c44:	6363      	str	r3, [r4, #52]	; 0x34
 8010c46:	89a3      	ldrh	r3, [r4, #12]
 8010c48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010c4c:	81a3      	strh	r3, [r4, #12]
 8010c4e:	2300      	movs	r3, #0
 8010c50:	6063      	str	r3, [r4, #4]
 8010c52:	6923      	ldr	r3, [r4, #16]
 8010c54:	6023      	str	r3, [r4, #0]
 8010c56:	89a3      	ldrh	r3, [r4, #12]
 8010c58:	f043 0308 	orr.w	r3, r3, #8
 8010c5c:	81a3      	strh	r3, [r4, #12]
 8010c5e:	6923      	ldr	r3, [r4, #16]
 8010c60:	b94b      	cbnz	r3, 8010c76 <__swsetup_r+0x9a>
 8010c62:	89a3      	ldrh	r3, [r4, #12]
 8010c64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010c6c:	d003      	beq.n	8010c76 <__swsetup_r+0x9a>
 8010c6e:	4621      	mov	r1, r4
 8010c70:	4630      	mov	r0, r6
 8010c72:	f000 f931 	bl	8010ed8 <__smakebuf_r>
 8010c76:	89a0      	ldrh	r0, [r4, #12]
 8010c78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010c7c:	f010 0301 	ands.w	r3, r0, #1
 8010c80:	d00a      	beq.n	8010c98 <__swsetup_r+0xbc>
 8010c82:	2300      	movs	r3, #0
 8010c84:	60a3      	str	r3, [r4, #8]
 8010c86:	6963      	ldr	r3, [r4, #20]
 8010c88:	425b      	negs	r3, r3
 8010c8a:	61a3      	str	r3, [r4, #24]
 8010c8c:	6923      	ldr	r3, [r4, #16]
 8010c8e:	b943      	cbnz	r3, 8010ca2 <__swsetup_r+0xc6>
 8010c90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010c94:	d1ba      	bne.n	8010c0c <__swsetup_r+0x30>
 8010c96:	bd70      	pop	{r4, r5, r6, pc}
 8010c98:	0781      	lsls	r1, r0, #30
 8010c9a:	bf58      	it	pl
 8010c9c:	6963      	ldrpl	r3, [r4, #20]
 8010c9e:	60a3      	str	r3, [r4, #8]
 8010ca0:	e7f4      	b.n	8010c8c <__swsetup_r+0xb0>
 8010ca2:	2000      	movs	r0, #0
 8010ca4:	e7f7      	b.n	8010c96 <__swsetup_r+0xba>
 8010ca6:	bf00      	nop
 8010ca8:	20000020 	.word	0x20000020
 8010cac:	08013db0 	.word	0x08013db0
 8010cb0:	08013dd0 	.word	0x08013dd0
 8010cb4:	08013d90 	.word	0x08013d90

08010cb8 <abort>:
 8010cb8:	b508      	push	{r3, lr}
 8010cba:	2006      	movs	r0, #6
 8010cbc:	f000 f9b8 	bl	8011030 <raise>
 8010cc0:	2001      	movs	r0, #1
 8010cc2:	f7f0 f9e1 	bl	8001088 <_exit>
	...

08010cc8 <_close_r>:
 8010cc8:	b538      	push	{r3, r4, r5, lr}
 8010cca:	4d06      	ldr	r5, [pc, #24]	; (8010ce4 <_close_r+0x1c>)
 8010ccc:	2300      	movs	r3, #0
 8010cce:	4604      	mov	r4, r0
 8010cd0:	4608      	mov	r0, r1
 8010cd2:	602b      	str	r3, [r5, #0]
 8010cd4:	f7f0 fa1b 	bl	800110e <_close>
 8010cd8:	1c43      	adds	r3, r0, #1
 8010cda:	d102      	bne.n	8010ce2 <_close_r+0x1a>
 8010cdc:	682b      	ldr	r3, [r5, #0]
 8010cde:	b103      	cbz	r3, 8010ce2 <_close_r+0x1a>
 8010ce0:	6023      	str	r3, [r4, #0]
 8010ce2:	bd38      	pop	{r3, r4, r5, pc}
 8010ce4:	20006a48 	.word	0x20006a48

08010ce8 <__sflush_r>:
 8010ce8:	898a      	ldrh	r2, [r1, #12]
 8010cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cee:	4605      	mov	r5, r0
 8010cf0:	0710      	lsls	r0, r2, #28
 8010cf2:	460c      	mov	r4, r1
 8010cf4:	d458      	bmi.n	8010da8 <__sflush_r+0xc0>
 8010cf6:	684b      	ldr	r3, [r1, #4]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	dc05      	bgt.n	8010d08 <__sflush_r+0x20>
 8010cfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	dc02      	bgt.n	8010d08 <__sflush_r+0x20>
 8010d02:	2000      	movs	r0, #0
 8010d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010d0a:	2e00      	cmp	r6, #0
 8010d0c:	d0f9      	beq.n	8010d02 <__sflush_r+0x1a>
 8010d0e:	2300      	movs	r3, #0
 8010d10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010d14:	682f      	ldr	r7, [r5, #0]
 8010d16:	602b      	str	r3, [r5, #0]
 8010d18:	d032      	beq.n	8010d80 <__sflush_r+0x98>
 8010d1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010d1c:	89a3      	ldrh	r3, [r4, #12]
 8010d1e:	075a      	lsls	r2, r3, #29
 8010d20:	d505      	bpl.n	8010d2e <__sflush_r+0x46>
 8010d22:	6863      	ldr	r3, [r4, #4]
 8010d24:	1ac0      	subs	r0, r0, r3
 8010d26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010d28:	b10b      	cbz	r3, 8010d2e <__sflush_r+0x46>
 8010d2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010d2c:	1ac0      	subs	r0, r0, r3
 8010d2e:	2300      	movs	r3, #0
 8010d30:	4602      	mov	r2, r0
 8010d32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010d34:	6a21      	ldr	r1, [r4, #32]
 8010d36:	4628      	mov	r0, r5
 8010d38:	47b0      	blx	r6
 8010d3a:	1c43      	adds	r3, r0, #1
 8010d3c:	89a3      	ldrh	r3, [r4, #12]
 8010d3e:	d106      	bne.n	8010d4e <__sflush_r+0x66>
 8010d40:	6829      	ldr	r1, [r5, #0]
 8010d42:	291d      	cmp	r1, #29
 8010d44:	d82c      	bhi.n	8010da0 <__sflush_r+0xb8>
 8010d46:	4a2a      	ldr	r2, [pc, #168]	; (8010df0 <__sflush_r+0x108>)
 8010d48:	40ca      	lsrs	r2, r1
 8010d4a:	07d6      	lsls	r6, r2, #31
 8010d4c:	d528      	bpl.n	8010da0 <__sflush_r+0xb8>
 8010d4e:	2200      	movs	r2, #0
 8010d50:	6062      	str	r2, [r4, #4]
 8010d52:	04d9      	lsls	r1, r3, #19
 8010d54:	6922      	ldr	r2, [r4, #16]
 8010d56:	6022      	str	r2, [r4, #0]
 8010d58:	d504      	bpl.n	8010d64 <__sflush_r+0x7c>
 8010d5a:	1c42      	adds	r2, r0, #1
 8010d5c:	d101      	bne.n	8010d62 <__sflush_r+0x7a>
 8010d5e:	682b      	ldr	r3, [r5, #0]
 8010d60:	b903      	cbnz	r3, 8010d64 <__sflush_r+0x7c>
 8010d62:	6560      	str	r0, [r4, #84]	; 0x54
 8010d64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d66:	602f      	str	r7, [r5, #0]
 8010d68:	2900      	cmp	r1, #0
 8010d6a:	d0ca      	beq.n	8010d02 <__sflush_r+0x1a>
 8010d6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d70:	4299      	cmp	r1, r3
 8010d72:	d002      	beq.n	8010d7a <__sflush_r+0x92>
 8010d74:	4628      	mov	r0, r5
 8010d76:	f7ff f985 	bl	8010084 <_free_r>
 8010d7a:	2000      	movs	r0, #0
 8010d7c:	6360      	str	r0, [r4, #52]	; 0x34
 8010d7e:	e7c1      	b.n	8010d04 <__sflush_r+0x1c>
 8010d80:	6a21      	ldr	r1, [r4, #32]
 8010d82:	2301      	movs	r3, #1
 8010d84:	4628      	mov	r0, r5
 8010d86:	47b0      	blx	r6
 8010d88:	1c41      	adds	r1, r0, #1
 8010d8a:	d1c7      	bne.n	8010d1c <__sflush_r+0x34>
 8010d8c:	682b      	ldr	r3, [r5, #0]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d0c4      	beq.n	8010d1c <__sflush_r+0x34>
 8010d92:	2b1d      	cmp	r3, #29
 8010d94:	d001      	beq.n	8010d9a <__sflush_r+0xb2>
 8010d96:	2b16      	cmp	r3, #22
 8010d98:	d101      	bne.n	8010d9e <__sflush_r+0xb6>
 8010d9a:	602f      	str	r7, [r5, #0]
 8010d9c:	e7b1      	b.n	8010d02 <__sflush_r+0x1a>
 8010d9e:	89a3      	ldrh	r3, [r4, #12]
 8010da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010da4:	81a3      	strh	r3, [r4, #12]
 8010da6:	e7ad      	b.n	8010d04 <__sflush_r+0x1c>
 8010da8:	690f      	ldr	r7, [r1, #16]
 8010daa:	2f00      	cmp	r7, #0
 8010dac:	d0a9      	beq.n	8010d02 <__sflush_r+0x1a>
 8010dae:	0793      	lsls	r3, r2, #30
 8010db0:	680e      	ldr	r6, [r1, #0]
 8010db2:	bf08      	it	eq
 8010db4:	694b      	ldreq	r3, [r1, #20]
 8010db6:	600f      	str	r7, [r1, #0]
 8010db8:	bf18      	it	ne
 8010dba:	2300      	movne	r3, #0
 8010dbc:	eba6 0807 	sub.w	r8, r6, r7
 8010dc0:	608b      	str	r3, [r1, #8]
 8010dc2:	f1b8 0f00 	cmp.w	r8, #0
 8010dc6:	dd9c      	ble.n	8010d02 <__sflush_r+0x1a>
 8010dc8:	6a21      	ldr	r1, [r4, #32]
 8010dca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010dcc:	4643      	mov	r3, r8
 8010dce:	463a      	mov	r2, r7
 8010dd0:	4628      	mov	r0, r5
 8010dd2:	47b0      	blx	r6
 8010dd4:	2800      	cmp	r0, #0
 8010dd6:	dc06      	bgt.n	8010de6 <__sflush_r+0xfe>
 8010dd8:	89a3      	ldrh	r3, [r4, #12]
 8010dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dde:	81a3      	strh	r3, [r4, #12]
 8010de0:	f04f 30ff 	mov.w	r0, #4294967295
 8010de4:	e78e      	b.n	8010d04 <__sflush_r+0x1c>
 8010de6:	4407      	add	r7, r0
 8010de8:	eba8 0800 	sub.w	r8, r8, r0
 8010dec:	e7e9      	b.n	8010dc2 <__sflush_r+0xda>
 8010dee:	bf00      	nop
 8010df0:	20400001 	.word	0x20400001

08010df4 <_fflush_r>:
 8010df4:	b538      	push	{r3, r4, r5, lr}
 8010df6:	690b      	ldr	r3, [r1, #16]
 8010df8:	4605      	mov	r5, r0
 8010dfa:	460c      	mov	r4, r1
 8010dfc:	b913      	cbnz	r3, 8010e04 <_fflush_r+0x10>
 8010dfe:	2500      	movs	r5, #0
 8010e00:	4628      	mov	r0, r5
 8010e02:	bd38      	pop	{r3, r4, r5, pc}
 8010e04:	b118      	cbz	r0, 8010e0e <_fflush_r+0x1a>
 8010e06:	6983      	ldr	r3, [r0, #24]
 8010e08:	b90b      	cbnz	r3, 8010e0e <_fflush_r+0x1a>
 8010e0a:	f7ff f881 	bl	800ff10 <__sinit>
 8010e0e:	4b14      	ldr	r3, [pc, #80]	; (8010e60 <_fflush_r+0x6c>)
 8010e10:	429c      	cmp	r4, r3
 8010e12:	d11b      	bne.n	8010e4c <_fflush_r+0x58>
 8010e14:	686c      	ldr	r4, [r5, #4]
 8010e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d0ef      	beq.n	8010dfe <_fflush_r+0xa>
 8010e1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010e20:	07d0      	lsls	r0, r2, #31
 8010e22:	d404      	bmi.n	8010e2e <_fflush_r+0x3a>
 8010e24:	0599      	lsls	r1, r3, #22
 8010e26:	d402      	bmi.n	8010e2e <_fflush_r+0x3a>
 8010e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e2a:	f7ff f921 	bl	8010070 <__retarget_lock_acquire_recursive>
 8010e2e:	4628      	mov	r0, r5
 8010e30:	4621      	mov	r1, r4
 8010e32:	f7ff ff59 	bl	8010ce8 <__sflush_r>
 8010e36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010e38:	07da      	lsls	r2, r3, #31
 8010e3a:	4605      	mov	r5, r0
 8010e3c:	d4e0      	bmi.n	8010e00 <_fflush_r+0xc>
 8010e3e:	89a3      	ldrh	r3, [r4, #12]
 8010e40:	059b      	lsls	r3, r3, #22
 8010e42:	d4dd      	bmi.n	8010e00 <_fflush_r+0xc>
 8010e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e46:	f7ff f914 	bl	8010072 <__retarget_lock_release_recursive>
 8010e4a:	e7d9      	b.n	8010e00 <_fflush_r+0xc>
 8010e4c:	4b05      	ldr	r3, [pc, #20]	; (8010e64 <_fflush_r+0x70>)
 8010e4e:	429c      	cmp	r4, r3
 8010e50:	d101      	bne.n	8010e56 <_fflush_r+0x62>
 8010e52:	68ac      	ldr	r4, [r5, #8]
 8010e54:	e7df      	b.n	8010e16 <_fflush_r+0x22>
 8010e56:	4b04      	ldr	r3, [pc, #16]	; (8010e68 <_fflush_r+0x74>)
 8010e58:	429c      	cmp	r4, r3
 8010e5a:	bf08      	it	eq
 8010e5c:	68ec      	ldreq	r4, [r5, #12]
 8010e5e:	e7da      	b.n	8010e16 <_fflush_r+0x22>
 8010e60:	08013db0 	.word	0x08013db0
 8010e64:	08013dd0 	.word	0x08013dd0
 8010e68:	08013d90 	.word	0x08013d90

08010e6c <_lseek_r>:
 8010e6c:	b538      	push	{r3, r4, r5, lr}
 8010e6e:	4d07      	ldr	r5, [pc, #28]	; (8010e8c <_lseek_r+0x20>)
 8010e70:	4604      	mov	r4, r0
 8010e72:	4608      	mov	r0, r1
 8010e74:	4611      	mov	r1, r2
 8010e76:	2200      	movs	r2, #0
 8010e78:	602a      	str	r2, [r5, #0]
 8010e7a:	461a      	mov	r2, r3
 8010e7c:	f7f0 f96e 	bl	800115c <_lseek>
 8010e80:	1c43      	adds	r3, r0, #1
 8010e82:	d102      	bne.n	8010e8a <_lseek_r+0x1e>
 8010e84:	682b      	ldr	r3, [r5, #0]
 8010e86:	b103      	cbz	r3, 8010e8a <_lseek_r+0x1e>
 8010e88:	6023      	str	r3, [r4, #0]
 8010e8a:	bd38      	pop	{r3, r4, r5, pc}
 8010e8c:	20006a48 	.word	0x20006a48

08010e90 <__swhatbuf_r>:
 8010e90:	b570      	push	{r4, r5, r6, lr}
 8010e92:	460e      	mov	r6, r1
 8010e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e98:	2900      	cmp	r1, #0
 8010e9a:	b096      	sub	sp, #88	; 0x58
 8010e9c:	4614      	mov	r4, r2
 8010e9e:	461d      	mov	r5, r3
 8010ea0:	da07      	bge.n	8010eb2 <__swhatbuf_r+0x22>
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	602b      	str	r3, [r5, #0]
 8010ea6:	89b3      	ldrh	r3, [r6, #12]
 8010ea8:	061a      	lsls	r2, r3, #24
 8010eaa:	d410      	bmi.n	8010ece <__swhatbuf_r+0x3e>
 8010eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010eb0:	e00e      	b.n	8010ed0 <__swhatbuf_r+0x40>
 8010eb2:	466a      	mov	r2, sp
 8010eb4:	f000 f8d8 	bl	8011068 <_fstat_r>
 8010eb8:	2800      	cmp	r0, #0
 8010eba:	dbf2      	blt.n	8010ea2 <__swhatbuf_r+0x12>
 8010ebc:	9a01      	ldr	r2, [sp, #4]
 8010ebe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010ec2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010ec6:	425a      	negs	r2, r3
 8010ec8:	415a      	adcs	r2, r3
 8010eca:	602a      	str	r2, [r5, #0]
 8010ecc:	e7ee      	b.n	8010eac <__swhatbuf_r+0x1c>
 8010ece:	2340      	movs	r3, #64	; 0x40
 8010ed0:	2000      	movs	r0, #0
 8010ed2:	6023      	str	r3, [r4, #0]
 8010ed4:	b016      	add	sp, #88	; 0x58
 8010ed6:	bd70      	pop	{r4, r5, r6, pc}

08010ed8 <__smakebuf_r>:
 8010ed8:	898b      	ldrh	r3, [r1, #12]
 8010eda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010edc:	079d      	lsls	r5, r3, #30
 8010ede:	4606      	mov	r6, r0
 8010ee0:	460c      	mov	r4, r1
 8010ee2:	d507      	bpl.n	8010ef4 <__smakebuf_r+0x1c>
 8010ee4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010ee8:	6023      	str	r3, [r4, #0]
 8010eea:	6123      	str	r3, [r4, #16]
 8010eec:	2301      	movs	r3, #1
 8010eee:	6163      	str	r3, [r4, #20]
 8010ef0:	b002      	add	sp, #8
 8010ef2:	bd70      	pop	{r4, r5, r6, pc}
 8010ef4:	ab01      	add	r3, sp, #4
 8010ef6:	466a      	mov	r2, sp
 8010ef8:	f7ff ffca 	bl	8010e90 <__swhatbuf_r>
 8010efc:	9900      	ldr	r1, [sp, #0]
 8010efe:	4605      	mov	r5, r0
 8010f00:	4630      	mov	r0, r6
 8010f02:	f7ff f90f 	bl	8010124 <_malloc_r>
 8010f06:	b948      	cbnz	r0, 8010f1c <__smakebuf_r+0x44>
 8010f08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f0c:	059a      	lsls	r2, r3, #22
 8010f0e:	d4ef      	bmi.n	8010ef0 <__smakebuf_r+0x18>
 8010f10:	f023 0303 	bic.w	r3, r3, #3
 8010f14:	f043 0302 	orr.w	r3, r3, #2
 8010f18:	81a3      	strh	r3, [r4, #12]
 8010f1a:	e7e3      	b.n	8010ee4 <__smakebuf_r+0xc>
 8010f1c:	4b0d      	ldr	r3, [pc, #52]	; (8010f54 <__smakebuf_r+0x7c>)
 8010f1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010f20:	89a3      	ldrh	r3, [r4, #12]
 8010f22:	6020      	str	r0, [r4, #0]
 8010f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f28:	81a3      	strh	r3, [r4, #12]
 8010f2a:	9b00      	ldr	r3, [sp, #0]
 8010f2c:	6163      	str	r3, [r4, #20]
 8010f2e:	9b01      	ldr	r3, [sp, #4]
 8010f30:	6120      	str	r0, [r4, #16]
 8010f32:	b15b      	cbz	r3, 8010f4c <__smakebuf_r+0x74>
 8010f34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f38:	4630      	mov	r0, r6
 8010f3a:	f000 f8a7 	bl	801108c <_isatty_r>
 8010f3e:	b128      	cbz	r0, 8010f4c <__smakebuf_r+0x74>
 8010f40:	89a3      	ldrh	r3, [r4, #12]
 8010f42:	f023 0303 	bic.w	r3, r3, #3
 8010f46:	f043 0301 	orr.w	r3, r3, #1
 8010f4a:	81a3      	strh	r3, [r4, #12]
 8010f4c:	89a0      	ldrh	r0, [r4, #12]
 8010f4e:	4305      	orrs	r5, r0
 8010f50:	81a5      	strh	r5, [r4, #12]
 8010f52:	e7cd      	b.n	8010ef0 <__smakebuf_r+0x18>
 8010f54:	0800fea9 	.word	0x0800fea9

08010f58 <__malloc_lock>:
 8010f58:	4801      	ldr	r0, [pc, #4]	; (8010f60 <__malloc_lock+0x8>)
 8010f5a:	f7ff b889 	b.w	8010070 <__retarget_lock_acquire_recursive>
 8010f5e:	bf00      	nop
 8010f60:	20006a50 	.word	0x20006a50

08010f64 <__malloc_unlock>:
 8010f64:	4801      	ldr	r0, [pc, #4]	; (8010f6c <__malloc_unlock+0x8>)
 8010f66:	f7ff b884 	b.w	8010072 <__retarget_lock_release_recursive>
 8010f6a:	bf00      	nop
 8010f6c:	20006a50 	.word	0x20006a50

08010f70 <_realloc_r>:
 8010f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f72:	4607      	mov	r7, r0
 8010f74:	4614      	mov	r4, r2
 8010f76:	460e      	mov	r6, r1
 8010f78:	b921      	cbnz	r1, 8010f84 <_realloc_r+0x14>
 8010f7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010f7e:	4611      	mov	r1, r2
 8010f80:	f7ff b8d0 	b.w	8010124 <_malloc_r>
 8010f84:	b922      	cbnz	r2, 8010f90 <_realloc_r+0x20>
 8010f86:	f7ff f87d 	bl	8010084 <_free_r>
 8010f8a:	4625      	mov	r5, r4
 8010f8c:	4628      	mov	r0, r5
 8010f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f90:	f000 f88c 	bl	80110ac <_malloc_usable_size_r>
 8010f94:	42a0      	cmp	r0, r4
 8010f96:	d20f      	bcs.n	8010fb8 <_realloc_r+0x48>
 8010f98:	4621      	mov	r1, r4
 8010f9a:	4638      	mov	r0, r7
 8010f9c:	f7ff f8c2 	bl	8010124 <_malloc_r>
 8010fa0:	4605      	mov	r5, r0
 8010fa2:	2800      	cmp	r0, #0
 8010fa4:	d0f2      	beq.n	8010f8c <_realloc_r+0x1c>
 8010fa6:	4631      	mov	r1, r6
 8010fa8:	4622      	mov	r2, r4
 8010faa:	f7fe fe93 	bl	800fcd4 <memcpy>
 8010fae:	4631      	mov	r1, r6
 8010fb0:	4638      	mov	r0, r7
 8010fb2:	f7ff f867 	bl	8010084 <_free_r>
 8010fb6:	e7e9      	b.n	8010f8c <_realloc_r+0x1c>
 8010fb8:	4635      	mov	r5, r6
 8010fba:	e7e7      	b.n	8010f8c <_realloc_r+0x1c>

08010fbc <_read_r>:
 8010fbc:	b538      	push	{r3, r4, r5, lr}
 8010fbe:	4d07      	ldr	r5, [pc, #28]	; (8010fdc <_read_r+0x20>)
 8010fc0:	4604      	mov	r4, r0
 8010fc2:	4608      	mov	r0, r1
 8010fc4:	4611      	mov	r1, r2
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	602a      	str	r2, [r5, #0]
 8010fca:	461a      	mov	r2, r3
 8010fcc:	f7f0 f866 	bl	800109c <_read>
 8010fd0:	1c43      	adds	r3, r0, #1
 8010fd2:	d102      	bne.n	8010fda <_read_r+0x1e>
 8010fd4:	682b      	ldr	r3, [r5, #0]
 8010fd6:	b103      	cbz	r3, 8010fda <_read_r+0x1e>
 8010fd8:	6023      	str	r3, [r4, #0]
 8010fda:	bd38      	pop	{r3, r4, r5, pc}
 8010fdc:	20006a48 	.word	0x20006a48

08010fe0 <_raise_r>:
 8010fe0:	291f      	cmp	r1, #31
 8010fe2:	b538      	push	{r3, r4, r5, lr}
 8010fe4:	4604      	mov	r4, r0
 8010fe6:	460d      	mov	r5, r1
 8010fe8:	d904      	bls.n	8010ff4 <_raise_r+0x14>
 8010fea:	2316      	movs	r3, #22
 8010fec:	6003      	str	r3, [r0, #0]
 8010fee:	f04f 30ff 	mov.w	r0, #4294967295
 8010ff2:	bd38      	pop	{r3, r4, r5, pc}
 8010ff4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010ff6:	b112      	cbz	r2, 8010ffe <_raise_r+0x1e>
 8010ff8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010ffc:	b94b      	cbnz	r3, 8011012 <_raise_r+0x32>
 8010ffe:	4620      	mov	r0, r4
 8011000:	f000 f830 	bl	8011064 <_getpid_r>
 8011004:	462a      	mov	r2, r5
 8011006:	4601      	mov	r1, r0
 8011008:	4620      	mov	r0, r4
 801100a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801100e:	f000 b817 	b.w	8011040 <_kill_r>
 8011012:	2b01      	cmp	r3, #1
 8011014:	d00a      	beq.n	801102c <_raise_r+0x4c>
 8011016:	1c59      	adds	r1, r3, #1
 8011018:	d103      	bne.n	8011022 <_raise_r+0x42>
 801101a:	2316      	movs	r3, #22
 801101c:	6003      	str	r3, [r0, #0]
 801101e:	2001      	movs	r0, #1
 8011020:	e7e7      	b.n	8010ff2 <_raise_r+0x12>
 8011022:	2400      	movs	r4, #0
 8011024:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011028:	4628      	mov	r0, r5
 801102a:	4798      	blx	r3
 801102c:	2000      	movs	r0, #0
 801102e:	e7e0      	b.n	8010ff2 <_raise_r+0x12>

08011030 <raise>:
 8011030:	4b02      	ldr	r3, [pc, #8]	; (801103c <raise+0xc>)
 8011032:	4601      	mov	r1, r0
 8011034:	6818      	ldr	r0, [r3, #0]
 8011036:	f7ff bfd3 	b.w	8010fe0 <_raise_r>
 801103a:	bf00      	nop
 801103c:	20000020 	.word	0x20000020

08011040 <_kill_r>:
 8011040:	b538      	push	{r3, r4, r5, lr}
 8011042:	4d07      	ldr	r5, [pc, #28]	; (8011060 <_kill_r+0x20>)
 8011044:	2300      	movs	r3, #0
 8011046:	4604      	mov	r4, r0
 8011048:	4608      	mov	r0, r1
 801104a:	4611      	mov	r1, r2
 801104c:	602b      	str	r3, [r5, #0]
 801104e:	f7f0 f809 	bl	8001064 <_kill>
 8011052:	1c43      	adds	r3, r0, #1
 8011054:	d102      	bne.n	801105c <_kill_r+0x1c>
 8011056:	682b      	ldr	r3, [r5, #0]
 8011058:	b103      	cbz	r3, 801105c <_kill_r+0x1c>
 801105a:	6023      	str	r3, [r4, #0]
 801105c:	bd38      	pop	{r3, r4, r5, pc}
 801105e:	bf00      	nop
 8011060:	20006a48 	.word	0x20006a48

08011064 <_getpid_r>:
 8011064:	f7ef bff6 	b.w	8001054 <_getpid>

08011068 <_fstat_r>:
 8011068:	b538      	push	{r3, r4, r5, lr}
 801106a:	4d07      	ldr	r5, [pc, #28]	; (8011088 <_fstat_r+0x20>)
 801106c:	2300      	movs	r3, #0
 801106e:	4604      	mov	r4, r0
 8011070:	4608      	mov	r0, r1
 8011072:	4611      	mov	r1, r2
 8011074:	602b      	str	r3, [r5, #0]
 8011076:	f7f0 f856 	bl	8001126 <_fstat>
 801107a:	1c43      	adds	r3, r0, #1
 801107c:	d102      	bne.n	8011084 <_fstat_r+0x1c>
 801107e:	682b      	ldr	r3, [r5, #0]
 8011080:	b103      	cbz	r3, 8011084 <_fstat_r+0x1c>
 8011082:	6023      	str	r3, [r4, #0]
 8011084:	bd38      	pop	{r3, r4, r5, pc}
 8011086:	bf00      	nop
 8011088:	20006a48 	.word	0x20006a48

0801108c <_isatty_r>:
 801108c:	b538      	push	{r3, r4, r5, lr}
 801108e:	4d06      	ldr	r5, [pc, #24]	; (80110a8 <_isatty_r+0x1c>)
 8011090:	2300      	movs	r3, #0
 8011092:	4604      	mov	r4, r0
 8011094:	4608      	mov	r0, r1
 8011096:	602b      	str	r3, [r5, #0]
 8011098:	f7f0 f855 	bl	8001146 <_isatty>
 801109c:	1c43      	adds	r3, r0, #1
 801109e:	d102      	bne.n	80110a6 <_isatty_r+0x1a>
 80110a0:	682b      	ldr	r3, [r5, #0]
 80110a2:	b103      	cbz	r3, 80110a6 <_isatty_r+0x1a>
 80110a4:	6023      	str	r3, [r4, #0]
 80110a6:	bd38      	pop	{r3, r4, r5, pc}
 80110a8:	20006a48 	.word	0x20006a48

080110ac <_malloc_usable_size_r>:
 80110ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110b0:	1f18      	subs	r0, r3, #4
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	bfbc      	itt	lt
 80110b6:	580b      	ldrlt	r3, [r1, r0]
 80110b8:	18c0      	addlt	r0, r0, r3
 80110ba:	4770      	bx	lr

080110bc <_init>:
 80110bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110be:	bf00      	nop
 80110c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110c2:	bc08      	pop	{r3}
 80110c4:	469e      	mov	lr, r3
 80110c6:	4770      	bx	lr

080110c8 <_fini>:
 80110c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110ca:	bf00      	nop
 80110cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110ce:	bc08      	pop	{r3}
 80110d0:	469e      	mov	lr, r3
 80110d2:	4770      	bx	lr
